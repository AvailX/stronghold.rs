(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[203],{3950:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],p={},s="Structure: Communication",c={unversionedId:"structure/communication",id:"structure/communication",isDocsHomePage:!1,title:"Structure: Communication",description:"| | | |",source:"@site/docs/structure/communication.md",sourceDirName:"structure",slug:"/structure/communication",permalink:"/docs/structure/communication",editUrl:"https://github.com/iotaledger/stronghold.rs/tree/dev/documentation/docs/structure/communication.md",version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Structure: Runtime",permalink:"/docs/structure/runtime"},next:{title:"Structure: Derive",permalink:"/docs/structure/derive"}},m=[],l={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"structure-communication"},"Structure: Communication"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null}))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/iotaledger/stronghold.rs/tree/dev/communication"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/github-source-blue.svg",alt:"github"}))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://docs.rs/stronghold-communication"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/rust-docs-green.svg",alt:"github"}))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://crates.io/crates/stronghold-communication"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/crates/v/stronghold-communication.svg",alt:null})))))),(0,o.kt)("p",null,(0,o.kt)("h2",{parentName:"p"},"Stronghold Communication"),(0,o.kt)("p",{parentName:"p"},"This library enables Strongholds on different devices and in different networks to communicate with each other.\nThe main basis for its functionality is the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/libp2p/rust-libp2p"},"rust-libp2p")," library, which is a system of protocols, specifications and libraries that enable the development of peer-to-peer network applications (",(0,o.kt)("a",{parentName:"p",href:"https://libp2p.io/"},"https://libp2p.io/"),")."),(0,o.kt)("h3",{parentName:"p"},"Network Behaviour and Swarm"),(0,o.kt)("p",{parentName:"p"},(0,o.kt)("strong",{parentName:"p"},"module behaviour.rs:")),(0,o.kt)("p",{parentName:"p"},"Stronghold-communication implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"P2PNetworkBehaviour")," for sending messages and reacting upon the outcome of the operation.\nIt combines multiple protocols of Libp2p:"),(0,o.kt)("ul",{parentName:"p"},(0,o.kt)("li",{parentName:"ul"},"Multiplexing following the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/hashicorp/yamux/blob/master/spec.md"},"Yamux specification"),"  "),(0,o.kt)("li",{parentName:"ul"},"Noise: Encryption of the communication using the ",(0,o.kt)("a",{parentName:"li",href:"https://noiseprotocol.org/noise.html"},"Noise protocol")," with XX-Handshake"),(0,o.kt)("li",{parentName:"ul"},"Multicast DNS: Enable Peer Discovery in a local network"),(0,o.kt)("li",{parentName:"ul"},"Identify Protocol: Receive identifying information like the ",(0,o.kt)("inlineCode",{parentName:"li"},"PeerId")," and listening addresses when connecting to a new peer."),(0,o.kt)("li",{parentName:"ul"},"Request-Response Protocol: Allows sending direct request/response messages between Peers; it expects a response for each request")),(0,o.kt)("p",{parentName:"p"},"Upon creating a new instance, a transport is created and upgraded, and combined with the P2PNetworkBehaviour into a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/libp2p/0.35.1/libp2p/swarm/struct.ExpandedSwarm.html"},"ExpandedSwarm"),". This Swarm is returned to the caller and serves as entry-point for all communication to other peers. Additional to the Libp2p methods of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ExpandedSwarm"),", it enables sending outbound messages, and manages the known peers. Incoming ",(0,o.kt)("inlineCode",{parentName:"p"},"P2PEvents")," can be handled by polling from the swarm, e.g. via the ",(0,o.kt)("inlineCode",{parentName:"p"},"next")," method.   "),(0,o.kt)("h3",{parentName:"p"},"Communication Actor"),(0,o.kt)("p",{parentName:"p"},(0,o.kt)("strong",{parentName:"p"},"module actor.rs:")),(0,o.kt)("p",{parentName:"p"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Communication Actor")," is using the ",(0,o.kt)("a",{parentName:"p",href:"https://riker.rs/"},"Riker Framwork")," to implement the actor pattern.",(0,o.kt)("br",{parentName:"p"}),"\n","When creating a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Communication Actor"),", the actor creates a ",(0,o.kt)("inlineCode",{parentName:"p"},"P2PNetworkBehaviour")," and continuously polls for events,\nincoming requests are sent to the client actor that has to be provided in the ",(0,o.kt)("inlineCode",{parentName:"p"},"CommunicationConfig"),"."),(0,o.kt)("p",{parentName:"p"},"All swarm interaction, and configuration of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Communication Actor")," is accomplished by sending the appropriate ",(0,o.kt)("inlineCode",{parentName:"p"},"CommunicationRequest")," to it, for each ",(0,o.kt)("inlineCode",{parentName:"p"},"CommunicationRequest")," a ",(0,o.kt)("inlineCode",{parentName:"p"},"CommunicationResults")," is returned to the sender, this also allows using the ",(0,o.kt)("a",{parentName:"p",href:"https://riker.rs/patterns/#ask"},"ask pattern"),"."),(0,o.kt)("h4",{parentName:"p"},"Firewall"),(0,o.kt)("p",{parentName:"p"},"The communication actor implements a firewall that checks the permission of each outgoing and incoming requests and drops them if the necessary permission has not been set. The required ",(0,o.kt)("inlineCode",{parentName:"p"},"ToPermissionVariants")," trait for messages can be derived with the communication-macros, this allows in case of enum Request types to accept specific variants while rejecting others.")))}u.isMDXComponent=!0},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,h=u["".concat(s,".").concat(d)]||u[d]||l[d]||o;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);