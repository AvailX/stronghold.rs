(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[862],{2889:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),i=["components"],l={},u="Structure: Runtime",p={unversionedId:"structure/runtime",id:"structure/runtime",isDocsHomePage:!1,title:"Structure: Runtime",description:"| | | |",source:"@site/docs/structure/runtime.md",sourceDirName:"structure",slug:"/structure/runtime",permalink:"/docs/structure/runtime",editUrl:"https://github.com/iotaledger/stronghold.rs/tree/dev/documentation/docs/structure/runtime.md",version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Structure: Engine::Store",permalink:"/docs/structure/store"},next:{title:"Structure: Communication",permalink:"/docs/structure/p2p"}},s=[],m={toc:s};function c(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"structure-runtime"},"Structure: Runtime"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null}))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/iotaledger/stronghold.rs/tree/dev/engine/runtime"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/github-source-blue.svg",alt:"github"}))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://docs.rs/stronghold-runtime"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/rust-docs-green.svg",alt:"github"}))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://crates.io/crates/stronghold-runtime"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/crates/v/stronghold-runtime.svg",alt:null})))))),(0,o.kt)("p",null,(0,o.kt)("h1",{parentName:"p"},"Stronghold runtime system utilities"),(0,o.kt)("p",{parentName:"p"},"This crate aims to provide utilities for performing computations as securely as possible with respect to the underlying operating system."),(0,o.kt)("p",{parentName:"p"},"The crate provides three primary Types for guarding data; ",(0,o.kt)("inlineCode",{parentName:"p"},"GuardedVec"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Guarded"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"Secret"),". Here are the primary concerns centered around this library:"),(0,o.kt)("ul",{parentName:"p"},(0,o.kt)("li",{parentName:"ul"},"guarded memory allocations"),(0,o.kt)("li",{parentName:"ul"},"assists with read/write protecting sensitive data"),(0,o.kt)("li",{parentName:"ul"},"zeroes the allocated memory when handing it back to the operating system"),(0,o.kt)("li",{parentName:"ul"},"uses canary and garbage values to protect the memory pages."),(0,o.kt)("li",{parentName:"ul"},"leverages NACL ",(0,o.kt)("inlineCode",{parentName:"li"},"libsodium")," for use on all supported platforms.")),(0,o.kt)("p",{parentName:"p"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"GuardedVec")," type is used for protecting variable-length secrets allocated on the heap. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Guarded")," type is used for protecting fixed-length secrets allocated on the heap. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Secret")," type is used for guarding secrets allocated to the stack."),(0,o.kt)("p",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"p"},"GuardedVec")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Guarded")," include the following guarantees:"),(0,o.kt)("ul",{parentName:"p"},(0,o.kt)("li",{parentName:"ul"},"Causes segfault upon access without using a borrow."),(0,o.kt)("li",{parentName:"ul"},"Protected using mprotect:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Prot::NoAccess")," - when the box has no current borrows."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Prot::ReadOnly")," - when the box has at least one current immutable borrow."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Prot::ReadWrite")," - when the box has a current mutable borrow (can only have one at a time)."))),(0,o.kt)("li",{parentName:"ul"},"The allocated memory uses guard pages both proceeding and following the memory. Overflows and large underflows cause immediate termination of the program."),(0,o.kt)("li",{parentName:"ul"},"A canary proceeds the memory location to detect smaller underflows.  The program will drop the underlying memory and terminate if detected."),(0,o.kt)("li",{parentName:"ul"},"The Memory is locked with ",(0,o.kt)("inlineCode",{parentName:"li"},"mlock"),"."),(0,o.kt)("li",{parentName:"ul"},"When the memory is freed, ",(0,o.kt)("inlineCode",{parentName:"li"},"munlock")," is called."),(0,o.kt)("li",{parentName:"ul"},"The memory is zeroed when no longer in use via ",(0,o.kt)("inlineCode",{parentName:"li"},"sodium_free"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Guarded")," types can be compared in constant time."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Guarded")," types can not be printed using ",(0,o.kt)("inlineCode",{parentName:"li"},"Debug"),"."),(0,o.kt)("li",{parentName:"ul"},"The interior data of a ",(0,o.kt)("inlineCode",{parentName:"li"},"Guarded")," type may not be ",(0,o.kt)("inlineCode",{parentName:"li"},"Clone"),". ",(0,o.kt)("inlineCode",{parentName:"li"},"GuardedVec")," includes serialization which converts the data into a vector before its serialized by serde. Upon deserialization, the data is returned back to a new GuardedVec.")),(0,o.kt)("p",{parentName:"p"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Secret")," type provides fewer security features:"),(0,o.kt)("ul",{parentName:"p"},(0,o.kt)("li",{parentName:"ul"},"The Memory is locked with ","[",(0,o.kt)("inlineCode",{parentName:"li"},"mlock"),"]","."),(0,o.kt)("li",{parentName:"ul"},"When the memory is freed, ","[",(0,o.kt)("inlineCode",{parentName:"li"},"munlock"),"]"," is called."),(0,o.kt)("li",{parentName:"ul"},"the memory is zeroed out when no longer in use."),(0,o.kt)("li",{parentName:"ul"},"values are compared in constant time."),(0,o.kt)("li",{parentName:"ul"},"values are prevented from being Debugged."),(0,o.kt)("li",{parentName:"ul"},"Values can not be cloned.")),(0,o.kt)("h2",{parentName:"p"},"Zeroing Allocator"),(0,o.kt)("p",{parentName:"p"},"For the sake of providing a method of clearing out memory after it is used, the runtime also implements a zeroing allocator in the form of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZeroingAlloc")," struct. This global allocator is merely a wrapper around the standard rust memory allocator which just adds a memory zeroing step to the dealloc process. The memory is zeroed by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"sodium_memzero")," function prior to being deallocated. ")),(0,o.kt)("p",null,"The primary components are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Guarded")," - A guarded type for protecting fixed-length secrets allocated on the heap."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"GuardedVec")," - A guarded type for protecting variable-length secrets allocated on the heap."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Secret")," - A Type for guarding secrets allocated to the stack."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"ZeroingAlloc")," - A Zeroing Allocator which wraps the standard memory allocator. This allocator zeroes out memory when it is dropped.")))}c.isMDXComponent=!0},3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=a,h=c["".concat(u,".").concat(d)]||c[d]||m[d]||o;return r?n.createElement(h,i(i({ref:t},s),{},{components:r})):n.createElement(h,i({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"}}]);