(function() {var implementors = {};
implementors["crypto"] = [{"text":"impl RefUnwindSafe for ChaCha20Ietf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaChaPolyIetf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poly1305","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XChaCha20","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XChaChaPoly","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["iota_stronghold"] = [{"text":"impl RefUnwindSafe for SLIP10DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Procedure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProcResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHResults","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for InternalActor&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalMsg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalResults","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SMsg","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for Bucket&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadWrite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientMsg","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Stronghold","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Provider","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for KeyStore&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Snapshot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotState","synthetic":true,"types":[]},{"text":"impl&lt;Msg&gt; RefUnwindSafe for AskActor&lt;Msg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Seed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Segment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Chain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VaultId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ID","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ResultMessage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrongholdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VaultFlags","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Secret&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["primitives"] = [{"text":"impl RefUnwindSafe for MessageAuthCodeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CipherInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyDervFuncInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PbkdfInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignInfo","synthetic":true,"types":[]}];
implementors["random"] = [{"text":"impl RefUnwindSafe for OsRandomErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["runtime"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PAGE_SIZE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GuardedAllocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GuardedAllocator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __kernel_fd_set","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __kernel_fsid_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sock_filter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sock_fprog","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for seccomp_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Program","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZoneSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["snapshot"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for LZ4Decoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LZ4Encoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duplicate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["store"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Cache&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["stronghold_communication"] = [{"text":"impl RefUnwindSafe for ConnectPeerError","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for CommunicationEvent&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; !RefUnwindSafe for CommsActorConfig&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; !RefUnwindSafe for CommunicationActor&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; !RefUnwindSafe for SwarmTask&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for P2PMdnsEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for P2PIdentifyInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for P2PProtocolsHandlerUpgrErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for P2PIdentifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for P2POutboundFailure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for P2PInboundFailure","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for P2PReqResEvent&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for P2PEvent&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageProtocol","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for MessageCodec&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BehaviourError","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; !RefUnwindSafe for P2PNetworkBehaviour&lt;T, U&gt;","synthetic":true,"types":[]}];
implementors["vault"] = [{"text":"impl RefUnwindSafe for Base64","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Key&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UntypedTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RevocationTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealedTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealedBlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Val","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChainId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlobId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Chain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordId","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for DBView&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for DBReader&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreparedRead","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for DBWriter&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()