(function() {var implementors = {};
implementors["iota_stronghold"] = [{"text":"impl UnwindSafe for SLIP10DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Procedure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProcResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SerdeProcResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHResults","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for InternalActor&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalMsg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalResults","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SMsg","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Stronghold","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Provider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadWrite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientMsg","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for KeyStore&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Snapshot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VaultId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ID","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ResultMessage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrongholdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VaultFlags","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["runtime"] = [{"text":"impl&lt;T&gt; UnwindSafe for ZeroingAlloc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Prot","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Boxed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Guarded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RefMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GuardedVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RefMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GuardedVecVisitor&lt;T&gt;","synthetic":true,"types":[]}];
implementors["snapshot"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for LZ4Decoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LZ4Encoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Duplicate","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["store"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for Cache&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["stronghold_communication"] = [{"text":"impl UnwindSafe for ConnectionManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PermissionValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PermissionSum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestDirection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FirewallPermission","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FirewallRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FirewallConfiguration","synthetic":true,"types":[]},{"text":"impl&lt;Req, Res, ClientMsg, P&gt; !UnwindSafe for SwarmTask&lt;Req, Res, ClientMsg, P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RelayConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl&lt;Req, ClientMsg&gt; !UnwindSafe for CommunicationRequest&lt;Req, ClientMsg&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FirewallBlocked","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestMessageError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EstablishedConnection","synthetic":true,"types":[]},{"text":"impl&lt;Res&gt; UnwindSafe for CommunicationResults&lt;Res&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Res: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectPeerError","synthetic":true,"types":[]},{"text":"impl&lt;ClientMsg&gt; !UnwindSafe for CommunicationActorConfig&lt;ClientMsg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Req, Res, ClientMsg, P&gt; !UnwindSafe for CommunicationActor&lt;Req, Res, ClientMsg, P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageProtocol","synthetic":true,"types":[]},{"text":"impl&lt;Req, Res&gt; UnwindSafe for MessageCodec&lt;Req, Res&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Res: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Req&gt; UnwindSafe for RequestEnvelope&lt;Req&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for P2PMdnsEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for P2PIdentifyInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for P2PProtocolsHandlerUpgrErr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for P2PIdentifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for P2POutboundFailure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for P2PInboundFailure","synthetic":true,"types":[]},{"text":"impl&lt;Req, Res&gt; UnwindSafe for P2PReqResEvent&lt;Req, Res&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Res: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Req, Res&gt; UnwindSafe for P2PEvent&lt;Req, Res&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Res: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BehaviourError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BehaviourConfig","synthetic":true,"types":[]},{"text":"impl&lt;Req, Res&gt; !UnwindSafe for P2PNetworkBehaviour&lt;Req, Res&gt;","synthetic":true,"types":[]}];
implementors["stronghold_utils"] = [{"text":"impl&lt;Msg&gt; UnwindSafe for AskActor&lt;Msg&gt;","synthetic":true,"types":[]}];
implementors["vault"] = [{"text":"impl UnwindSafe for Base64","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Key&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransactionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UntypedTransaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataTransaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RevocationTransaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitTransaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SealedTransaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SealedBlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordHint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Val","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChainId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransactionId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlobId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Chain","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordId","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for DBView&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for DBReader&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreparedRead","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for DBWriter&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()