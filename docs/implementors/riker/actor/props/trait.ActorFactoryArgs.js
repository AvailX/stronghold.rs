(function() {var implementors = {};
implementors["communication"] = [{"text":"impl&lt;Req, Res, ClientMsg, P&gt; ActorFactoryArgs&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a><a class=\"enum\" href=\"communication/libp2p/enum.Keypair.html\" title=\"enum communication::libp2p::Keypair\">Keypair</a>, <a class=\"struct\" href=\"communication/actor/struct.CommunicationActorConfig.html\" title=\"struct communication::actor::CommunicationActorConfig\">CommunicationActorConfig</a>&lt;ClientMsg&gt;, <a class=\"struct\" href=\"communication/behaviour/struct.BehaviourConfig.html\" title=\"struct communication::behaviour::BehaviourConfig\">BehaviourConfig</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>&gt; for <a class=\"struct\" href=\"communication/actor/struct.CommunicationActor.html\" title=\"struct communication::actor::CommunicationActor\">CommunicationActor</a>&lt;Req, Res, ClientMsg, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: <a class=\"trait\" href=\"communication/behaviour/protocol/trait.MessageEvent.html\" title=\"trait communication::behaviour::protocol::MessageEvent\">MessageEvent</a> + <a class=\"trait\" href=\"communication/actor/firewall/trait.ToPermissionVariants.html\" title=\"trait communication::actor::firewall::ToPermissionVariants\">ToPermissionVariants</a>&lt;P&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;ClientMsg&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Res: <a class=\"trait\" href=\"communication/behaviour/protocol/trait.MessageEvent.html\" title=\"trait communication::behaviour::protocol::MessageEvent\">MessageEvent</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;ClientMsg: Message,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Message + <a class=\"trait\" href=\"communication/actor/firewall/trait.VariantPermission.html\" title=\"trait communication::actor::firewall::VariantPermission\">VariantPermission</a>,&nbsp;</span>","synthetic":false,"types":["communication::actor::CommunicationActor"]}];
implementors["iota_stronghold"] = [{"text":"impl ActorFactoryArgs&lt;<a class=\"struct\" href=\"vault/types/utils/struct.ClientId.html\" title=\"struct vault::types::utils::ClientId\">ClientId</a>&gt; for <a class=\"struct\" href=\"iota_stronghold/state/client/struct.Client.html\" title=\"struct iota_stronghold::state::client::Client\">Client</a>","synthetic":false,"types":["iota_stronghold::state::client::Client"]},{"text":"impl ActorFactoryArgs&lt;<a class=\"struct\" href=\"vault/types/utils/struct.ClientId.html\" title=\"struct vault::types::utils::ClientId\">ClientId</a>&gt; for <a class=\"struct\" href=\"iota_stronghold/actors/internal/struct.InternalActor.html\" title=\"struct iota_stronghold::actors::internal::InternalActor\">InternalActor</a>&lt;<a class=\"struct\" href=\"iota_stronghold/internals/provider/struct.Provider.html\" title=\"struct iota_stronghold::internals::provider::Provider\">Provider</a>&gt;","synthetic":false,"types":["iota_stronghold::actors::internal::InternalActor"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()