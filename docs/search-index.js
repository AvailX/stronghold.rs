var searchIndex = JSON.parse('{\
"communication":{"doc":"Stronghold CommunicationThis crate enables strongholds on …","i":[[0,"actor","communication","ActorThis module provides a riker actor that handles the …",null,null],[0,"connections","communication::actor","",null,null],[3,"ConnectionManager","communication::actor::connections","",null,null],[12,"map","","",0,null],[11,"new","","",0,[[]]],[11,"current_connections","","",0,[[],["vec",3]]],[11,"insert","","",0,[[["relaydirection",4],["peerid",3],["connectedpoint",4],["option",4]]]],[11,"remove_connection","","",0,[[["peerid",3]]]],[0,"firewall","communication::actor","",null,null],[24,"RequestPermissions","communication::actor::firewall","Implements the [<code>VariantPermission</code>] for struct/ unions …",null,null],[3,"PermissionValue","","The permission value for request variants. It is a  bit …",null,null],[12,"0","","",1,null],[11,"new","","Create a new permission value for an index, the value …",1,[[["u8",15]],["option",4]]],[11,"value","","",1,[[],["u32",15]]],[3,"FirewallPermission","","The sum of allowed permissions. This is using the same …",null,null],[12,"0","","",2,null],[11,"none","","No values are allowed.",2,[[]]],[11,"all","","All values are allowed.",2,[[]]],[11,"add_permission","","Adds a new value to the sum and therefore allows this …",2,[[["permissionvalue",3]]]],[11,"add_permissions","","Adds a new value to the sum and therefore allows this …",2,[[]]],[11,"remove_permission","","Remove a certain value from the sum to remove permission.",2,[[["permissionvalue",3]]]],[11,"remove_permissions","","Remove a certain value from the sum to remove permission.",2,[[]]],[11,"permits","","Check if the sum includes this value i.g. if a certain …",2,[[["permissionvalue",3]],["bool",15]]],[11,"value","","",2,[[],["u32",15]]],[8,"VariantPermission","","The permission value for the different variants of an …",null,null],[10,"permission","","",3,[[],["permissionvalue",3]]],[8,"ToPermissionVariants","","Convert an element to implement permissions.",null,null],[10,"to_permissioned","","",4,[[]]],[4,"RequestDirection","","The direction of a [<code>CommunicationRequest::RequestMsg</code>] …",null,null],[13,"In","","Incoming request from a remote peer to the local system.",5,null],[13,"Out","","Outgoing request from the local system to a remote peer.",5,null],[4,"FirewallRule","","Configure the firewall.",null,null],[13,"SetRules","","Set new rules either for specific peers, or the default …",6,null],[12,"direction","communication::actor::firewall::FirewallRule","",7,null],[12,"peers","","",7,null],[12,"set_default","","",7,null],[12,"permission","","",7,null],[13,"AddPermissions","communication::actor::firewall","Add specific permissions for certain peers and optionally …",6,null],[12,"direction","communication::actor::firewall::FirewallRule","",8,null],[12,"peers","","",8,null],[12,"change_default","","",8,null],[12,"permissions","","",8,null],[13,"RemovePermissions","communication::actor::firewall","Remove specific permissions from certain peers and …",6,null],[12,"direction","communication::actor::firewall::FirewallRule","",9,null],[12,"peers","","",9,null],[12,"change_default","","",9,null],[12,"permissions","","",9,null],[13,"RemoveRule","communication::actor::firewall","Remove a rule for a specific peer, which results in using …",6,null],[12,"peers","communication::actor::firewall::FirewallRule","",10,null],[12,"direction","","",10,null],[3,"FirewallConfiguration","communication::actor::firewall","",null,null],[12,"default_in","","",11,null],[12,"default_out","","",11,null],[12,"rules_in","","",11,null],[12,"rules_out","","",11,null],[11,"new","","",11,[[["firewallpermission",3]],["firewallconfiguration",3]]],[11,"get_default","","",11,[[["requestdirection",4]],["firewallpermission",3]]],[11,"set_default","","",11,[[["requestdirection",4],["firewallpermission",3]]]],[11,"has_rule","","",11,[[["peerid",3],["requestdirection",4]],["bool",15]]],[11,"get_rule","","",11,[[["peerid",3],["requestdirection",4]],[["option",4],["firewallpermission",3]]]],[11,"set_rule","","",11,[[["requestdirection",4],["firewallpermission",3],["peerid",3]]]],[11,"remove_rule","","",11,[[["peerid",3],["requestdirection",4]]]],[11,"is_permitted","","",11,[[["peerid",3],["requestdirection",4]],["bool",15]]],[0,"swarm_task","communication::actor","",null,null],[6,"HandleErr","communication::actor::swarm_task","",null,null],[6,"P2PSwarmEvent","","",null,null],[3,"SwarmTask","","",null,null],[12,"system","","",12,null],[12,"client","","",12,null],[12,"firewall","","",12,null],[12,"swarm","","",12,null],[12,"swarm_rx","","",12,null],[12,"listener","","",12,null],[12,"dialing_relays","","",12,null],[12,"listening_relays","","",12,null],[12,"relay_addr","","",12,null],[12,"connection_manager","","",12,null],[12,"_marker","","",12,null],[11,"new","","",12,[[["actorsystem",3],["keypair",4],["communicationactorconfig",3],["behaviourconfig",3],["unboundedreceiver",3]]]],[11,"poll_swarm","","",12,[[]]],[11,"shutdown","","",12,[[]]],[11,"send_response","","",12,[[["sender",6],["communicationresults",4]]]],[11,"await_event","","",12,[[["duration",3],["fn",8]],["option",4]]],[11,"start_listening","","",12,[[["multiaddr",3],["option",4]],["result",4]]],[11,"stop_listening","","",12,[[["multiaddr",3],["listenerid",3]],["result",4]]],[11,"await_connect_result","","",12,[[["peerid",3],["option",4]],[["connectpeererror",4],["result",4],["connectedpoint",4]]]],[11,"connect_peer_via_addr","","",12,[[["peerid",3],["multiaddr",3]],[["connectpeererror",4],["result",4],["connectedpoint",4]]]],[11,"connect_peer","","",12,[[["peerid",3]],[["connectpeererror",4],["result",4],["connectedpoint",4]]]],[11,"add_peer","","",12,[[["multiaddr",3],["relaydirection",4],["peerid",3],["option",4],["option",4]],[["connectpeererror",4],["result",4],["peerid",3]]]],[11,"send_request","","",12,[[["peerid",3]],[["result",4],["requestmessageerror",4]]]],[11,"add_listener_relay","","",12,[[["peerid",3]],[["connectpeererror",4],["result",4],["peerid",3]]]],[11,"set_relay","","",12,[[["relaydirection",4],["peerid",3]],[["connectpeererror",4],["result",4],["peerid",3]]]],[11,"remove_relay","","",12,[[["peerid",3]]]],[11,"update_firewall_rule","","",12,[[["vec",3],["vec",3],["peerid",3],["permissionvalue",3],["requestdirection",4],["bool",15]]]],[11,"configure_firewall","","",12,[[["firewallrule",4]]]],[11,"handle_actor_request","","",12,[[["sender",6],["communicationrequest",4]]]],[11,"ask_client","","",12,[[],["option",4]]],[11,"handle_incoming_request","","",12,[[["requestid",3],["peerid",3]]]],[11,"handle_swarm_event","","",12,[[["p2pevent",4],["swarmevent",4]]]],[0,"types","communication::actor","",null,null],[4,"RelayDirection","communication::actor::types","Direction for which a relay peer is used.",null,null],[13,"Dialing","","Use the relay if a peer can not be dialed directly.",13,null],[13,"Listening","","Maintain a keep-alive connection to a relay peer that …",13,null],[13,"Both","","Use the peer for Dialing and Listening.",13,null],[4,"CommunicationRequest","","Requests for the [<code>CommunicationActor</code>].",null,null],[13,"RequestMsg","","Send a request to a remote peer. This requires that a …",14,null],[12,"peer_id","communication::actor::types::CommunicationRequest","",15,null],[12,"request","","",15,null],[13,"SetClientRef","communication::actor::types","Set the actor reference that incoming request are …",14,null],[13,"AddPeer","","Add dialing information for a peer. This will attempt to …",14,null],[12,"peer_id","communication::actor::types::CommunicationRequest","",16,null],[12,"addr","","",16,null],[12,"is_relay","","",16,null],[13,"GetSwarmInfo","communication::actor::types","Get information about the swarm with local peer id, …",14,null],[13,"BanPeer","","Ban a peer, which prevents any communication from / to …",14,null],[13,"UnbanPeer","","Unban a peer to allow future communication.",14,null],[13,"StartListening","","Start listening to a port on the swarm. If no <code>Multiaddr</code> …",14,null],[13,"RemoveListener","","Stop listening locally to the swarm. Without a listener, …",14,null],[13,"ConfigRelay","","Configure to use a peer as relay for dialing, listening, …",14,null],[12,"peer_id","communication::actor::types::CommunicationRequest","",17,null],[12,"direction","","",17,null],[13,"RemoveRelay","communication::actor::types","Stop using the peer as relay.",14,null],[13,"ConfigureFirewall","","Add or remove a rule of the firewall. If a rule for a …",14,null],[13,"Shutdown","","Shutdown communication actor.",14,null],[4,"RequestMessageError","","",null,null],[13,"Outbound","","Possible failures occurring in the context of sending an …",18,null],[13,"Inbound","","Possible failures occurring in the context of receiving …",18,null],[13,"LocalFirewallRejected","","The request was rejected by the local firewall.",18,null],[3,"EstablishedConnection","","Information about the connection with a remote peer as …",null,null],[12,"start","","",19,null],[12,"connected_point","","",19,null],[12,"is_relay","","",19,null],[11,"new","","",19,[[["connectedpoint",4],["relaydirection",4],["option",4]]]],[4,"CommunicationResults","","Returned results from the [<code>CommunicationActor</code>]",null,null],[13,"RequestMsgResult","","Response or Error for an [<code>RequestMsg</code>] to a remote peer",20,null],[13,"SetClientRefAck","","New client actor reference was set.",20,null],[13,"AddPeerResult","","Result of trying to connect a peer after adding it.",20,null],[13,"CheckConnectionResult","","Check if the connection exists.",20,null],[12,"peer_id","communication::actor::types::CommunicationResults","",21,null],[12,"is_connected","","",21,null],[13,"SwarmInfo","communication::actor::types","Information about the local swarm.",20,null],[12,"peer_id","communication::actor::types::CommunicationResults","The local peer id.",22,null],[12,"listeners","","The listening addresses of the local system. Not all of …",22,null],[12,"connections","","Established connections.",22,null],[13,"BannedPeerAck","communication::actor::types","",20,null],[13,"UnbannedPeerAck","","",20,null],[13,"StartListeningResult","","Result of starting a new listener on the swarm. If it was …",20,null],[13,"RemoveListenerAck","","Stopped listening to the swarm for incoming connections.",20,null],[13,"ConfigRelayResult","","Result for configuring the Relay. Error if the relay …",20,null],[13,"RemoveRelayAck","","Successfully removed relay.",20,null],[13,"ConfigureFirewallAck","","Successfully set firewall rule.",20,null],[4,"ConnectPeerError","","Errors that can occur in the context of a pending …",null,null],[13,"Banned","","The peer is currently banned.",23,null],[13,"NoAddresses","","No addresses for the peer to dial",23,null],[13,"Transport","","An error occurred while negotiating the transport …",23,null],[13,"InvalidPeerId","","The peer identity obtained on the connection did not …",23,null],[13,"ConnectionLimit","","The connection was dropped because the connection limit …",23,null],[13,"Io","","An I/O error occurred on the connection.",23,null],[13,"Handler","","The connection handler produced an error.",23,null],[13,"Timeout","","Timout on connection attempt",23,null],[13,"InvalidAddress","","The address given for dialing is invalid.",23,null],[3,"FirewallPermission","communication::actor","The sum of allowed permissions. This is using the same …",null,null],[12,"0","","",2,null],[4,"FirewallRule","","Configure the firewall.",null,null],[13,"SetRules","","Set new rules either for specific peers, or the default …",6,null],[12,"direction","communication::actor::FirewallRule","",7,null],[12,"peers","","",7,null],[12,"set_default","","",7,null],[12,"permission","","",7,null],[13,"AddPermissions","communication::actor","Add specific permissions for certain peers and optionally …",6,null],[12,"direction","communication::actor::FirewallRule","",8,null],[12,"peers","","",8,null],[12,"change_default","","",8,null],[12,"permissions","","",8,null],[13,"RemovePermissions","communication::actor","Remove specific permissions from certain peers and …",6,null],[12,"direction","communication::actor::FirewallRule","",9,null],[12,"peers","","",9,null],[12,"change_default","","",9,null],[12,"permissions","","",9,null],[13,"RemoveRule","communication::actor","Remove a rule for a specific peer, which results in using …",6,null],[12,"peers","communication::actor::FirewallRule","",10,null],[12,"direction","","",10,null],[3,"PermissionValue","communication::actor","The permission value for request variants. It is a  bit …",null,null],[12,"0","","",1,null],[4,"RequestDirection","","The direction of a [<code>CommunicationRequest::RequestMsg</code>] …",null,null],[13,"In","","Incoming request from a remote peer to the local system.",5,null],[13,"Out","","Outgoing request from the local system to a remote peer.",5,null],[24,"RequestPermissions","","Implements the [<code>VariantPermission</code>] for struct/ unions …",null,null],[8,"ToPermissionVariants","","Convert an element to implement permissions.",null,null],[10,"to_permissioned","","",4,[[]]],[8,"VariantPermission","","The permission value for the different variants of an …",null,null],[10,"permission","","",3,[[],["permissionvalue",3]]],[4,"RelayDirection","","Direction for which a relay peer is used.",null,null],[13,"Dialing","","Use the relay if a peer can not be dialed directly.",13,null],[13,"Listening","","Maintain a keep-alive connection to a relay peer that …",13,null],[13,"Both","","Use the peer for Dialing and Listening.",13,null],[4,"CommunicationRequest","","Requests for the [<code>CommunicationActor</code>].",null,null],[13,"RequestMsg","","Send a request to a remote peer. This requires that a …",14,null],[12,"peer_id","communication::actor::CommunicationRequest","",15,null],[12,"request","","",15,null],[13,"SetClientRef","communication::actor","Set the actor reference that incoming request are …",14,null],[13,"AddPeer","","Add dialing information for a peer. This will attempt to …",14,null],[12,"peer_id","communication::actor::CommunicationRequest","",16,null],[12,"addr","","",16,null],[12,"is_relay","","",16,null],[13,"GetSwarmInfo","communication::actor","Get information about the swarm with local peer id, …",14,null],[13,"BanPeer","","Ban a peer, which prevents any communication from / to …",14,null],[13,"UnbanPeer","","Unban a peer to allow future communication.",14,null],[13,"StartListening","","Start listening to a port on the swarm. If no <code>Multiaddr</code> …",14,null],[13,"RemoveListener","","Stop listening locally to the swarm. Without a listener, …",14,null],[13,"ConfigRelay","","Configure to use a peer as relay for dialing, listening, …",14,null],[12,"peer_id","communication::actor::CommunicationRequest","",17,null],[12,"direction","","",17,null],[13,"RemoveRelay","communication::actor","Stop using the peer as relay.",14,null],[13,"ConfigureFirewall","","Add or remove a rule of the firewall. If a rule for a …",14,null],[13,"Shutdown","","Shutdown communication actor.",14,null],[4,"RequestMessageError","","",null,null],[13,"Outbound","","Possible failures occurring in the context of sending an …",18,null],[13,"Inbound","","Possible failures occurring in the context of receiving …",18,null],[13,"LocalFirewallRejected","","The request was rejected by the local firewall.",18,null],[3,"EstablishedConnection","","Information about the connection with a remote peer as …",null,null],[12,"start","","",19,null],[12,"connected_point","","",19,null],[12,"is_relay","","",19,null],[4,"CommunicationResults","","Returned results from the [<code>CommunicationActor</code>]",null,null],[13,"RequestMsgResult","","Response or Error for an [<code>RequestMsg</code>] to a remote peer",20,null],[13,"SetClientRefAck","","New client actor reference was set.",20,null],[13,"AddPeerResult","","Result of trying to connect a peer after adding it.",20,null],[13,"CheckConnectionResult","","Check if the connection exists.",20,null],[12,"peer_id","communication::actor::CommunicationResults","",21,null],[12,"is_connected","","",21,null],[13,"SwarmInfo","communication::actor","Information about the local swarm.",20,null],[12,"peer_id","communication::actor::CommunicationResults","The local peer id.",22,null],[12,"listeners","","The listening addresses of the local system. Not all of …",22,null],[12,"connections","","Established connections.",22,null],[13,"BannedPeerAck","communication::actor","",20,null],[13,"UnbannedPeerAck","","",20,null],[13,"StartListeningResult","","Result of starting a new listener on the swarm. If it was …",20,null],[13,"RemoveListenerAck","","Stopped listening to the swarm for incoming connections.",20,null],[13,"ConfigRelayResult","","Result for configuring the Relay. Error if the relay …",20,null],[13,"RemoveRelayAck","","Successfully removed relay.",20,null],[13,"ConfigureFirewallAck","","Successfully set firewall rule.",20,null],[4,"ConnectPeerError","","Errors that can occur in the context of a pending …",null,null],[13,"Banned","","The peer is currently banned.",23,null],[13,"NoAddresses","","No addresses for the peer to dial",23,null],[13,"Transport","","An error occurred while negotiating the transport …",23,null],[13,"InvalidPeerId","","The peer identity obtained on the connection did not …",23,null],[13,"ConnectionLimit","","The connection was dropped because the connection limit …",23,null],[13,"Io","","An I/O error occurred on the connection.",23,null],[13,"Handler","","The connection handler produced an error.",23,null],[13,"Timeout","","Timout on connection attempt",23,null],[13,"InvalidAddress","","The address given for dialing is invalid.",23,null],[3,"CommunicationActorConfig","","The actor configuration",null,null],[12,"client","","Target client for incoming request",24,null],[12,"firewall_default_in","","Default restriction for incoming requests.",24,null],[12,"firewall_default_out","","Default restriction for outgoing requests.",24,null],[3,"CommunicationActor","","Actor responsible for creating a [<code>P2PNetworkBehaviour</code>] …",null,null],[12,"swarm_tx","","",25,null],[12,"swarm_task_config","","",25,null],[12,"poll_swarm_handle","","",25,null],[12,"_marker","","",25,null],[11,"send_swarm_task","","",25,[[["sender",6],["communicationrequest",4]],[["result",4],["senderror",3]]]],[0,"behaviour","communication","P2PNetworkBehaviourThis module implements the […",null,null],[0,"protocol","communication::behaviour","",null,null],[8,"MessageEvent","communication::behaviour::protocol","Trait for the generic Request and Response types",null,null],[3,"MessageProtocol","","Custom protocol that extends libp2ps …",null,null],[3,"MessageCodec","","Describes how messages are read from and written to the …",null,null],[12,"p","","",26,null],[12,"q","","",26,null],[0,"types","communication::behaviour","",null,null],[4,"P2PMdnsEvent","communication::behaviour::types","Event that can be produced by the <code>Mdns</code> behaviour.",null,null],[13,"Discovered","","Discovered nodes through mDNS.",27,null],[13,"Expired","","Each discovered record has a time-to-live. When this TTL …",27,null],[3,"P2PIdentifyInfo","","Information of a peer sent in <code>Identify</code> protocol responses.",null,null],[12,"public_key","","The public key underlying the peer\'s <code>PeerId</code>.",28,null],[12,"protocol_version","","Version of the protocol family used by the peer, e.g. …",28,null],[12,"agent_version","","Name and version of the peer, similar to the <code>User-Agent</code> …",28,null],[12,"listen_addrs","","The addresses that the peer is listening on.",28,null],[12,"protocols","","The list of protocols supported by the peer, e.g. …",28,null],[12,"observed_addr","","The address observed by the peer for the local node.",28,null],[4,"P2PProtocolsHandlerUpgrErr","","Error that can happen on an outbound substream opening …",null,null],[13,"Timeout","","The opening attempt timed out before the negotiation was …",29,null],[13,"Timer","","There was an error in the timer used.",29,null],[13,"Upgrade","","Error while upgrading the substream to the protocol we …",29,null],[4,"P2PIdentifyEvent","","Event emitted  by the <code>Identify</code> behaviour.",null,null],[13,"Received","","Identifying information has been received from a peer.",30,null],[12,"peer_id","communication::behaviour::types::P2PIdentifyEvent","",31,null],[12,"info","","",31,null],[13,"Sent","communication::behaviour::types","Identifying information of the local node has been sent …",30,null],[12,"peer_id","communication::behaviour::types::P2PIdentifyEvent","",32,null],[13,"Pushed","communication::behaviour::types","Identification information of the local node has been …",30,null],[12,"peer_id","communication::behaviour::types::P2PIdentifyEvent","The peer that the information has been sent to.",33,null],[13,"Error","communication::behaviour::types","Error while attempting to identify the remote.",30,null],[12,"peer_id","communication::behaviour::types::P2PIdentifyEvent","",34,null],[12,"error","","",34,null],[4,"P2POutboundFailure","communication::behaviour::types","Possible failures occurring in the context of sending an …",null,null],[13,"DialFailure","","The request could not be sent because a dialing attempt …",35,null],[13,"Timeout","","The request timed out before a response was received.",35,null],[13,"ConnectionClosed","","The connection closed before a response was received.",35,null],[13,"UnsupportedProtocols","","The remote supports none of the requested protocols.",35,null],[4,"P2PInboundFailure","","Possible failures occurring in the context of receiving an…",null,null],[13,"Timeout","","The inbound request timed out, either while reading the …",36,null],[13,"UnsupportedProtocols","","The local peer supports none of the requested protocols.",36,null],[13,"ResponseOmission","","The local peer failed to respond to an inbound request …",36,null],[13,"ConnectionClosed","","The connection closed before a response could be send.",36,null],[4,"P2PReqResEvent","","Event emitted  by the <code>RequestResponse</code> behaviour.",null,null],[13,"Req","","Request Message",37,null],[12,"peer_id","communication::behaviour::types::P2PReqResEvent","",38,null],[12,"request_id","","",38,null],[12,"request","","",38,null],[13,"Res","communication::behaviour::types","Response Message to a received <code>Req</code>.",37,null],[12,"peer_id","communication::behaviour::types::P2PReqResEvent","",39,null],[12,"request_id","","",39,null],[12,"response","","",39,null],[13,"InboundFailure","communication::behaviour::types","",37,null],[12,"peer_id","communication::behaviour::types::P2PReqResEvent","",40,null],[12,"request_id","","",40,null],[12,"error","","",40,null],[13,"OutboundFailure","communication::behaviour::types","",37,null],[12,"peer_id","communication::behaviour::types::P2PReqResEvent","",41,null],[12,"request_id","","",41,null],[12,"error","","",41,null],[13,"ResSent","communication::behaviour::types","A response to an inbound request has been sent.",37,null],[12,"peer_id","communication::behaviour::types::P2PReqResEvent","",42,null],[12,"request_id","","",42,null],[4,"P2PEvent","communication::behaviour::types","Event that was emitted by one of the protocols of the …",null,null],[13,"Mdns","","Events from the libp2p mDNS protocol",43,null],[13,"Identify","","Events from the libp2p identify protocol",43,null],[13,"RequestResponse","","Events from the custom request-response protocol",43,null],[8,"MessageEvent","communication::behaviour","Trait for the generic Request and Response types",null,null],[4,"P2PMdnsEvent","","Event that can be produced by the <code>Mdns</code> behaviour.",null,null],[13,"Discovered","","Discovered nodes through mDNS.",27,null],[13,"Expired","","Each discovered record has a time-to-live. When this TTL …",27,null],[3,"P2PIdentifyInfo","","Information of a peer sent in <code>Identify</code> protocol responses.",null,null],[12,"public_key","","The public key underlying the peer\'s <code>PeerId</code>.",28,null],[12,"protocol_version","","Version of the protocol family used by the peer, e.g. …",28,null],[12,"agent_version","","Name and version of the peer, similar to the <code>User-Agent</code> …",28,null],[12,"listen_addrs","","The addresses that the peer is listening on.",28,null],[12,"protocols","","The list of protocols supported by the peer, e.g. …",28,null],[12,"observed_addr","","The address observed by the peer for the local node.",28,null],[4,"P2PProtocolsHandlerUpgrErr","","Error that can happen on an outbound substream opening …",null,null],[13,"Timeout","","The opening attempt timed out before the negotiation was …",29,null],[13,"Timer","","There was an error in the timer used.",29,null],[13,"Upgrade","","Error while upgrading the substream to the protocol we …",29,null],[4,"P2PIdentifyEvent","","Event emitted  by the <code>Identify</code> behaviour.",null,null],[13,"Received","","Identifying information has been received from a peer.",30,null],[12,"peer_id","communication::behaviour::P2PIdentifyEvent","",31,null],[12,"info","","",31,null],[13,"Sent","communication::behaviour","Identifying information of the local node has been sent …",30,null],[12,"peer_id","communication::behaviour::P2PIdentifyEvent","",32,null],[13,"Pushed","communication::behaviour","Identification information of the local node has been …",30,null],[12,"peer_id","communication::behaviour::P2PIdentifyEvent","The peer that the information has been sent to.",33,null],[13,"Error","communication::behaviour","Error while attempting to identify the remote.",30,null],[12,"peer_id","communication::behaviour::P2PIdentifyEvent","",34,null],[12,"error","","",34,null],[4,"P2POutboundFailure","communication::behaviour","Possible failures occurring in the context of sending an …",null,null],[13,"DialFailure","","The request could not be sent because a dialing attempt …",35,null],[13,"Timeout","","The request timed out before a response was received.",35,null],[13,"ConnectionClosed","","The connection closed before a response was received.",35,null],[13,"UnsupportedProtocols","","The remote supports none of the requested protocols.",35,null],[4,"P2PInboundFailure","","Possible failures occurring in the context of receiving an…",null,null],[13,"Timeout","","The inbound request timed out, either while reading the …",36,null],[13,"UnsupportedProtocols","","The local peer supports none of the requested protocols.",36,null],[13,"ResponseOmission","","The local peer failed to respond to an inbound request …",36,null],[13,"ConnectionClosed","","The connection closed before a response could be send.",36,null],[4,"P2PReqResEvent","","Event emitted  by the <code>RequestResponse</code> behaviour.",null,null],[13,"Req","","Request Message",37,null],[12,"peer_id","communication::behaviour::P2PReqResEvent","",38,null],[12,"request_id","","",38,null],[12,"request","","",38,null],[13,"Res","communication::behaviour","Response Message to a received <code>Req</code>.",37,null],[12,"peer_id","communication::behaviour::P2PReqResEvent","",39,null],[12,"request_id","","",39,null],[12,"response","","",39,null],[13,"InboundFailure","communication::behaviour","",37,null],[12,"peer_id","communication::behaviour::P2PReqResEvent","",40,null],[12,"request_id","","",40,null],[12,"error","","",40,null],[13,"OutboundFailure","communication::behaviour","",37,null],[12,"peer_id","communication::behaviour::P2PReqResEvent","",41,null],[12,"request_id","","",41,null],[12,"error","","",41,null],[13,"ResSent","communication::behaviour","A response to an inbound request has been sent.",37,null],[12,"peer_id","communication::behaviour::P2PReqResEvent","",42,null],[12,"request_id","","",42,null],[4,"P2PEvent","communication::behaviour","Event that was emitted by one of the protocols of the …",null,null],[13,"Mdns","","Events from the libp2p mDNS protocol",43,null],[13,"Identify","","Events from the libp2p identify protocol",43,null],[13,"RequestResponse","","Events from the custom request-response protocol",43,null],[4,"BehaviourError","","Error upon creating a new [<code>P2PNetworkBehaviour</code>]",null,null],[13,"TransportError","","Error on the transport layer",44,null],[13,"NoiseAuthenticError","","Error on upgrading the transport with noise authentication",44,null],[13,"MdnsError","","Error creating new mDNS behaviour",44,null],[3,"BehaviourConfig","","Configuration for initiating the [<code>P2PNetworkBehaviour</code>].",null,null],[12,"timeout","","Timeout for outgoing requests until a […",45,null],[12,"keep_alive","","Duration to keep an idle connection alive when no Request …",45,null],[12,"mdns_ttl","","TTL to use for mDNS record",45,null],[12,"mdns_query_interval","","Frequency for new peers via mDNS",45,null],[11,"new","","",45,[[["duration",3],["option",4]]]],[3,"P2PNetworkBehaviour","","The [<code>P2PNetworkBehaviour</code>] determines the behaviour of the …",null,null],[12,"mdns","","",46,null],[12,"identify","","",46,null],[12,"msg_proto","","",46,null],[12,"relay","","",46,null],[12,"peers","","",46,null],[12,"events","","",46,null],[12,"response_channels","","",46,null],[11,"init_swarm","","Creates a new [<code>P2PNetworkBehaviour</code>] and returns the swarm …",46,[[["behaviourconfig",3],["keypair",4]]]],[11,"poll","","",46,[[["context",3]],[["poll",4],["networkbehaviouraction",4]]]],[11,"add_peer_addr","","",46,[[["multiaddr",3],["peerid",3]]]],[11,"remove_peer_addr","","",46,[[["peerid",3],["multiaddr",3]]]],[11,"remove_peer","","",46,[[["peerid",3]],[["vec",3],["option",4]]]],[11,"get_peer_addr","","",46,[[["peerid",3]],[["vec",3],["option",4]]]],[11,"get_all_peers","","",46,[[],[["vec",3],["peerid",3]]]],[11,"get_active_mdns_peers","","Get the peers discovered by mdns",46,[[],[["vec",3],["peerid",3]]]],[11,"send_request","","",46,[[["peerid",3]],["requestid",3]]],[11,"send_response","","",46,[[["requestid",3]],["result",4]]],[0,"libp2p","communication","Re-export [<code>libp2p</code>] types.",null,null],[3,"ConnectionLimit","communication::libp2p","Information about a connection limit.",null,null],[12,"limit","","The maximum number of connections.",47,null],[12,"current","","The current number of connections.",47,null],[4,"Keypair","","Identity keypair of a node.",null,null],[13,"Ed25519","","An Ed25519 keypair.",48,null],[13,"Rsa","","An RSA keypair.",48,null],[13,"Secp256k1","","A Secp256k1 keypair.",48,null],[4,"Protocol","","<code>Protocol</code> describes all possible multiaddress protocols.",null,null],[13,"Dccp","","",49,null],[13,"Dns","","",49,null],[13,"Dns4","","",49,null],[13,"Dns6","","",49,null],[13,"Dnsaddr","","",49,null],[13,"Http","","",49,null],[13,"Https","","",49,null],[13,"Ip4","","",49,null],[13,"Ip6","","",49,null],[13,"P2pWebRtcDirect","","",49,null],[13,"P2pWebRtcStar","","",49,null],[13,"P2pWebSocketStar","","",49,null],[13,"Memory","","Contains the \\\"port\\\" to contact. Similar to TCP or UDP, 0 …",49,null],[13,"Onion","","",49,null],[13,"Onion3","","",49,null],[13,"P2p","","",49,null],[13,"P2pCircuit","","",49,null],[13,"Quic","","",49,null],[13,"Sctp","","",49,null],[13,"Tcp","","",49,null],[13,"Udp","","",49,null],[13,"Udt","","",49,null],[13,"Unix","","",49,null],[13,"Utp","","",49,null],[13,"Ws","","",49,null],[13,"Wss","","",49,null],[4,"ConnectedPoint","","The endpoint roles associated with a peer-to-peer …",null,null],[13,"Dialer","","We dialed the node.",50,null],[12,"address","communication::libp2p::ConnectedPoint","Multiaddress that was successfully dialed.",51,null],[13,"Listener","communication::libp2p","We received the node.",50,null],[12,"local_addr","communication::libp2p::ConnectedPoint","Local connection address.",52,null],[12,"send_back_addr","","Stack of protocols used to send back data to the remote.",52,null],[3,"Multiaddr","communication::libp2p","Representation of a Multiaddr.",null,null],[12,"bytes","","",53,null],[3,"PeerId","","Identifier of a peer of the network.",null,null],[12,"multihash","","",54,null],[6,"Swarm","","Contains the state of the network, plus the way it should …",null,null],[4,"SwarmEvent","","Event generated by the <code>Swarm</code>.",null,null],[13,"Behaviour","","Event generated by the <code>NetworkBehaviour</code>.",55,null],[13,"ConnectionEstablished","","A connection to the given peer has been opened.",55,null],[12,"peer_id","communication::libp2p::SwarmEvent","Identity of the peer that we have connected to.",56,null],[12,"endpoint","","Endpoint of the connection that has been opened.",56,null],[12,"num_established","","Number of established connections to this peer, including …",56,null],[13,"ConnectionClosed","communication::libp2p","A connection with the given peer has been closed, …",55,null],[12,"peer_id","communication::libp2p::SwarmEvent","Identity of the peer that we have connected to.",57,null],[12,"endpoint","","Endpoint of the connection that has been closed.",57,null],[12,"num_established","","Number of other remaining connections to this same peer.",57,null],[12,"cause","","Reason for the disconnection, if it was not a successful …",57,null],[13,"IncomingConnection","communication::libp2p","A new connection arrived on a listener and is in the …",55,null],[12,"local_addr","communication::libp2p::SwarmEvent","Local connection address. This address has been earlier …",58,null],[12,"send_back_addr","","Address used to send back data to the remote.",58,null],[13,"IncomingConnectionError","communication::libp2p","An error happened on a connection during its initial …",55,null],[12,"local_addr","communication::libp2p::SwarmEvent","Local connection address. This address has been earlier …",59,null],[12,"send_back_addr","","Address used to send back data to the remote.",59,null],[12,"error","","The error that happened.",59,null],[13,"BannedPeer","communication::libp2p","We connected to a peer, but we immediately closed the …",55,null],[12,"peer_id","communication::libp2p::SwarmEvent","Identity of the banned peer.",60,null],[12,"endpoint","","Endpoint of the connection that has been closed.",60,null],[13,"UnreachableAddr","communication::libp2p","Tried to dial an address but it ended up being …",55,null],[12,"peer_id","communication::libp2p::SwarmEvent","<code>PeerId</code> that we were trying to reach.",61,null],[12,"address","","Address that we failed to reach.",61,null],[12,"error","","Error that has been encountered.",61,null],[12,"attempts_remaining","","Number of remaining connection attempts that are being …",61,null],[13,"UnknownPeerUnreachableAddr","communication::libp2p","Tried to dial an address but it ended up being …",55,null],[12,"address","communication::libp2p::SwarmEvent","Address that we failed to reach.",62,null],[12,"error","","Error that has been encountered.",62,null],[13,"NewListenAddr","communication::libp2p","One of our listeners has reported a new local listening …",55,null],[13,"ExpiredListenAddr","","One of our listeners has reported the expiration of a …",55,null],[13,"ListenerClosed","","One of the listeners gracefully closed.",55,null],[12,"addresses","communication::libp2p::SwarmEvent","The addresses that the listener was listening on. These …",63,null],[12,"reason","","Reason for the closure. Contains <code>Ok(())</code> if the stream …",63,null],[13,"ListenerError","communication::libp2p","One of the listeners reported a non-fatal error.",55,null],[12,"error","communication::libp2p::SwarmEvent","The listener error.",64,null],[13,"Dialing","communication::libp2p","A new dialing attempt has been initiated.",55,null],[11,"from","communication::actor::connections","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","communication::actor::firewall","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","communication::actor::swarm_task","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","communication::actor::types","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","communication::actor","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","communication::behaviour::protocol","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","communication::behaviour::types","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","communication::behaviour","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_string","","",44,[[],["string",3]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","communication::libp2p","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"to_string","","",47,[[],["string",3]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"to_string","","",49,[[],["string",3]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"equivalent","","",49,[[],["bool",15]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"get_hash","","",50,[[],["u64",15]]],[11,"equivalent","","",50,[[],["bool",15]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"to_string","","",53,[[],["string",3]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"protocol_name","","",53,[[]]],[11,"vzip","","",53,[[]]],[11,"get_hash","","",53,[[],["u64",15]]],[11,"equivalent","","",53,[[],["bool",15]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"to_string","","",54,[[],["string",3]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"get_hash","","",54,[[],["u64",15]]],[11,"equivalent","","",54,[[],["bool",15]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"try_from","","",53,[[["str",15]],[["error",4],["multiaddr",3],["result",4]]]],[11,"try_from","","",53,[[["vec",3],["global",3],["u8",15]],[["error",4],["multiaddr",3],["result",4]]]],[11,"try_from","","",53,[[["string",3]],[["error",4],["multiaddr",3],["result",4]]]],[11,"fmt","","",53,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"deserialize","","",53,[[],[["result",4],["multiaddr",3]]]],[11,"serialize","","",53,[[],["result",4]]],[11,"fmt","","Convert a Multiaddr to a string",53,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",53,[[]]],[11,"partial_cmp","","",53,[[["multiaddr",3]],[["option",4],["ordering",4]]]],[11,"lt","","",53,[[["multiaddr",3]],["bool",15]]],[11,"le","","",53,[[["multiaddr",3]],["bool",15]]],[11,"gt","","",53,[[["multiaddr",3]],["bool",15]]],[11,"ge","","",53,[[["multiaddr",3]],["bool",15]]],[11,"from","","",49,[[["ipv4addr",3]],["protocol",4]]],[11,"from","","",49,[[["ipaddr",4]],["protocol",4]]],[11,"from","","",53,[[["ipv6addr",3]],["multiaddr",3]]],[11,"from","","",49,[[["ipv6addr",3]],["protocol",4]]],[11,"from","","",53,[[["ipv4addr",3]],["multiaddr",3]]],[11,"from","","",53,[[["ipaddr",4]],["multiaddr",3]]],[11,"from","","",53,[[["protocol",4]],["multiaddr",3]]],[11,"as_ref","","",53,[[]]],[11,"from_iter","","",53,[[],["multiaddr",3]]],[11,"clone","","",49,[[],["protocol",4]]],[11,"clone","","",53,[[],["multiaddr",3]]],[11,"cmp","","",53,[[["multiaddr",3]],["ordering",4]]],[11,"eq","","",53,[[["multiaddr",3]],["bool",15]]],[11,"ne","","",53,[[["multiaddr",3]],["bool",15]]],[11,"eq","","",49,[[["protocol",4]],["bool",15]]],[11,"ne","","",49,[[["protocol",4]],["bool",15]]],[11,"from_str","","",53,[[["str",15]],[["error",4],["multiaddr",3],["result",4]]]],[11,"try_from","","",54,[[["multihash",3],["uint",3]],[["result",4],["peerid",3]]]],[11,"try_from","","",54,[[["vec",3],["global",3],["u8",15]],[["result",4],["peerid",3]]]],[11,"fmt","","",54,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",47,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",50,[[]]],[11,"hash","","",54,[[]]],[11,"from","","",54,[[["publickey",4]],["peerid",3]]],[11,"clone","","",47,[[],["connectionlimit",3]]],[11,"clone","","",54,[[],["peerid",3]]],[11,"clone","","",48,[[],["keypair",4]]],[11,"clone","","",50,[[],["connectedpoint",4]]],[11,"from_str","","",54,[[["str",15]],[["peerid",3],["result",4]]]],[11,"eq","","",50,[[["connectedpoint",4]],["bool",15]]],[11,"ne","","",50,[[["connectedpoint",4]],["bool",15]]],[11,"eq","","",54,[[["peerid",3]],["bool",15]]],[11,"ne","","",54,[[["peerid",3]],["bool",15]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",47,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",54,[[["formatter",3]],[["error",3],["result",4]]]],[11,"partial_cmp","","",54,[[["peerid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",54,[[["peerid",3]],["bool",15]]],[11,"le","","",54,[[["peerid",3]],["bool",15]]],[11,"gt","","",54,[[["peerid",3]],["bool",15]]],[11,"ge","","",54,[[["peerid",3]],["bool",15]]],[11,"as_ref","","",54,[[],["multihash",3]]],[11,"cmp","","",54,[[["peerid",3]],["ordering",4]]],[11,"fmt","","",55,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","communication::actor::firewall","",2,[[["u32",15]]]],[11,"from","communication::actor::types","",23,[[["pendingconnectionerror",4]]]],[11,"from","","",23,[[["pendingconnectionerror",4]]]],[11,"from","","",23,[[["dialerror",4]]]],[11,"from","","",23,[[["connectionerror",4]]]],[11,"from","communication::behaviour::types","",43,[[["mdnsevent",4]],["p2pevent",4]]],[11,"from","","",43,[[["identifyevent",4]],["p2pevent",4]]],[11,"from","","",43,[[["requestresponseevent",4]],["p2pevent",4]]],[11,"clone","communication::actor::firewall","",1,[[],["permissionvalue",3]]],[11,"clone","","",2,[[],["firewallpermission",3]]],[11,"clone","","",5,[[],["requestdirection",4]]],[11,"clone","","",6,[[],["firewallrule",4]]],[11,"clone","","",11,[[],["firewallconfiguration",3]]],[11,"clone","communication::actor::types","",13,[[],["relaydirection",4]]],[11,"clone","","",14,[[],["communicationrequest",4]]],[11,"clone","","",18,[[],["requestmessageerror",4]]],[11,"clone","","",19,[[],["establishedconnection",3]]],[11,"clone","","",20,[[],["communicationresults",4]]],[11,"clone","","",23,[[],["connectpeererror",4]]],[11,"clone","communication::actor","",24,[[],["communicationactorconfig",3]]],[11,"clone","communication::behaviour::protocol","",65,[[],["messageprotocol",3]]],[11,"clone","","",26,[[],["messagecodec",3]]],[11,"clone","communication::behaviour::types","",27,[[],["p2pmdnsevent",4]]],[11,"clone","","",28,[[],["p2pidentifyinfo",3]]],[11,"clone","","",29,[[],["p2pprotocolshandlerupgrerr",4]]],[11,"clone","","",30,[[],["p2pidentifyevent",4]]],[11,"clone","","",35,[[],["p2poutboundfailure",4]]],[11,"clone","","",36,[[],["p2pinboundfailure",4]]],[11,"clone","","",37,[[],["p2preqresevent",4]]],[11,"clone","","",43,[[],["p2pevent",4]]],[11,"clone","communication::behaviour","",45,[[],["behaviourconfig",3]]],[11,"default","communication::actor::firewall","",11,[[]]],[11,"default","communication::behaviour::protocol","",26,[[]]],[11,"default","communication::behaviour","",45,[[]]],[11,"eq","communication::actor::firewall","",1,[[["permissionvalue",3]],["bool",15]]],[11,"ne","","",1,[[["permissionvalue",3]],["bool",15]]],[11,"eq","","",1,[[["u32",15]],["bool",15]]],[11,"eq","","",2,[[["firewallpermission",3]],["bool",15]]],[11,"ne","","",2,[[["firewallpermission",3]],["bool",15]]],[11,"eq","","",2,[[["u32",15]],["bool",15]]],[11,"eq","communication::behaviour::types","",27,[[["p2pmdnsevent",4]],["bool",15]]],[11,"ne","","",27,[[["p2pmdnsevent",4]],["bool",15]]],[11,"eq","","",28,[[["p2pidentifyinfo",3]],["bool",15]]],[11,"ne","","",28,[[["p2pidentifyinfo",3]],["bool",15]]],[11,"eq","","",29,[[["p2pprotocolshandlerupgrerr",4]],["bool",15]]],[11,"eq","","",30,[[["p2pidentifyevent",4]],["bool",15]]],[11,"ne","","",30,[[["p2pidentifyevent",4]],["bool",15]]],[11,"eq","","",35,[[["p2poutboundfailure",4]],["bool",15]]],[11,"eq","","",36,[[["p2pinboundfailure",4]],["bool",15]]],[11,"eq","","",37,[[["p2preqresevent",4]],["bool",15]]],[11,"ne","","",37,[[["p2preqresevent",4]],["bool",15]]],[11,"eq","","",43,[[["p2pevent",4]],["bool",15]]],[11,"ne","","",43,[[["p2pevent",4]],["bool",15]]],[11,"fmt","communication::actor::firewall","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","communication::actor::types","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","communication::actor","",24,[[["formatter",3]],["result",6]]],[11,"fmt","communication::behaviour::protocol","",65,[[["formatter",3]],["result",6]]],[11,"fmt","communication::behaviour::types","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","communication::behaviour","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"protocol_name","communication::behaviour::protocol","",65,[[]]],[11,"new_handler","communication::behaviour","",46,[[]]],[11,"addresses_of_peer","","",46,[[["peerid",3]],[["vec",3],["multiaddr",3]]]],[11,"inject_connected","","",46,[[["peerid",3]]]],[11,"inject_disconnected","","",46,[[["peerid",3]]]],[11,"inject_connection_established","","",46,[[["peerid",3],["connectionid",3],["connectedpoint",4]]]],[11,"inject_address_change","","",46,[[["peerid",3],["connectedpoint",4],["connectionid",3]]]],[11,"inject_connection_closed","","",46,[[["peerid",3],["connectionid",3],["connectedpoint",4]]]],[11,"inject_addr_reach_failure","","",46,[[["option",4],["peerid",3],["error",8],["multiaddr",3]]]],[11,"inject_dial_failure","","",46,[[["peerid",3]]]],[11,"inject_new_listener","","",46,[[["listenerid",3]]]],[11,"inject_new_listen_addr","","",46,[[["multiaddr",3],["listenerid",3]]]],[11,"inject_expired_listen_addr","","",46,[[["multiaddr",3],["listenerid",3]]]],[11,"inject_new_external_addr","","",46,[[["multiaddr",3]]]],[11,"inject_expired_external_addr","","",46,[[["multiaddr",3]]]],[11,"inject_listener_error","","",46,[[["error",8],["listenerid",3]]]],[11,"inject_listener_closed","","",46,[[["error",3],["listenerid",3],["result",4]]]],[11,"inject_event","","",46,[[["connectionid",3],["peerid",3]]]],[11,"poll","","",46,[[["context",3]],[["networkbehaviouraction",4],["poll",4]]]],[11,"inject_event","","",46,[[["mdnsevent",4]]]],[11,"inject_event","","",46,[[["requestresponseevent",4]]]],[11,"inject_event","","",46,[[["identifyevent",4]]]],[11,"inject_event","","",46,[[]]],[11,"read_request","communication::behaviour::protocol","",26,[[["messageprotocol",3]],[["pin",3],["box",3]]]],[11,"read_response","","",26,[[["messageprotocol",3]],[["box",3],["pin",3]]]],[11,"write_request","","",26,[[["messageprotocol",3]],[["pin",3],["box",3]]]],[11,"write_response","","",26,[[["messageprotocol",3]],[["pin",3],["box",3]]]],[11,"create_args","communication::actor","",25,[[]]],[11,"post_start","","",25,[[["context",3]]]],[11,"post_stop","","",25,[[]]],[11,"recv","","",25,[[["sender",6],["context",3]]]],[11,"generate_ed25519","communication::libp2p","Generate a new Ed25519 keypair.",48,[[],["keypair",4]]],[11,"generate_secp256k1","","Generate a new Secp256k1 keypair.",48,[[],["keypair",4]]],[11,"rsa_from_pkcs8","","Decode an keypair from a DER-encoded secret key in PKCS#8 …",48,[[],[["decodingerror",3],["keypair",4],["result",4]]]],[11,"secp256k1_from_der","","Decode a keypair from a DER-encoded Secp256k1 secret key …",48,[[],[["decodingerror",3],["keypair",4],["result",4]]]],[11,"sign","","Sign a message using the private key of this keypair, …",48,[[],[["vec",3],["signingerror",3],["result",4]]]],[11,"public","","Get the public key of this keypair.",48,[[],["publickey",4]]],[11,"from_str_parts","","Parse a protocol value from the given iterator of string …",49,[[],[["protocol",4],["error",4],["result",4]]]],[11,"from_bytes","","Parse a single <code>Protocol</code> value from its byte slice …",49,[[],[["error",4],["result",4]]]],[11,"write_bytes","","Encode this protocol by writing its binary representation …",49,[[],[["error",4],["result",4]]]],[11,"acquire","","Turn this <code>Protocol</code> into one that owns its data, thus …",49,[[],["protocol",4]]],[11,"to_endpoint","","Turns the <code>ConnectedPoint</code> into the corresponding <code>Endpoint</code>.",50,[[],["endpoint",4]]],[11,"is_dialer","","Returns true if we are <code>Dialer</code>.",50,[[],["bool",15]]],[11,"is_listener","","Returns true if we are <code>Listener</code>.",50,[[],["bool",15]]],[11,"get_remote_address","","Returns the address of the remote stored in this struct.",50,[[],["multiaddr",3]]],[11,"set_remote_address","","Modifies the address of the remote stored in this struct.",50,[[["multiaddr",3]]]],[11,"empty","","Create a new, empty multiaddress.",53,[[],["multiaddr",3]]],[11,"with_capacity","","Create a new, empty multiaddress with the given capacity.",53,[[["usize",15]],["multiaddr",3]]],[11,"len","","Return the length in bytes of this multiaddress.",53,[[],["usize",15]]],[11,"is_empty","","Returns true if the length of this multiaddress is 0.",53,[[],["bool",15]]],[11,"to_vec","","Return a copy of this [<code>Multiaddr</code>]\'s byte representation.",53,[[],[["vec",3],["global",3],["u8",15]]]],[11,"push","","Adds an already-parsed address component to the end of …",53,[[["protocol",4]]]],[11,"pop","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …",53,[[],[["option",4],["protocol",4]]]],[11,"with","","Like [<code>Multiaddr::push</code>] but consumes <code>self</code>.",53,[[["protocol",4]],["multiaddr",3]]],[11,"iter","","Returns the components of this multiaddress.",53,[[],["iter",3]]],[11,"replace","","Replace a [<code>Protocol</code>] at some position in this <code>Multiaddr</code>.",53,[[["usize",15]],[["option",4],["multiaddr",3]]]],[11,"ends_with","","Checks whether the given <code>Multiaddr</code> is a suffix of this …",53,[[["multiaddr",3]],["bool",15]]],[11,"from_public_key","","Builds a <code>PeerId</code> from a public key.",54,[[["publickey",4]],["peerid",3]]],[11,"from_bytes","","Parses a <code>PeerId</code> from bytes.",54,[[],[["result",4],["error",4],["peerid",3]]]],[11,"from_multihash","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.",54,[[["multihash",3],["uint",3]],[["result",4],["multihash",3],["peerid",3]]]],[11,"random","","Generates a random peer ID from a cryptographically …",54,[[],["peerid",3]]],[11,"to_bytes","","Returns a raw bytes representation of this <code>PeerId</code>.",54,[[],[["vec",3],["global",3],["u8",15]]]],[11,"to_base58","","Returns a base-58 encoded string of this <code>PeerId</code>.",54,[[],["string",3]]],[11,"is_public_key","","Checks whether the public key passed as parameter matches …",54,[[["publickey",4]],[["option",4],["bool",15]]]]],"p":[[3,"ConnectionManager"],[3,"PermissionValue"],[3,"FirewallPermission"],[8,"VariantPermission"],[8,"ToPermissionVariants"],[4,"RequestDirection"],[4,"FirewallRule"],[13,"SetRules"],[13,"AddPermissions"],[13,"RemovePermissions"],[13,"RemoveRule"],[3,"FirewallConfiguration"],[3,"SwarmTask"],[4,"RelayDirection"],[4,"CommunicationRequest"],[13,"RequestMsg"],[13,"AddPeer"],[13,"ConfigRelay"],[4,"RequestMessageError"],[3,"EstablishedConnection"],[4,"CommunicationResults"],[13,"CheckConnectionResult"],[13,"SwarmInfo"],[4,"ConnectPeerError"],[3,"CommunicationActorConfig"],[3,"CommunicationActor"],[3,"MessageCodec"],[4,"P2PMdnsEvent"],[3,"P2PIdentifyInfo"],[4,"P2PProtocolsHandlerUpgrErr"],[4,"P2PIdentifyEvent"],[13,"Received"],[13,"Sent"],[13,"Pushed"],[13,"Error"],[4,"P2POutboundFailure"],[4,"P2PInboundFailure"],[4,"P2PReqResEvent"],[13,"Req"],[13,"Res"],[13,"InboundFailure"],[13,"OutboundFailure"],[13,"ResSent"],[4,"P2PEvent"],[4,"BehaviourError"],[3,"BehaviourConfig"],[3,"P2PNetworkBehaviour"],[3,"ConnectionLimit"],[4,"Keypair"],[4,"Protocol"],[4,"ConnectedPoint"],[13,"Dialer"],[13,"Listener"],[3,"Multiaddr"],[3,"PeerId"],[4,"SwarmEvent"],[13,"ConnectionEstablished"],[13,"ConnectionClosed"],[13,"IncomingConnection"],[13,"IncomingConnectionError"],[13,"BannedPeer"],[13,"UnreachableAddr"],[13,"UnknownPeerUnreachableAddr"],[13,"ListenerClosed"],[13,"ListenerError"],[3,"MessageProtocol"]]},\
"engine":{"doc":"A system for securely managing secrets.","i":[[0,"snapshot","engine","This crate defines and implements the encrypted offline …",null,null],[0,"compression","engine::snapshot","",null,null],[0,"decoder","engine::snapshot::compression","",null,null],[5,"decompress_into","engine::snapshot::compression::decoder","",null,[[["vec",3]],["result",6]]],[5,"decompress","","Decompress data using an LZ4 Algorithm.",null,[[],[["result",6],["vec",3]]]],[3,"Lz4Decoder","","",null,null],[12,"input","","",0,null],[12,"output","","",0,null],[12,"token","","",0,null],[11,"take","","",0,[[["usize",15]],["result",6]]],[11,"take_internal","","",0,[[["usize",15]],["result",6]]],[11,"output","","",0,[[["vec",3]]]],[11,"duplicate","","",0,[[["usize",15]]]],[11,"read_int","","",0,[[],[["usize",15],["result",6]]]],[11,"read_u16","","",0,[[],[["u16",15],["result",6]]]],[11,"read_literal","","",0,[[],["result",6]]],[11,"read_duplicate","","",0,[[],["result",6]]],[11,"complete","","",0,[[],["result",6]]],[0,"encoder","engine::snapshot::compression","",null,null],[17,"DICT_SIZE","engine::snapshot::compression::encoder","",null,null],[5,"compress_into","","",null,[[["vec",3]]]],[5,"compress","","Compress data using an LZ4 Algorithm.",null,[[],[["vec",3],["u8",15]]]],[3,"Lz4Encoder","","",null,null],[12,"input","","",1,null],[12,"output","","",1,null],[12,"cursor","","",1,null],[12,"dict","","",1,null],[11,"step_forward","","",1,[[["usize",15]],["bool",15]]],[11,"insert_cursor","","",1,[[]]],[11,"remaining","","",1,[[],["bool",15]]],[11,"get_cursor_hash","","",1,[[],["usize",15]]],[11,"get","","",1,[[["usize",15]],["u32",15]]],[11,"get_at_cursor","","",1,[[],["u32",15]]],[11,"find_duplicate","","",1,[[],[["duplicate",3],["option",4]]]],[11,"write_int","","",1,[[["usize",15]]]],[11,"pop_block","","",1,[[],["block",3]]],[11,"complete","","",1,[[]]],[3,"Block","engine::snapshot::compression","",null,null],[12,"literal_length","","",2,null],[12,"duplicates","","",2,null],[3,"Duplicate","","",null,null],[12,"offset","","",3,null],[12,"padding","","",3,null],[0,"files","engine::snapshot","",null,null],[5,"home_dir","engine::snapshot::files","Get the preferred Stronghold home directory",null,[[],[["pathbuf",3],["result",6]]]],[5,"snapshot_dir","","Get the preferred snapshot directory",null,[[],[["pathbuf",3],["result",6]]]],[5,"verify_or_create","","",null,[[["path",3]],["result",6]]],[5,"get_path","","Construct the path to a snapshot file with the specifed …",null,[[["option",4],["str",15]],[["pathbuf",3],["result",6]]]],[0,"kdf","engine::snapshot","",null,null],[5,"naive_kdf","engine::snapshot::kdf","a wrapper around the <code>HMAC_SHA256</code> function used to derive …",null,[[],["result",6]]],[0,"logic","engine::snapshot","",null,null],[17,"MAGIC","engine::snapshot::logic","Magic bytes (bytes 0-4 in a snapshot file)",null,null],[17,"VERSION","","Current version bytes (bytes 5-6 in a snapshot file)",null,null],[17,"KEY_SIZE","","",null,null],[6,"Key","","",null,null],[17,"NONCE_SIZE","","",null,null],[6,"Nonce","","",null,null],[5,"write","","Encrypt the opaque plaintext bytestring using the …",null,[[["key",6]],["result",6]]],[5,"read","","Read ciphertext from the input, decrypts it using the …",null,[[["key",6]],[["result",6],["vec",3]]]],[5,"write_to","","Atomically encrypt and <code>write</code> the specified plaintext to …",null,[[["key",6],["path",3]],["result",6]]],[5,"read_from","","<code>read</code> and decrypt the ciphertext from the specified path",null,[[["key",6],["path",3]],[["result",6],["vec",3]]]],[5,"check_min_file_len","","",null,[[["file",3]],["result",6]]],[5,"check_header","","",null,[[],["result",6]]],[5,"compress","engine::snapshot","Compress data using an LZ4 Algorithm.",null,[[],[["vec",3],["u8",15]]]],[5,"decompress","","Decompress data using an LZ4 Algorithm.",null,[[],[["result",6],["vec",3]]]],[17,"MAGIC","","Magic bytes (bytes 0-4 in a snapshot file)",null,null],[17,"VERSION","","Current version bytes (bytes 5-6 in a snapshot file)",null,null],[6,"Key","","",null,null],[6,"Nonce","","",null,null],[5,"write","","Encrypt the opaque plaintext bytestring using the …",null,[[["key",6]],["result",6]]],[5,"read","","Read ciphertext from the input, decrypts it using the …",null,[[["key",6]],[["result",6],["vec",3]]]],[5,"write_to","","Atomically encrypt and <code>write</code> the specified plaintext to …",null,[[["key",6],["path",3]],["result",6]]],[5,"read_from","","<code>read</code> and decrypt the ciphertext from the specified path",null,[[["key",6],["path",3]],[["result",6],["vec",3]]]],[0,"store","engine","This crate contains a key/value cache for the stronghold …",null,null],[0,"macros","engine::store","",null,null],[0,"storage","","",null,null],[0,"cache","engine::store::storage","",null,null],[3,"Cache","engine::store::storage::cache","The cache struct used to store the data in an ordered …",null,null],[12,"table","","",4,null],[12,"scan_freq","","",4,null],[12,"created_at","","",4,null],[12,"last_scan_at","","",4,null],[11,"new","","creates a new empty <code>Cache</code>",4,[[]]],[11,"create_with_scanner","","creates an empty <code>Cache</code> with a periodic scanner which …",4,[[["duration",3]]]],[11,"get","","Gets the value associated with the specified key.",4,[[],["option",4]]],[11,"get_or_insert","","Gets the value associated with the specified key.  If the …",4,[[["duration",3],["option",4]]]],[11,"insert","","Insert a key-value pair into the cache. If key was not …",4,[[["duration",3],["option",4]],["option",4]]],[11,"remove","","Removes a key from the cache.  Returns the value from the …",4,[[],["option",4]]],[11,"contains_key","","",4,[[],["bool",15]]],[11,"get_last_scanned_at","","",4,[[],[["systemtime",3],["option",4]]]],[11,"get_scan_freq","","Get the cache\'s scan frequency.",4,[[],[["duration",3],["option",4]]]],[11,"clear","","Clear the stored cache and reset.",4,[[]]],[11,"try_remove_expired_items","","attempts to remove expired items based on the current …",4,[[["systemtime",3]]]],[3,"Value","engine::store::storage","The general value used for the Store.",null,null],[12,"val","","",5,null],[12,"expiration","","",5,null],[11,"new","","",5,[[["duration",3],["option",4]]]],[11,"has_expired","","",5,[[["systemtime",3]],["bool",15]]],[3,"Cache","engine::store","The cache struct used to store the data in an ordered …",null,null],[12,"table","","",4,null],[12,"scan_freq","","",4,null],[12,"created_at","","",4,null],[12,"last_scan_at","","",4,null],[0,"vault","engine","Vault is an in-memory database specification which is …",null,null],[0,"base64","engine::vault","",null,null],[3,"Base64","engine::vault::base64","",null,null],[18,"PADDING","","base64 padding character",6,null],[11,"encode_data","","encode <code>data</code> using a base64 uri-safe character set.",6,[[],["string",3]]],[11,"decode_data","","decode data from base64 based off of the URI safe …",6,[[],[["result",6],["vec",3]]]],[11,"encode_byte","","encode a single byte",6,[[["usize",15]],["u8",15]]],[11,"decode_byte","","decode a single byte",6,[[["u8",15]],[["usize",15],["result",6]]]],[8,"Base64Encodable","","a trait to make types base64 encodable",null,null],[10,"base64","","",7,[[],["string",3]]],[8,"Base64Decodable","","a trait to make types base64 decodable",null,null],[10,"from_base64","","",8,[[],["result",6]]],[0,"crypto_box","engine::vault","",null,null],[8,"BoxProvider","engine::vault::crypto_box","A provider interface between the vault and a crypto box. …",null,null],[10,"box_key_len","","function for the key length of the crypto box",9,[[],["usize",15]]],[10,"box_overhead","","gets the crypto box\'s overhead",9,[[],["usize",15]]],[10,"box_seal","","seals some data into the crypto box using the <code>key</code> and the …",9,[[["key",3]],[["result",6],["vec",3]]]],[10,"box_open","","opens a crypto box to get data using the <code>key</code> and the <code>ad</code>.",9,[[["key",3]],[["result",6],["vec",3]]]],[10,"random_buf","","fills a buffer <code>buf</code> with secure random bytes.",9,[[],["result",6]]],[11,"random_vec","","creates a vector with secure random bytes based off of an …",9,[[["usize",15]],[["result",6],["vec",3]]]],[3,"Key","","A key to the crypto box.  Key is stored on the heap which …",null,null],[12,"key","","the guarded raw bytes that make up the key",10,null],[12,"_box_provider","","",10,null],[11,"random","","generate a random key using secure random bytes",10,[[],["result",6]]],[11,"load","","attempts to load a key from inputted data",10,[[["vec",3],["u8",15]],["result",6]]],[11,"bytes","","get the key\'s bytes",10,[[],[["vec",3],["u8",15]]]],[8,"Encrypt","","trait for encryptable data. Allows the data to be …",null,null],[11,"encrypt","","encrypts a raw data and creates a type T from the …",11,[[["asref",8],["key",3]],["result",6]]],[8,"Decrypt","","Trait for decryptable data.  Allows the data to be …",null,null],[11,"decrypt","","decrypts raw data and creates a new type T from the …",12,[[["asref",8],["key",3]],["result",6]]],[0,"types","engine::vault","",null,null],[0,"transactions","engine::vault::types","",null,null],[4,"TransactionType","engine::vault::types::transactions","generic transaction type enum",null,null],[13,"Data","","",13,null],[13,"Revocation","","",13,null],[11,"val","","convert transaction type into its associated number value.",13,[[],["val",3]]],[3,"Transaction","","a generic transaction (untyped)",null,null],[12,"0","","",14,null],[3,"UntypedTransaction","","untyped transaction view",null,null],[12,"type_id","","transaction type",15,null],[12,"id","","id identifer",15,null],[3,"DataTransaction","","a data transaction",null,null],[12,"type_id","","transaction type",16,null],[12,"len","","Length of the unencrypted blob data",16,null],[12,"id","","id identifer",16,null],[12,"blob","","the blob identifier for the data referred to by this …",16,null],[12,"record_hint","","a record hint",16,null],[8,"TypedTransaction","","a typed transaction",null,null],[10,"type_id","","",17,[[],["val",3]]],[3,"RevocationTransaction","","a revocation transaction",null,null],[12,"type_id","","transaction type",18,null],[12,"id","","id identifer",18,null],[11,"new","","create a new data transaction.",16,[[["chainid",3],["u64",15],["blobid",3],["recordhint",3]],["transaction",3]]],[11,"new","","create a new revocation transaction.",18,[[["chainid",3]],["transaction",3]]],[11,"untyped","","",14,[[],["untypedtransaction",3]]],[11,"typed","","",14,[[],["option",4]]],[17,"TRANSACTION_MAX_BYTES","","",null,null],[3,"SealedTransaction","","a sealed transaction",null,null],[12,"0","","",19,null],[3,"SealedBlob","","a sealed blob",null,null],[12,"0","","",20,null],[0,"utils","engine::vault::types","",null,null],[3,"RecordHint","engine::vault::types::utils","a record hint.  Used as a hint to what this data is.",null,null],[12,"0","","",21,null],[3,"RecordId","","A record identifier.  Contains a ChainID which refers to …",null,null],[12,"0","","",22,null],[3,"ClientId","","Client Id type used to identify a client.",null,null],[12,"0","","",23,null],[3,"VaultId","","Vault Id type used to identify a vault.",null,null],[12,"0","","",24,null],[3,"ChainId","","A chain identifier.  Used to identify a set of …",null,null],[12,"0","","",25,null],[3,"Id","","A generic Id type used as the underlying type for the …",null,null],[12,"0","","",26,null],[3,"TransactionId","","A transaction identifier",null,null],[12,"0","","",27,null],[3,"BlobId","","A blob identifier",null,null],[12,"0","","",28,null],[3,"Val","","a big endian encoded number",null,null],[12,"0","","",29,null],[11,"new","","create a new random Id for hint",21,[[],["result",6]]],[11,"u64","","",29,[[],["u64",15]]],[11,"random","","",25,[[],["result",6]]],[11,"load","","",25,[[],["result",6]]],[11,"random","","",27,[[],["result",6]]],[11,"load","","",27,[[],["result",6]]],[11,"random","","",28,[[],["result",6]]],[11,"random","","",22,[[],["result",6]]],[11,"load","","load record_id from data",22,[[],["result",6]]],[11,"random","","Create a new random <code>Id</code>.",26,[[],["result",6]]],[11,"load","","Load an <code>Id</code> from some data.",26,[[],["result",6]]],[11,"random","","Create a new random <code>VaultId</code>.",24,[[],["result",6]]],[11,"load","","Load a <code>VaultId</code> from some data.",24,[[],["result",6]]],[11,"random","","Create a new random <code>ClientId</code>.",23,[[],["result",6]]],[11,"load","","Load a <code>ClientId</code> from some data.",23,[[],["result",6]]],[8,"AsView","engine::vault::types","a view over raw data.",null,null],[11,"view","","creates a view over <code>self</code>.",30,[[]]],[8,"AsViewMut","","a mutable view over raw data.",null,null],[11,"view_mut","","creates a mutable view over <code>self</code>.",31,[[]]],[0,"view","engine::vault","",null,null],[3,"DbView","engine::vault::view","A view over the data inside of the Stronghold database.",null,null],[12,"vaults","","",32,null],[3,"Vault","","A enclave of data that is encrypted under one key.",null,null],[12,"key","","",33,null],[12,"entries","","",33,null],[3,"Record","","A bit of data inside of a Vault.",null,null],[12,"id","","",34,null],[12,"data","","",34,null],[12,"revoke","","",34,null],[12,"blob","","",34,null],[11,"new","","Create a new Database View.",32,[[],["dbview",3]]],[11,"init_vault","","Initialize a new vault if it doesn\'t exist.",32,[[["vaultid",3],["key",3]],["result",6]]],[11,"write","","Write a new record to the Vault.",32,[[["recordid",3],["recordhint",3],["vaultid",3],["key",3]],["result",6]]],[11,"list_hints_and_ids","","Lists all of the hints and ids for the given vault.",32,[[["vaultid",3],["key",3]],["vec",3]]],[11,"contains_record","","Check to see if vault contains a specific record id.",32,[[["vaultid",3],["recordid",3],["key",3]],["bool",15]]],[11,"get_guard","","execute a procedure on the guarded record data.",32,[[["vaultid",3],["recordid",3],["key",3]],["result",6]]],[11,"exec_proc","","",32,[[["recordid",3],["recordhint",3],["vaultid",3],["key",3]],["result",6]]],[11,"revoke_record","","mark a record as revoked.",32,[[["vaultid",3],["recordid",3],["key",3]],["result",6]]],[11,"garbage_collect_vault","","Garbage collect a vault.",32,[[["vaultid",3],["key",3]],["result",6]]],[11,"clear","","",32,[[],["result",6]]],[11,"init_vault","","",33,[[["key",3]],[["vault",3],["result",6]]]],[11,"add_or_update_record","","Adds a new entry to the vault if the entry doesn\'t …",33,[[["recordhint",3],["chainid",3],["key",3]],["result",6]]],[11,"list_hints_and_ids","","List the hints and ids of the specified vault.",33,[[["key",3]],["vec",3]]],[11,"contains_record","","",33,[[["recordid",3],["key",3]],["bool",15]]],[11,"revoke","","Revokes an entry by its chain id.  Does nothing if the …",33,[[["chainid",3],["key",3]],["result",6]]],[11,"get_guard","","",33,[[["chainid",3],["key",3]],[["guardedvec",3],["result",6]]]],[11,"garbage_collect","","Sorts through all of the vault entries and garbage …",33,[[]]],[11,"new","","",34,[[["chainid",3],["blobid",3],["recordhint",3],["key",3]],[["result",6],["record",3]]]],[11,"get_hint_and_id","","Get the id and record hint for this record.",34,[[["key",3]],["option",4]]],[11,"check_id","","Check to see if a record id is in this vault.",34,[[["recordid",3]],["bool",15]]],[11,"get_blob","","Get the blob from this entry.",34,[[["chainid",3],["key",3]],[["guardedvec",3],["result",6]]]],[11,"update","","Update the data in an existing entry.",34,[[["chainid",3],["key",3]],["result",6]]],[11,"revoke","","",34,[[["chainid",3],["key",3]],["result",6]]],[8,"Base64Decodable","engine::vault","a trait to make types base64 decodable",null,null],[10,"from_base64","","",8,[[],["result",6]]],[8,"Base64Encodable","","a trait to make types base64 encodable",null,null],[10,"base64","","",7,[[],["string",3]]],[8,"BoxProvider","","A provider interface between the vault and a crypto box. …",null,null],[10,"box_key_len","","function for the key length of the crypto box",9,[[],["usize",15]]],[10,"box_overhead","","gets the crypto box\'s overhead",9,[[],["usize",15]]],[10,"box_seal","","seals some data into the crypto box using the <code>key</code> and the …",9,[[["key",3]],[["result",6],["vec",3]]]],[10,"box_open","","opens a crypto box to get data using the <code>key</code> and the <code>ad</code>.",9,[[["key",3]],[["result",6],["vec",3]]]],[10,"random_buf","","fills a buffer <code>buf</code> with secure random bytes.",9,[[],["result",6]]],[11,"random_vec","engine::vault::crypto_box","creates a vector with secure random bytes based off of an …",9,[[["usize",15]],[["result",6],["vec",3]]]],[8,"Decrypt","engine::vault","Trait for decryptable data.  Allows the data to be …",null,null],[11,"decrypt","engine::vault::crypto_box","decrypts raw data and creates a new type T from the …",12,[[["asref",8],["key",3]],["result",6]]],[8,"Encrypt","engine::vault","trait for encryptable data. Allows the data to be …",null,null],[11,"encrypt","engine::vault::crypto_box","encrypts a raw data and creates a type T from the …",11,[[["asref",8],["key",3]],["result",6]]],[3,"Key","engine::vault","A key to the crypto box.  Key is stored on the heap which …",null,null],[12,"key","","the guarded raw bytes that make up the key",10,null],[12,"_box_provider","","",10,null],[3,"ChainId","","A chain identifier.  Used to identify a set of …",null,null],[12,"0","","",25,null],[3,"ClientId","","Client Id type used to identify a client.",null,null],[12,"0","","",23,null],[3,"Id","","A generic Id type used as the underlying type for the …",null,null],[12,"0","","",26,null],[3,"RecordHint","","a record hint.  Used as a hint to what this data is.",null,null],[12,"0","","",21,null],[3,"RecordId","","A record identifier.  Contains a ChainID which refers to …",null,null],[12,"0","","",22,null],[3,"VaultId","","Vault Id type used to identify a vault.",null,null],[12,"0","","",24,null],[7,"ALLOC","engine","A Zeroing Allocator which wraps the standard memory …",null,null],[4,"Error","","",null,null],[13,"IoError","","",35,null],[13,"SnapshotError","","",35,null],[13,"CryptoError","","",35,null],[13,"Lz4Error","","",35,null],[13,"TryIntoError","","",35,null],[13,"DatabaseError","","",35,null],[13,"VersionError","","",35,null],[13,"ChainError","","",35,null],[13,"Base64Error","","",35,null],[13,"Base64ErrorDetailed","","",35,null],[13,"InterfaceError","","",35,null],[13,"OtherError","","",35,null],[13,"ProviderError","","",35,null],[13,"ValueError","","",35,null],[13,"ProtocolError","","",35,null],[6,"Result","","",null,null],[14,"cache","","A macro for defining functions whose return values will …",null,null],[11,"from","engine::snapshot::compression::decoder","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","engine::snapshot::compression::encoder","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","engine::snapshot::compression","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","engine::store::storage::cache","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","engine::store::storage","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","engine::vault::base64","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","engine::vault::crypto_box","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","engine::vault::types::transactions","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"encode_hex","","",14,[[]]],[11,"encode_hex_upper","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"encode_hex","","",19,[[]]],[11,"encode_hex_upper","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"encode_hex","","",20,[[]]],[11,"encode_hex_upper","","",20,[[]]],[11,"from","engine::vault::types::utils","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"encode_hex","","",21,[[]]],[11,"encode_hex_upper","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"encode_hex","","",23,[[]]],[11,"encode_hex_upper","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"encode_hex","","",24,[[]]],[11,"encode_hex_upper","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"encode_hex","","",25,[[]]],[11,"encode_hex_upper","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"encode_hex","","",26,[[]]],[11,"encode_hex_upper","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"encode_hex","","",27,[[]]],[11,"encode_hex_upper","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"encode_hex","","",28,[[]]],[11,"encode_hex_upper","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","engine::vault::view","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","engine","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_string","","",35,[[],["string",3]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"type_id","engine::vault::types::transactions","",16,[[],["val",3]]],[11,"type_id","","",18,[[],["val",3]]],[11,"as_mut","","",14,[[]]],[11,"as_mut","","",19,[[]]],[11,"as_mut","","",20,[[]]],[11,"as_ref","","",14,[[]]],[11,"as_ref","","",19,[[]]],[11,"as_ref","","",20,[[]]],[11,"as_ref","engine::vault::types::utils","",21,[[]]],[11,"as_ref","","",25,[[]]],[11,"as_ref","","",27,[[]]],[11,"as_ref","","",28,[[]]],[11,"as_ref","","",26,[[]]],[11,"as_ref","","",24,[[]]],[11,"as_ref","","",23,[[]]],[11,"from","engine::vault::types::transactions","",19,[[["vec",3],["u8",15]]]],[11,"from","","",19,[[]]],[11,"from","","",20,[[["vec",3],["u8",15]]]],[11,"from","","",20,[[]]],[11,"from","engine::vault::types::utils","",21,[[]]],[11,"from","","",29,[[["u64",15]]]],[11,"from","engine","",35,[[["error",3]]]],[11,"from","","",35,[[["tryfromsliceerror",3]]]],[11,"from","","",35,[[["error",4]]]],[11,"into","engine::vault::types::utils","",24,[[],[["vec",3],["u8",15]]]],[11,"into","","",23,[[],[["vec",3],["u8",15]]]],[11,"into","","",23,[[],["string",3]]],[11,"into","","",24,[[],["string",3]]],[11,"clone","engine::snapshot::compression","",3,[[],["duplicate",3]]],[11,"clone","engine::store::storage::cache","",4,[[],["cache",3]]],[11,"clone","engine::store::storage","",5,[[],["value",3]]],[11,"clone","engine::vault::crypto_box","",10,[[]]],[11,"clone","engine::vault::types::transactions","",13,[[],["transactiontype",4]]],[11,"clone","","",14,[[],["transaction",3]]],[11,"clone","","",19,[[],["sealedtransaction",3]]],[11,"clone","","",20,[[],["sealedblob",3]]],[11,"clone","engine::vault::types::utils","",21,[[],["recordhint",3]]],[11,"clone","","",22,[[],["recordid",3]]],[11,"clone","","",23,[[],["clientid",3]]],[11,"clone","","",24,[[],["vaultid",3]]],[11,"clone","","",25,[[],["chainid",3]]],[11,"clone","","",26,[[],["id",3]]],[11,"clone","","",27,[[],["transactionid",3]]],[11,"clone","","",28,[[],["blobid",3]]],[11,"clone","","",29,[[],["val",3]]],[11,"clone","engine::vault::view","",32,[[],["dbview",3]]],[11,"clone","","",33,[[],["vault",3]]],[11,"clone","","",34,[[],["record",3]]],[11,"default","engine::store::storage::cache","",4,[[]]],[11,"default","engine::vault::types::transactions","",14,[[]]],[11,"default","engine::vault::types::utils","",23,[[],["clientid",3]]],[11,"default","","",26,[[],["id",3]]],[11,"default","engine::vault::view","",32,[[],["dbview",3]]],[11,"cmp","engine::vault::crypto_box","",10,[[],["ordering",4]]],[11,"cmp","engine::vault::types::transactions","",13,[[["transactiontype",4]],["ordering",4]]],[11,"cmp","engine::vault::types::utils","",21,[[["recordhint",3]],["ordering",4]]],[11,"cmp","","",22,[[["recordid",3]],["ordering",4]]],[11,"cmp","","",23,[[["clientid",3]],["ordering",4]]],[11,"cmp","","",24,[[["vaultid",3]],["ordering",4]]],[11,"cmp","","",25,[[["chainid",3]],["ordering",4]]],[11,"cmp","","",26,[[["id",3]],["ordering",4]]],[11,"cmp","","",27,[[["transactionid",3]],["ordering",4]]],[11,"cmp","","",28,[[["blobid",3]],["ordering",4]]],[11,"cmp","","",29,[[],["ordering",4]]],[11,"eq","engine::vault::crypto_box","",10,[[],["bool",15]]],[11,"eq","engine::vault::types::transactions","",13,[[["transactiontype",4]],["bool",15]]],[11,"eq","","",14,[[["transaction",3]],["bool",15]]],[11,"ne","","",14,[[["transaction",3]],["bool",15]]],[11,"eq","engine::vault::types::utils","",21,[[["recordhint",3]],["bool",15]]],[11,"ne","","",21,[[["recordhint",3]],["bool",15]]],[11,"eq","","",22,[[["recordid",3]],["bool",15]]],[11,"ne","","",22,[[["recordid",3]],["bool",15]]],[11,"eq","","",23,[[["clientid",3]],["bool",15]]],[11,"ne","","",23,[[["clientid",3]],["bool",15]]],[11,"eq","","",24,[[["vaultid",3]],["bool",15]]],[11,"ne","","",24,[[["vaultid",3]],["bool",15]]],[11,"eq","","",25,[[["chainid",3]],["bool",15]]],[11,"ne","","",25,[[["chainid",3]],["bool",15]]],[11,"eq","","",26,[[["id",3]],["bool",15]]],[11,"ne","","",26,[[["id",3]],["bool",15]]],[11,"eq","","",27,[[["transactionid",3]],["bool",15]]],[11,"ne","","",27,[[["transactionid",3]],["bool",15]]],[11,"eq","","",28,[[["blobid",3]],["bool",15]]],[11,"ne","","",28,[[["blobid",3]],["bool",15]]],[11,"eq","","",29,[[["val",3]],["bool",15]]],[11,"ne","","",29,[[["val",3]],["bool",15]]],[11,"partial_cmp","engine::vault::crypto_box","",10,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","engine::vault::types::transactions","",13,[[["transactiontype",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","engine::vault::types::utils","",21,[[["recordhint",3]],[["option",4],["ordering",4]]]],[11,"lt","","",21,[[["recordhint",3]],["bool",15]]],[11,"le","","",21,[[["recordhint",3]],["bool",15]]],[11,"gt","","",21,[[["recordhint",3]],["bool",15]]],[11,"ge","","",21,[[["recordhint",3]],["bool",15]]],[11,"partial_cmp","","",22,[[["recordid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",22,[[["recordid",3]],["bool",15]]],[11,"le","","",22,[[["recordid",3]],["bool",15]]],[11,"gt","","",22,[[["recordid",3]],["bool",15]]],[11,"ge","","",22,[[["recordid",3]],["bool",15]]],[11,"partial_cmp","","",23,[[["clientid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",23,[[["clientid",3]],["bool",15]]],[11,"le","","",23,[[["clientid",3]],["bool",15]]],[11,"gt","","",23,[[["clientid",3]],["bool",15]]],[11,"ge","","",23,[[["clientid",3]],["bool",15]]],[11,"partial_cmp","","",24,[[["vaultid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",24,[[["vaultid",3]],["bool",15]]],[11,"le","","",24,[[["vaultid",3]],["bool",15]]],[11,"gt","","",24,[[["vaultid",3]],["bool",15]]],[11,"ge","","",24,[[["vaultid",3]],["bool",15]]],[11,"partial_cmp","","",25,[[["chainid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",25,[[["chainid",3]],["bool",15]]],[11,"le","","",25,[[["chainid",3]],["bool",15]]],[11,"gt","","",25,[[["chainid",3]],["bool",15]]],[11,"ge","","",25,[[["chainid",3]],["bool",15]]],[11,"partial_cmp","","",26,[[["id",3]],[["option",4],["ordering",4]]]],[11,"lt","","",26,[[["id",3]],["bool",15]]],[11,"le","","",26,[[["id",3]],["bool",15]]],[11,"gt","","",26,[[["id",3]],["bool",15]]],[11,"ge","","",26,[[["id",3]],["bool",15]]],[11,"partial_cmp","","",27,[[["transactionid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",27,[[["transactionid",3]],["bool",15]]],[11,"le","","",27,[[["transactionid",3]],["bool",15]]],[11,"gt","","",27,[[["transactionid",3]],["bool",15]]],[11,"ge","","",27,[[["transactionid",3]],["bool",15]]],[11,"partial_cmp","","",28,[[["blobid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",28,[[["blobid",3]],["bool",15]]],[11,"le","","",28,[[["blobid",3]],["bool",15]]],[11,"gt","","",28,[[["blobid",3]],["bool",15]]],[11,"ge","","",28,[[["blobid",3]],["bool",15]]],[11,"partial_cmp","","",29,[[],[["option",4],["ordering",4]]]],[11,"fmt","engine::snapshot::compression","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","engine::store::storage::cache","",4,[[["formatter",3]],["result",6]]],[11,"fmt","engine::store::storage","",5,[[["formatter",3]],["result",6]]],[11,"fmt","engine::vault::crypto_box","",10,[[["formatter",3]],["result",6]]],[11,"fmt","engine::vault::types::transactions","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","engine::vault::types::utils","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","engine","",35,[[["formatter",3]],["result",6]]],[11,"fmt","engine::vault::types::utils","",22,[[["formatter",3]],["result",6]]],[11,"fmt","engine","",35,[[["formatter",3]],["result",6]]],[11,"add","engine::vault::types::utils","",29,[[["u64",15]]]],[11,"add_assign","","",29,[[["u64",15]]]],[11,"hash","engine::vault::crypto_box","",10,[[]]],[11,"hash","engine::vault::types::transactions","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","engine::vault::types::utils","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",29,[[]]],[11,"try_from","engine::vault::types::transactions","",13,[[["val",3]],["result",4]]],[11,"try_from","","",14,[[["vec",3],["u8",15]],["result",4]]],[11,"try_from","engine::vault::types::utils","",25,[[],["result",4]]],[11,"try_from","","",25,[[["vec",3],["u8",15]],["result",4]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_from","","",22,[[["vec",3],["u8",15]],["result",4]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_from","","",26,[[["vec",3],["u8",15]],["result",4]]],[11,"try_from","","",23,[[["vec",3],["u8",15]],["result",4]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_from","","",24,[[["vec",3],["u8",15]],["result",4]]],[11,"try_from","","",24,[[],["result",4]]],[11,"source","engine","",35,[[],[["option",4],["error",8]]]],[11,"deserialize","engine::store::storage::cache","",4,[[],["result",4]]],[11,"deserialize","engine::store::storage","",5,[[],["result",4]]],[11,"deserialize","engine::vault::crypto_box","",10,[[],["result",4]]],[11,"deserialize","engine::vault::types::transactions","",14,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","engine::vault::types::utils","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","engine::vault::view","",32,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"serialize","engine::store::storage::cache","",4,[[],["result",4]]],[11,"serialize","engine::store::storage","",5,[[],["result",4]]],[11,"serialize","engine::vault::crypto_box","",10,[[],["result",4]]],[11,"serialize","engine::vault::types::transactions","",14,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","engine::vault::types::utils","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","engine::vault::view","",32,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","","",34,[[],["result",4]]]],"p":[[3,"Lz4Decoder"],[3,"Lz4Encoder"],[3,"Block"],[3,"Duplicate"],[3,"Cache"],[3,"Value"],[3,"Base64"],[8,"Base64Encodable"],[8,"Base64Decodable"],[8,"BoxProvider"],[3,"Key"],[8,"Encrypt"],[8,"Decrypt"],[4,"TransactionType"],[3,"Transaction"],[3,"UntypedTransaction"],[3,"DataTransaction"],[8,"TypedTransaction"],[3,"RevocationTransaction"],[3,"SealedTransaction"],[3,"SealedBlob"],[3,"RecordHint"],[3,"RecordId"],[3,"ClientId"],[3,"VaultId"],[3,"ChainId"],[3,"Id"],[3,"TransactionId"],[3,"BlobId"],[3,"Val"],[8,"AsView"],[8,"AsViewMut"],[3,"DbView"],[3,"Vault"],[3,"Record"],[4,"Error"]]},\
"iota_stronghold":{"doc":"","i":[[0,"actors","iota_stronghold","",null,null],[0,"client","iota_stronghold::actors","",null,null],[4,"SLIP10DeriveInput","iota_stronghold::actors::client","<code>SLIP10DeriveInput</code> type used to specify a Seed location or …",null,null],[13,"Seed","","Note that BIP39 seeds are allowed to be used as SLIP10 …",0,null],[13,"Key","","",0,null],[4,"Procedure","","Procedure type used to call to the runtime via …",null,null],[13,"SLIP10Generate","","Generate a raw SLIP10 seed of the specified size (in …",1,null],[12,"output","iota_stronghold::actors::client::Procedure","",2,null],[12,"hint","","",2,null],[12,"size_bytes","","",2,null],[13,"SLIP10Derive","iota_stronghold::actors::client","Derive a SLIP10 child key from a seed or a parent key, …",1,null],[12,"chain","iota_stronghold::actors::client::Procedure","",3,null],[12,"input","","",3,null],[12,"output","","",3,null],[12,"hint","","",3,null],[13,"BIP39Recover","iota_stronghold::actors::client","Use a BIP39 mnemonic sentence (optionally protected by a …",1,null],[12,"mnemonic","iota_stronghold::actors::client::Procedure","",4,null],[12,"passphrase","","",4,null],[12,"output","","",4,null],[12,"hint","","",4,null],[13,"BIP39Generate","iota_stronghold::actors::client","Generate a BIP39 seed and its corresponding mnemonic …",1,null],[12,"passphrase","iota_stronghold::actors::client::Procedure","",5,null],[12,"output","","",5,null],[12,"hint","","",5,null],[13,"BIP39MnemonicSentence","iota_stronghold::actors::client","Read a BIP39 seed and its corresponding mnemonic sentence …",1,null],[12,"seed","iota_stronghold::actors::client::Procedure","",6,null],[13,"Ed25519PublicKey","iota_stronghold::actors::client","Derive an Ed25519 public key from the corresponding …",1,null],[12,"private_key","iota_stronghold::actors::client::Procedure","",7,null],[13,"Ed25519Sign","iota_stronghold::actors::client","Use the specified Ed25519 compatible key to sign the …",1,null],[12,"private_key","iota_stronghold::actors::client::Procedure","",8,null],[12,"msg","","",8,null],[4,"ProcResult","iota_stronghold::actors::client","A Procedure return result type.  Contains the different …",null,null],[13,"SLIP10Generate","","Return from generating a <code>SLIP10</code> seed.",9,null],[13,"SLIP10Derive","","Returns the public key derived from the <code>SLIP10Derive</code> call.",9,null],[13,"BIP39Recover","","<code>BIP39Recover</code> return value.",9,null],[13,"BIP39Generate","","<code>BIP39Generate</code> return value.",9,null],[13,"BIP39MnemonicSentence","","<code>BIP39MnemonicSentence</code> return value. Returns the mnemonic …",9,null],[13,"Ed25519PublicKey","","Return value for <code>Ed25519PublicKey</code>. Returns an Ed25519 …",9,null],[13,"Ed25519Sign","","Return value for <code>Ed25519Sign</code>. Returns an Ed25519 …",9,null],[13,"Error","","Generic Error return message.",9,null],[4,"SerdeProcResult","","",null,null],[13,"SLIP10Generate","","",10,null],[13,"SLIP10Derive","","",10,null],[13,"BIP39Recover","","",10,null],[13,"BIP39Generate","","",10,null],[13,"BIP39MnemonicSentence","","",10,null],[13,"Ed25519PublicKey","","",10,null],[13,"Ed25519Sign","","",10,null],[13,"Error","","",10,null],[4,"SHRequest","","",null,null],[13,"CheckVault","","",11,null],[13,"CheckRecord","","",11,null],[12,"location","iota_stronghold::actors::client::SHRequest","",12,null],[13,"WriteToStore","iota_stronghold::actors::client","",11,null],[12,"location","iota_stronghold::actors::client::SHRequest","",13,null],[12,"payload","","",13,null],[12,"lifetime","","",13,null],[13,"ReadFromStore","iota_stronghold::actors::client","",11,null],[12,"location","iota_stronghold::actors::client::SHRequest","",14,null],[13,"DeleteFromStore","iota_stronghold::actors::client","",11,null],[13,"CreateNewVault","","",11,null],[13,"WriteToVault","","",11,null],[12,"location","iota_stronghold::actors::client::SHRequest","",15,null],[12,"payload","","",15,null],[12,"hint","","",15,null],[13,"RevokeData","iota_stronghold::actors::client","",11,null],[12,"location","iota_stronghold::actors::client::SHRequest","",16,null],[13,"GarbageCollect","iota_stronghold::actors::client","",11,null],[13,"ListIds","","",11,null],[13,"ReadSnapshot","","",11,null],[12,"key","iota_stronghold::actors::client::SHRequest","",17,null],[12,"filename","","",17,null],[12,"path","","",17,null],[12,"cid","","",17,null],[12,"former_cid","","",17,null],[13,"WriteSnapshot","iota_stronghold::actors::client","",11,null],[12,"key","iota_stronghold::actors::client::SHRequest","",18,null],[12,"filename","","",18,null],[12,"path","","",18,null],[13,"FillSnapshot","iota_stronghold::actors::client","",11,null],[13,"ClearCache","","",11,null],[12,"kill","iota_stronghold::actors::client::SHRequest","",19,null],[13,"ControlRequest","iota_stronghold::actors::client","",11,null],[4,"SHResults","","Messages that come from stronghold",null,null],[13,"ReturnWriteStore","","",20,null],[13,"ReturnReadStore","","",20,null],[13,"ReturnDeleteStore","","",20,null],[13,"ReturnCreateVault","","",20,null],[13,"ReturnWriteVault","","",20,null],[13,"ReturnReadVault","","",20,null],[13,"ReturnRevoke","","",20,null],[13,"ReturnGarbage","","",20,null],[13,"ReturnList","","",20,null],[13,"ReturnFillSnap","","",20,null],[13,"ReturnWriteSnap","","",20,null],[13,"ReturnReadSnap","","",20,null],[13,"ReturnClearCache","","",20,null],[13,"ReturnControlRequest","","",20,null],[13,"ReturnExistsVault","","",20,null],[13,"ReturnExistsRecord","","",20,null],[0,"internal","iota_stronghold::actors","",null,null],[3,"InternalActor","iota_stronghold::actors::internal","",null,null],[12,"client_id","","",21,null],[12,"keystore","","",21,null],[12,"db","","",21,null],[4,"InternalMsg","","Messages used for the KeyStore Actor.",null,null],[13,"CreateVault","","",22,null],[13,"WriteToVault","","",22,null],[13,"RevokeData","","",22,null],[13,"GarbageCollect","","",22,null],[13,"ListIds","","",22,null],[13,"CheckRecord","","",22,null],[13,"ReadSnapshot","","",22,null],[13,"ReloadData","","",22,null],[12,"id","iota_stronghold::actors::internal::InternalMsg","",23,null],[12,"data","","",23,null],[12,"status","","",23,null],[13,"ClearCache","iota_stronghold::actors::internal","",22,null],[13,"KillInternal","","",22,null],[13,"FillSnapshot","","",22,null],[12,"client","iota_stronghold::actors::internal::InternalMsg","",24,null],[13,"SLIP10Generate","iota_stronghold::actors::internal","",22,null],[12,"vault_id","iota_stronghold::actors::internal::InternalMsg","",25,null],[12,"record_id","","",25,null],[12,"hint","","",25,null],[12,"size_bytes","","",25,null],[13,"SLIP10DeriveFromSeed","iota_stronghold::actors::internal","",22,null],[12,"chain","iota_stronghold::actors::internal::InternalMsg","",26,null],[12,"seed_vault_id","","",26,null],[12,"seed_record_id","","",26,null],[12,"key_vault_id","","",26,null],[12,"key_record_id","","",26,null],[12,"hint","","",26,null],[13,"SLIP10DeriveFromKey","iota_stronghold::actors::internal","",22,null],[12,"chain","iota_stronghold::actors::internal::InternalMsg","",27,null],[12,"parent_vault_id","","",27,null],[12,"parent_record_id","","",27,null],[12,"child_vault_id","","",27,null],[12,"child_record_id","","",27,null],[12,"hint","","",27,null],[13,"BIP39Generate","iota_stronghold::actors::internal","",22,null],[12,"passphrase","iota_stronghold::actors::internal::InternalMsg","",28,null],[12,"vault_id","","",28,null],[12,"record_id","","",28,null],[12,"hint","","",28,null],[13,"BIP39Recover","iota_stronghold::actors::internal","",22,null],[12,"mnemonic","iota_stronghold::actors::internal::InternalMsg","",29,null],[12,"passphrase","","",29,null],[12,"vault_id","","",29,null],[12,"record_id","","",29,null],[12,"hint","","",29,null],[13,"Ed25519PublicKey","iota_stronghold::actors::internal","",22,null],[12,"vault_id","iota_stronghold::actors::internal::InternalMsg","",30,null],[12,"record_id","","",30,null],[13,"Ed25519Sign","iota_stronghold::actors::internal","",22,null],[12,"vault_id","iota_stronghold::actors::internal::InternalMsg","",31,null],[12,"record_id","","",31,null],[12,"msg","","",31,null],[4,"InternalResults","iota_stronghold::actors::internal","Messages used internally by the client.",null,null],[13,"ReturnCreateVault","","",32,null],[13,"ReturnWriteVault","","",32,null],[13,"ReturnReadVault","","",32,null],[13,"ReturnCheckRecord","","",32,null],[13,"ReturnRevoke","","",32,null],[13,"ReturnGarbage","","",32,null],[13,"ReturnList","","",32,null],[13,"ReturnWriteSnap","","",32,null],[13,"ReturnControlRequest","","",32,null],[13,"RebuildCache","","",32,null],[12,"id","iota_stronghold::actors::internal::InternalResults","",33,null],[12,"vaults","","",33,null],[12,"store","","",33,null],[12,"status","","",33,null],[13,"ReturnClearCache","iota_stronghold::actors::internal","",32,null],[0,"snapshot","iota_stronghold::actors","",null,null],[4,"SMsg","iota_stronghold::actors::snapshot","Messages used for the Snapshot Actor.",null,null],[13,"WriteSnapshot","","",34,null],[12,"key","iota_stronghold::actors::snapshot::SMsg","",35,null],[12,"filename","","",35,null],[12,"path","","",35,null],[13,"FillSnapshot","iota_stronghold::actors::snapshot","",34,null],[12,"data","iota_stronghold::actors::snapshot::SMsg","",36,null],[12,"id","","",36,null],[13,"ReadFromSnapshot","iota_stronghold::actors::snapshot","",34,null],[12,"key","iota_stronghold::actors::snapshot::SMsg","",37,null],[12,"filename","","",37,null],[12,"path","","",37,null],[12,"id","","",37,null],[12,"fid","","",37,null],[0,"interface","iota_stronghold","",null,null],[3,"Stronghold","iota_stronghold::interface","The main type for the Stronghold System.  Used as the …",null,null],[12,"system","","",38,null],[12,"clients","","",38,null],[12,"target","","",38,null],[11,"init_stronghold_system","","Initializes a new instance of the system.  Sets up the …",38,[[["vec",3],["u8",15],["actorsystem",3],["strongholdflags",4],["vec",3]]]],[11,"spawn_stronghold_actor","","Spawns a new set of actors for the Stronghold system. …",38,[[["vec",3],["u8",15],["vec",3],["strongholdflags",4]]]],[11,"switch_actor_target","","Switches the actor target to another actor in the system …",38,[[["vec",3],["u8",15]]]],[11,"write_to_vault","","Writes data into the Stronghold. Uses the current target …",38,[[["vec",3],["u8",15],["vec",3],["recordhint",3],["location",4],["vaultflags",4]]]],[11,"write_to_store","","Writes data into an insecure cache.  This method, accepts …",38,[[["duration",3],["option",4],["vec",3],["u8",15],["location",4]]]],[11,"read_from_store","","A method that reads from an insecure cache.  This method, …",38,[[["location",4]]]],[11,"delete_from_store","","A method to delete data from an insecure cache. This …",38,[[["location",4]]]],[11,"delete_data","","Revokes the data from the specified location of type …",38,[[["bool",15],["location",4]]]],[11,"garbage_collect","","Garbage collects any revokes in a Vault based on the …",38,[[["vec",3],["u8",15]]]],[11,"list_hints_and_ids","","Returns a list of the available <code>RecordId</code> and <code>RecordHint</code> …",38,[[["into",8],["vec",3]]]],[11,"runtime_exec","","Executes a runtime command given a <code>Procedure</code>.  Returns a …",38,[[["procedure",4]]]],[11,"record_exists","","Checks whether a record exists in the client based off of …",38,[[["location",4]]]],[11,"vault_exists","","checks whether a vault exists in the client.",38,[[["location",4]]]],[11,"read_snapshot","","Reads data from a given snapshot file.  Can only read the …",38,[[["pathbuf",3],["vec",3],["u8",15],["option",4],["option",4],["option",4],["string",3]]]],[11,"write_all_to_snapshot","","Writes the entire state of the <code>Stronghold</code> into a …",38,[[["pathbuf",3],["option",4],["option",4],["string",3]]]],[11,"kill_stronghold","","Used to kill a stronghold actor or clear the cache of the …",38,[[["bool",15],["vec",3],["u8",15]]]],[11,"check_config_flags","","Unimplemented until Policies are implemented.",38,[[]]],[0,"internals","iota_stronghold","",null,null],[0,"provider","iota_stronghold::internals","",null,null],[3,"Provider","iota_stronghold::internals::provider","An implementation of the Vault\'s `BoxProvider type.  Used …",null,null],[18,"NONCE_LEN","","",39,null],[18,"TAG_LEN","","",39,null],[0,"state","iota_stronghold","",null,null],[0,"client","iota_stronghold::state","",null,null],[6,"Store","iota_stronghold::state::client","",null,null],[3,"Client","","A <code>Client</code> Cache Actor which routes external messages to …",null,null],[12,"client_id","","",40,null],[12,"vaults","","",40,null],[12,"store","","",40,null],[4,"ClientMsg","","",null,null],[13,"SHResults","","",41,null],[13,"SHRequest","","",41,null],[13,"InternalResults","","",41,null],[11,"new","","Creates a new Client given a <code>ClientID</code> and …",40,[[["clientid",3]]]],[11,"write_to_store","","Write unencrypted data to the store.  Returns <code>None</code> if the …",40,[[["duration",3],["option",4],["vec",3],["u8",15]],[["option",4],["vec",3]]]],[11,"read_from_store","","Attempts to read the data from the store.  Returns …",40,[[["vec",3],["u8",15]],[["option",4],["vec",3]]]],[11,"store_delete_item","","Deletes an item from the store by the given key.",40,[[["vec",3],["u8",15]]]],[11,"store_key_exists","","Checks to see if the key exists in the store.",40,[[["vec",3],["u8",15]],["bool",15]]],[11,"set_client_id","","",40,[[["clientid",3]]]],[11,"add_new_vault","","",40,[[["vaultid",3]]]],[11,"clear_cache","","Get the head of a vault. Empty the Client Cache.",40,[[],["option",4]]],[11,"rebuild_cache","","",40,[[["clientid",3],["vaultid",3],["hashset",3],["vec",3],["cache",3]]]],[11,"resolve_location","","",40,[[["asref",8],["location",4]]]],[11,"derive_vault_id","","",40,[[["asref",8],["vec",3]],["vaultid",3]]],[11,"derive_record_id","","",40,[[["asref",8],["usize",15],["vec",3]],["recordid",3]]],[11,"get_client_str","","",40,[[],["string",3]]],[11,"vault_exist","","",40,[[["vaultid",3]],[["vaultid",3],["option",4]]]],[11,"get_index_from_record_id","","",40,[[["asref",8],["vec",3],["recordid",3]],["usize",15]]],[0,"key_store","iota_stronghold::state","",null,null],[3,"KeyStore","iota_stronghold::state::key_store","",null,null],[12,"store","","",42,null],[11,"new","","Creates a new <code>KeyStore</code>.",42,[[]]],[11,"get_key","","Gets the key from the <code>KeyStore</code> and removes it.  Returns …",42,[[["vaultid",3]],[["option",4],["key",3]]]],[11,"vault_exists","","",42,[[["vaultid",3]],["bool",15]]],[11,"create_key","","Returns an existing key for the <code>id</code> or creates one.",42,[[["vaultid",3]],["key",3]]],[11,"insert_key","","Inserts a key into the <code>KeyStore</code> by <code>VaultId</code>.  If the …",42,[[["key",3],["vaultid",3]],["key",3]]],[11,"rebuild_keystore","","Rebuilds the <code>KeyStore</code> while throwing out any existing …",42,[[["key",3],["vaultid",3],["hashmap",3]]]],[11,"get_data","","",42,[[],[["key",3],["vaultid",3],["hashmap",3]]]],[11,"clear_keys","","",42,[[]]],[0,"snapshot","iota_stronghold::state","",null,null],[3,"Snapshot","iota_stronghold::state::snapshot","",null,null],[12,"state","","",43,null],[3,"SnapshotState","","",null,null],[12,"0","","",44,null],[11,"new","","Creates a new <code>Snapshot</code> from a buffer of <code>Vec<u8></code> state.",43,[[["snapshotstate",3]]]],[11,"get_state","","",43,[[["clientid",3]]]],[11,"has_data","","",43,[[["clientid",3]],["bool",15]]],[11,"read_from_snapshot","","Reads state from the specified named snapshot or the …",43,[[["path",3],["key",6],["option",4],["option",4],["str",15]],["result",6]]],[11,"write_to_snapshot","","Writes state to the specified named snapshot or the …",43,[[["path",3],["key",6],["option",4],["option",4],["str",15]],["result",6]]],[11,"new","","",44,[[["clientid",3]]]],[11,"add_data","","",44,[[["clientid",3]]]],[11,"serialize","","",44,[[],[["vec",3],["u8",15]]]],[11,"deserialize","","",44,[[["vec",3],["u8",15]]]],[0,"utils","iota_stronghold","",null,null],[0,"ids","iota_stronghold::utils","",null,null],[8,"LoadFromPath","iota_stronghold::utils::ids","",null,null],[10,"load_from_path","","Load from some data and a path.",45,[[],["result",6]]],[0,"types","iota_stronghold::utils","",null,null],[6,"StatusMessage","iota_stronghold::utils::types","A type alias for the empty <code>ResultMessage<()></code> type.",null,null],[4,"ResultMessage","","Return value used for Actor Messages.  Can specify an …",null,null],[13,"Ok","","",46,null],[13,"Error","","",46,null],[18,"OK","","",46,null],[4,"Location","","A <code>Location</code> type used to specify where in the <code>Stronghold</code> a …",null,null],[13,"Generic","","",47,null],[12,"vault_path","iota_stronghold::utils::types::Location","",48,null],[12,"record_path","","",48,null],[13,"Counter","iota_stronghold::utils::types","",47,null],[12,"vault_path","iota_stronghold::utils::types::Location","",49,null],[12,"counter","","",49,null],[11,"vault_path","iota_stronghold::utils::types","Gets the vault_path from the Location.",47,[[]]],[11,"generic","","Creates a generic location from types that implement …",47,[[["into",8],["vec",3]]]],[11,"counter","","Creates a counter location from a type that implements …",47,[[["into",8],["into",8],["vec",3],["usize",15]]]],[11,"increment_counter","","Helper method used to increment counter locations.",47,[[]]],[11,"const_generic","","Used to generate a constant generic location.",47,[[["vec",3],["u8",15]]]],[11,"const_counter","","used to generate a constant counter location.",47,[[["usize",15],["vec",3],["u8",15]]]],[4,"StrongholdFlags","","Policy options for modifying an entire Stronghold.  Must …",null,null],[13,"IsReadable","","",50,null],[4,"VaultFlags","","Policy options for for a specific vault.  Must be …",null,null],[5,"index_of_unchecked","iota_stronghold::utils","",null,[[],["usize",15]]],[4,"ProcResult","iota_stronghold","A Procedure return result type.  Contains the different …",null,null],[13,"SLIP10Generate","","Return from generating a <code>SLIP10</code> seed.",9,null],[13,"SLIP10Derive","","Returns the public key derived from the <code>SLIP10Derive</code> call.",9,null],[13,"BIP39Recover","","<code>BIP39Recover</code> return value.",9,null],[13,"BIP39Generate","","<code>BIP39Generate</code> return value.",9,null],[13,"BIP39MnemonicSentence","","<code>BIP39MnemonicSentence</code> return value. Returns the mnemonic …",9,null],[13,"Ed25519PublicKey","","Return value for <code>Ed25519PublicKey</code>. Returns an Ed25519 …",9,null],[13,"Ed25519Sign","","Return value for <code>Ed25519Sign</code>. Returns an Ed25519 …",9,null],[13,"Error","","Generic Error return message.",9,null],[4,"Procedure","","Procedure type used to call to the runtime via …",null,null],[13,"SLIP10Generate","","Generate a raw SLIP10 seed of the specified size (in …",1,null],[12,"output","iota_stronghold::Procedure","",2,null],[12,"hint","","",2,null],[12,"size_bytes","","",2,null],[13,"SLIP10Derive","iota_stronghold","Derive a SLIP10 child key from a seed or a parent key, …",1,null],[12,"chain","iota_stronghold::Procedure","",3,null],[12,"input","","",3,null],[12,"output","","",3,null],[12,"hint","","",3,null],[13,"BIP39Recover","iota_stronghold","Use a BIP39 mnemonic sentence (optionally protected by a …",1,null],[12,"mnemonic","iota_stronghold::Procedure","",4,null],[12,"passphrase","","",4,null],[12,"output","","",4,null],[12,"hint","","",4,null],[13,"BIP39Generate","iota_stronghold","Generate a BIP39 seed and its corresponding mnemonic …",1,null],[12,"passphrase","iota_stronghold::Procedure","",5,null],[12,"output","","",5,null],[12,"hint","","",5,null],[13,"BIP39MnemonicSentence","iota_stronghold","Read a BIP39 seed and its corresponding mnemonic sentence …",1,null],[12,"seed","iota_stronghold::Procedure","",6,null],[13,"Ed25519PublicKey","iota_stronghold","Derive an Ed25519 public key from the corresponding …",1,null],[12,"private_key","iota_stronghold::Procedure","",7,null],[13,"Ed25519Sign","iota_stronghold","Use the specified Ed25519 compatible key to sign the …",1,null],[12,"private_key","iota_stronghold::Procedure","",8,null],[12,"msg","","",8,null],[4,"SLIP10DeriveInput","iota_stronghold","<code>SLIP10DeriveInput</code> type used to specify a Seed location or …",null,null],[13,"Seed","","Note that BIP39 seeds are allowed to be used as SLIP10 …",0,null],[13,"Key","","",0,null],[3,"Stronghold","","The main type for the Stronghold System.  Used as the …",null,null],[12,"system","","",38,null],[12,"clients","","",38,null],[12,"target","","",38,null],[3,"Provider","","An implementation of the Vault\'s `BoxProvider type.  Used …",null,null],[4,"Location","","A <code>Location</code> type used to specify where in the <code>Stronghold</code> a …",null,null],[13,"Generic","","",47,null],[12,"vault_path","iota_stronghold::Location","",48,null],[12,"record_path","","",48,null],[13,"Counter","iota_stronghold","",47,null],[12,"vault_path","iota_stronghold::Location","",49,null],[12,"counter","","",49,null],[4,"ResultMessage","iota_stronghold","Return value used for Actor Messages.  Can specify an …",null,null],[13,"Ok","","",46,null],[13,"Error","","",46,null],[6,"StatusMessage","","A type alias for the empty <code>ResultMessage<()></code> type.",null,null],[4,"StrongholdFlags","","Policy options for modifying an entire Stronghold.  Must …",null,null],[13,"IsReadable","","",50,null],[4,"VaultFlags","","Policy options for for a specific vault.  Must be …",null,null],[5,"home_dir","","Get the preferred Stronghold home directory",null,[[],[["pathbuf",3],["error",4],["result",4]]]],[5,"snapshot_dir","","Get the preferred snapshot directory",null,[[],[["pathbuf",3],["error",4],["result",4]]]],[5,"naive_kdf","","a wrapper around the <code>HMAC_SHA256</code> function used to derive …",null,[[],[["error",4],["result",4]]]],[6,"Key","","",null,null],[3,"RecordHint","","a record hint.  Used as a hint to what this data is.",null,null],[12,"0","","",51,null],[6,"Result","","",null,null],[4,"Error","","",null,null],[13,"IDError","","",52,null],[13,"EngineError","","",52,null],[14,"line_error","","TODO: Should be replaced with proper errors.",null,null],[11,"from","iota_stronghold::actors::client","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","iota_stronghold::actors::internal","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","iota_stronghold::actors::snapshot","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","iota_stronghold::interface","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","iota_stronghold::internals::provider","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","iota_stronghold::state::client","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","iota_stronghold::state::key_store","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","iota_stronghold::state::snapshot","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","iota_stronghold::utils::types","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","iota_stronghold","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"encode_hex","","",51,[[]]],[11,"encode_hex_upper","","",51,[[]]],[11,"base64","","",51,[[],["string",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_string","","",52,[[],["string",3]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"fmt","","",51,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",51,[[]]],[11,"partial_cmp","","",51,[[["recordhint",3]],[["option",4],["ordering",4]]]],[11,"lt","","",51,[[["recordhint",3]],["bool",15]]],[11,"le","","",51,[[["recordhint",3]],["bool",15]]],[11,"gt","","",51,[[["recordhint",3]],["bool",15]]],[11,"ge","","",51,[[["recordhint",3]],["bool",15]]],[11,"from","","",51,[[],["recordhint",3]]],[11,"as_ref","","",51,[[]]],[11,"serialize","","",51,[[],["result",4]]],[11,"clone","","",51,[[],["recordhint",3]]],[11,"cmp","","",51,[[["recordhint",3]],["ordering",4]]],[11,"deserialize","","",51,[[],[["result",4],["recordhint",3]]]],[11,"eq","","",51,[[["recordhint",3]],["bool",15]]],[11,"ne","","",51,[[["recordhint",3]],["bool",15]]],[11,"as_ref","iota_stronghold::utils::types","",47,[[],["location",4]]],[11,"from","iota_stronghold::actors::client","",10,[[["procresult",4]]]],[11,"from","iota_stronghold::utils::types","",46,[[["result",4],["string",3]]]],[11,"from","iota_stronghold","",52,[[["error",4]]]],[11,"into","iota_stronghold::actors::client","",20,[[],["clientmsg",4]]],[11,"into","","",11,[[],["clientmsg",4]]],[11,"into","iota_stronghold::actors::internal","",32,[[],["clientmsg",4]]],[11,"clone","iota_stronghold::actors::client","",0,[[],["slip10deriveinput",4]]],[11,"clone","","",1,[[],["procedure",4]]],[11,"clone","","",9,[[],["procresult",4]]],[11,"clone","","",10,[[],["serdeprocresult",4]]],[11,"clone","","",11,[[],["shrequest",4]]],[11,"clone","","",20,[[],["shresults",4]]],[11,"clone","iota_stronghold::actors::internal","",22,[[],["internalmsg",4]]],[11,"clone","","",32,[[],["internalresults",4]]],[11,"clone","iota_stronghold::actors::snapshot","",34,[[],["smsg",4]]],[11,"clone","iota_stronghold::internals::provider","",39,[[],["provider",3]]],[11,"clone","iota_stronghold::state::client","",40,[[],["client",3]]],[11,"clone","","",41,[[],["clientmsg",4]]],[11,"clone","iota_stronghold::utils::types","",46,[[],["resultmessage",4]]],[11,"clone","","",47,[[],["location",4]]],[11,"clone","","",50,[[],["strongholdflags",4]]],[11,"clone","","",53,[[],["vaultflags",4]]],[11,"default","iota_stronghold::internals::provider","",39,[[],["provider",3]]],[11,"default","iota_stronghold::state::snapshot","",44,[[],["snapshotstate",3]]],[11,"cmp","iota_stronghold::internals::provider","",39,[[["provider",3]],["ordering",4]]],[11,"eq","","",39,[[["provider",3]],["bool",15]]],[11,"eq","iota_stronghold::utils::types","",46,[[["resultmessage",4]],["bool",15]]],[11,"ne","","",46,[[["resultmessage",4]],["bool",15]]],[11,"partial_cmp","iota_stronghold::internals::provider","",39,[[["provider",3]],[["option",4],["ordering",4]]]],[11,"fmt","iota_stronghold::actors::client","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::actors::internal","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::actors::snapshot","",34,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::internals::provider","",39,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::state::client","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::utils::types","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"try_from","iota_stronghold::actors::client","",9,[[["serdeprocresult",4]],[["tryfromsliceerror",3],["result",4]]]],[11,"source","iota_stronghold","",52,[[],[["option",4],["error",8]]]],[11,"create","iota_stronghold::state::snapshot","",43,[[]]],[11,"create_args","iota_stronghold::state::client","",40,[[["clientid",3]]]],[11,"create_args","iota_stronghold::actors::internal","",21,[[["clientid",3]]]],[11,"recv","iota_stronghold::state::client","",40,[[["sender",6],["context",3]]]],[11,"recv","iota_stronghold::actors::internal","",21,[[["sender",6],["context",3]]]],[11,"recv","iota_stronghold::state::snapshot","",43,[[["sender",6],["context",3]]]],[11,"receive","iota_stronghold::state::client","",40,[[["context",3],["shresults",4],["sender",6]]]],[11,"receive","","",40,[[["context",3],["shrequest",4],["sender",6]]]],[11,"receive","","",40,[[["context",3],["internalresults",4],["sender",6]]]],[11,"receive","iota_stronghold::actors::internal","",21,[[["context",3],["sender",6]]]],[11,"receive","iota_stronghold::state::snapshot","",43,[[["context",3],["sender",6]]]],[11,"receive","iota_stronghold::state::client","",40,[[["context",3],["basicactorref",3],["clientmsg",4],["option",4]]]],[11,"deserialize","iota_stronghold::actors::client","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","iota_stronghold::internals::provider","",39,[[],["result",4]]],[11,"deserialize","iota_stronghold::state::client","",40,[[],["result",4]]],[11,"deserialize","iota_stronghold::state::snapshot","",44,[[],["result",4]]],[11,"deserialize","iota_stronghold::utils::types","",46,[[],["result",4]]],[11,"deserialize","","",47,[[],["result",4]]],[11,"serialize","iota_stronghold::actors::client","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","iota_stronghold::internals::provider","",39,[[],["result",4]]],[11,"serialize","iota_stronghold::state::client","",40,[[],["result",4]]],[11,"serialize","iota_stronghold::state::snapshot","",44,[[],["result",4]]],[11,"serialize","iota_stronghold::utils::types","",46,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"box_key_len","iota_stronghold::internals::provider","",39,[[],["usize",15]]],[11,"box_overhead","","",39,[[],["usize",15]]],[11,"box_seal","","",39,[[["key",3]],[["result",6],["vec",3]]]],[11,"box_open","","",39,[[["key",3]],[["result",6],["vec",3]]]],[11,"random_buf","","",39,[[],["result",6]]],[11,"new","iota_stronghold","create a new random Id for hint",51,[[],[["error",4],["result",4],["recordhint",3]]]]],"p":[[4,"SLIP10DeriveInput"],[4,"Procedure"],[13,"SLIP10Generate"],[13,"SLIP10Derive"],[13,"BIP39Recover"],[13,"BIP39Generate"],[13,"BIP39MnemonicSentence"],[13,"Ed25519PublicKey"],[13,"Ed25519Sign"],[4,"ProcResult"],[4,"SerdeProcResult"],[4,"SHRequest"],[13,"CheckRecord"],[13,"WriteToStore"],[13,"ReadFromStore"],[13,"WriteToVault"],[13,"RevokeData"],[13,"ReadSnapshot"],[13,"WriteSnapshot"],[13,"ClearCache"],[4,"SHResults"],[3,"InternalActor"],[4,"InternalMsg"],[13,"ReloadData"],[13,"FillSnapshot"],[13,"SLIP10Generate"],[13,"SLIP10DeriveFromSeed"],[13,"SLIP10DeriveFromKey"],[13,"BIP39Generate"],[13,"BIP39Recover"],[13,"Ed25519PublicKey"],[13,"Ed25519Sign"],[4,"InternalResults"],[13,"RebuildCache"],[4,"SMsg"],[13,"WriteSnapshot"],[13,"FillSnapshot"],[13,"ReadFromSnapshot"],[3,"Stronghold"],[3,"Provider"],[3,"Client"],[4,"ClientMsg"],[3,"KeyStore"],[3,"Snapshot"],[3,"SnapshotState"],[8,"LoadFromPath"],[4,"ResultMessage"],[4,"Location"],[13,"Generic"],[13,"Counter"],[4,"StrongholdFlags"],[3,"RecordHint"],[4,"Error"],[4,"VaultFlags"]]},\
"runtime":{"doc":"Stronghold Protected-access Memory Runtime.","i":[[0,"allocator","runtime","",null,null],[3,"ZeroingAlloc","runtime::allocator","A Zeroing Allocator which wraps the standard memory …",null,null],[12,"0","","",0,null],[5,"zero","","Zeroes out memory at pointer in place based on the given …",null,[[["usize",15]]]],[0,"boxed","runtime","",null,null],[4,"Prot","runtime::boxed","",null,null],[13,"NoAccess","","",1,null],[13,"ReadOnly","","",1,null],[13,"ReadWrite","","",1,null],[6,"RefCount","","",null,null],[3,"Boxed","","A protected piece of memory.",null,null],[12,"ptr","","",2,null],[12,"len","","",2,null],[12,"prot","","",2,null],[12,"refs","","",2,null],[11,"new","","",2,[[["usize",15]]]],[11,"try_new","","",2,[[["usize",15]],["result",4]]],[11,"len","","",2,[[],["usize",15]]],[11,"is_empty","","",2,[[],["bool",15]]],[11,"size","","",2,[[],["usize",15]]],[11,"unlock","","",2,[[]]],[11,"unlock_mut","","",2,[[]]],[11,"lock","","",2,[[]]],[11,"as_ref","","",2,[[]]],[11,"as_mut","","",2,[[]]],[11,"as_slice","","",2,[[]]],[11,"as_mut_slice","","",2,[[]]],[11,"new_unlocked","","",2,[[["usize",15]]]],[11,"retain","","",2,[[["prot",4]]]],[11,"release","","",2,[[]]],[11,"is_locked","","",2,[[],["bool",15]]],[11,"random","","",2,[[["usize",15]]]],[11,"zero","","",2,[[["usize",15]]]],[5,"mprotect","","",null,[[["prot",4]]]],[5,"free","","",null,[[]]],[5,"lock_memory","","",null,[[["usize",15]]]],[0,"guarded","runtime","",null,null],[3,"Guarded","runtime::guarded","A guarded type for protecting fixed-length secrets …",null,null],[12,"boxed","","",3,null],[3,"Ref","","",null,null],[12,"boxed","","",4,null],[3,"RefMut","","",null,null],[12,"boxed","","",5,null],[11,"new","","",3,[[]]],[11,"try_new","","",3,[[],["result",4]]],[11,"size","","",3,[[],["usize",15]]],[11,"borrow","","",3,[[],["ref",3]]],[11,"borrow_mut","","",3,[[],["refmut",3]]],[11,"new","","",4,[[["boxed",3]]]],[11,"new","","",5,[[["boxed",3]]]],[11,"random","","",3,[[]]],[11,"zero","","",3,[[]]],[0,"guarded_vec","runtime","",null,null],[3,"GuardedVec","runtime::guarded_vec","A guarded type for protecting variable-length secrets …",null,null],[12,"boxed","","",6,null],[3,"Ref","","",null,null],[12,"boxed","","",7,null],[3,"RefMut","","",null,null],[12,"boxed","","",8,null],[11,"new","","",6,[[["usize",15]]]],[11,"try_new","","",6,[[],["result",4]]],[11,"len","","",6,[[],["usize",15]]],[11,"is_empty","","",6,[[],["bool",15]]],[11,"size","","",6,[[],["usize",15]]],[11,"borrow","","",6,[[],["ref",3]]],[11,"borrow_mut","","",6,[[],["refmut",3]]],[11,"random","","",6,[[["usize",15]]]],[11,"zero","","",6,[[["usize",15]]]],[11,"new","","",7,[[["boxed",3]]]],[11,"new","","",8,[[["boxed",3]]]],[3,"GuardedVecVisitor","","",null,null],[12,"marker","","",9,null],[11,"new","","",9,[[]]],[0,"secret","runtime","",null,null],[3,"Secret","runtime::secret","A Type for guarding secrets allocated to the stack.",null,null],[12,"data","","Internally protected data for the [<code>Secret</code>].",10,null],[3,"RefMut","","A mutable [<code>Deref</code>] wrapper around the [<code>Secret</code>]\'s internal …",null,null],[12,"data","","a reference to the underlying secret data that will be …",11,null],[11,"new","","Creates a new [<code>Secret</code>] and invokes the provided callback …",10,[[]]],[11,"zero","","Creates a new [<code>Secret</code>] filled with zeroed bytes and …",10,[[]]],[11,"from","","Creates a new [<code>Secret</code>] from existing, unprotected data, …",10,[[]]],[11,"random","","Creates a new [<code>Secret</code>] filled with random bytes and …",10,[[]]],[11,"new","","Creates a new <code>RefMut</code>.",11,[[]]],[0,"sodium","runtime","",null,null],[5,"mlock","runtime::sodium","A wrapper around the [<code>sodium_mlock</code>] function.",null,[[],["bool",15]]],[5,"munlock","","A wrapper around the [<code>sodium_munlock</code>] function.",null,[[],["bool",15]]],[0,"types","runtime","",null,null],[0,"bytes","runtime::types","",null,null],[17,"GARBAGE_VALUE","runtime::types::bytes","",null,null],[8,"Bytes","","A trait for dealing with Bytes.  Used as the underlying …",null,null],[11,"uninitialized","","",12,[[]]],[11,"size","","",12,[[],["usize",15]]],[11,"as_u8_ptr","","",12,[[]]],[11,"as_mut_u8_ptr","","",12,[[]]],[8,"ContiguousBytes","","",null,null],[10,"size","","",13,[[],["usize",15]]],[10,"as_u8_ptr","","",13,[[]]],[10,"as_mut_u8_ptr","","",13,[[]]],[11,"as_bytes","","",13,[[]]],[11,"as_mut_bytes","","",13,[[]]],[0,"const_eq","runtime::types","",null,null],[8,"ConstEq","runtime::types::const_eq","",null,null],[11,"const_eq","","",14,[[],["bool",15]]],[0,"rand","runtime::types","",null,null],[8,"Randomized","runtime::types::rand","",null,null],[11,"randomize","","",15,[[]]],[0,"zero","runtime::types","",null,null],[8,"Zeroed","runtime::types::zero","",null,null],[11,"zero","","",16,[[]]],[11,"copy_and_zero","","",16,[[]]],[3,"ZeroingAlloc","runtime","A Zeroing Allocator which wraps the standard memory …",null,null],[12,"0","","",0,null],[3,"Guarded","","A guarded type for protecting fixed-length secrets …",null,null],[12,"boxed","","",3,null],[3,"GuardedVec","","A guarded type for protecting variable-length secrets …",null,null],[12,"boxed","","",6,null],[3,"Secret","","A Type for guarding secrets allocated to the stack.",null,null],[12,"data","","Internally protected data for the [<code>Secret</code>].",10,null],[8,"Bytes","","A trait for dealing with Bytes.  Used as the underlying …",null,null],[11,"uninitialized","runtime::types::bytes","",12,[[]]],[11,"size","","",12,[[],["usize",15]]],[11,"as_u8_ptr","","",12,[[]]],[11,"as_mut_u8_ptr","","",12,[[]]],[11,"from","runtime::allocator","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","runtime::boxed","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","runtime::guarded","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","runtime::guarded_vec","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"fmt","","",9,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","runtime::secret","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"deref","runtime::guarded","",4,[[]]],[11,"deref","","",5,[[]]],[11,"deref","runtime::guarded_vec","",7,[[]]],[11,"deref","","",8,[[]]],[11,"deref","runtime::secret","",11,[[]]],[11,"deref_mut","runtime::guarded","",5,[[]]],[11,"deref_mut","runtime::guarded_vec","",8,[[]]],[11,"deref_mut","runtime::secret","",11,[[]]],[11,"from","runtime::boxed","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","runtime::guarded","",3,[[]]],[11,"from","runtime::guarded_vec","",6,[[]]],[11,"fmt","runtime::boxed","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","runtime::guarded","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","runtime::guarded_vec","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","runtime::secret","",11,[[["formatter",3]],["result",6]]],[11,"eq","runtime::boxed","",1,[[["prot",4]],["bool",15]]],[11,"eq","","",2,[[],["bool",15]]],[11,"eq","runtime::guarded","",4,[[],["bool",15]]],[11,"eq","","",4,[[["refmut",3]],["bool",15]]],[11,"eq","","",3,[[],["bool",15]]],[11,"eq","","",5,[[],["bool",15]]],[11,"eq","","",5,[[["ref",3]],["bool",15]]],[11,"eq","runtime::guarded_vec","",6,[[],["bool",15]]],[11,"eq","","",7,[[],["bool",15]]],[11,"eq","","",7,[[["refmut",3]],["bool",15]]],[11,"eq","","",8,[[],["bool",15]]],[11,"eq","","",8,[[["ref",3]],["bool",15]]],[11,"eq","runtime::secret","",11,[[],["bool",15]]],[11,"drop","runtime::boxed","",2,[[]]],[11,"drop","runtime::guarded","",4,[[]]],[11,"drop","","",5,[[]]],[11,"drop","runtime::guarded_vec","",7,[[]]],[11,"drop","","",8,[[]]],[11,"drop","runtime::secret","Ensures that the [<code>Secret</code>]\'s underlying memory is <code>munlock</code>ed…",10,[[]]],[11,"clone","runtime::boxed","",1,[[],["prot",4]]],[11,"clone","","",2,[[]]],[11,"clone","runtime::guarded","",3,[[],["guarded",3]]],[11,"clone","","",4,[[]]],[11,"clone","runtime::guarded_vec","",6,[[],["guardedvec",3]]],[11,"clone","","",7,[[]]],[11,"clone","runtime::secret","",11,[[]]],[11,"alloc","runtime::allocator","",0,[[["layout",3]]]],[11,"dealloc","","Zero the memory before deallocation.",0,[[["layout",3]]]],[11,"alloc_zeroed","","",0,[[["layout",3]]]],[11,"expecting","runtime::guarded_vec","",9,[[["formatter",3]],["result",6]]],[11,"visit_seq","","",9,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]]],"p":[[3,"ZeroingAlloc"],[4,"Prot"],[3,"Boxed"],[3,"Guarded"],[3,"Ref"],[3,"RefMut"],[3,"GuardedVec"],[3,"Ref"],[3,"RefMut"],[3,"GuardedVecVisitor"],[3,"Secret"],[3,"RefMut"],[8,"Bytes"],[8,"ContiguousBytes"],[8,"ConstEq"],[8,"Randomized"],[8,"Zeroed"]]},\
"stronghold_derive":{"doc":"Proc macros for Stronghold.","i":[[0,"comm","stronghold_derive","",null,null],[5,"build_plain","stronghold_derive::comm","",null,[[["ident",3],["dataenum",3]],["tokenstream",3]]],[5,"match_fields","","",null,[[["fields",4]],["tokenstream",3]]],[5,"impl_to_permissioned","","",null,[[["ident",3],["dataenum",3]],["tokenstream",3]]],[5,"impl_permission","","",null,[[["ident",3],["dataenum",3]],["tokenstream",3]]],[24,"GuardDebug","stronghold_derive","A version of the Debug macro that blocks parsing the data …",null,null],[24,"RequestPermissions","","Implements the [<code>VariantPermission</code>] for struct/ unions …",null,null]],"p":[]},\
"stronghold_utils":{"doc":"","i":[[0,"ask","stronghold_utils","",null,null],[5,"ask","stronghold_utils::ask","",null,[[],["remotehandle",3]]],[3,"AskActor","","",null,null],[12,"tx","","",0,null],[11,"boxed","","",0,[[["arc",3],["mutex",3]],["boxactor",6]]],[0,"test_utils","stronghold_utils","",null,null],[0,"fresh","stronghold_utils::test_utils","",null,null],[5,"bytestring","stronghold_utils::test_utils::fresh","",null,[[],[["vec",3],["u8",15]]]],[5,"non_empty_bytestring","","",null,[[],[["vec",3],["u8",15]]]],[5,"string","","",null,[[],["string",3]]],[5,"coinflip","","",null,[[],["bool",15]]],[5,"usize","","",null,[[["usize",15]],["usize",15]]],[5,"corrupt","stronghold_utils::test_utils","",null,[[]]],[5,"seek_to_beginning","","",null,[[["file",3]]]],[5,"corrupt_file","","",null,[[["file",3]]]],[5,"corrupt_file_at","","",null,[[["path",3]]]],[5,"ask","stronghold_utils","",null,[[],["remotehandle",3]]],[24,"GuardDebug","","A version of the Debug macro that blocks parsing the data …",null,null],[24,"RequestPermissions","","Implements the [<code>VariantPermission</code>] for struct/ unions …",null,null],[11,"from","stronghold_utils::ask","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"recv","","",0,[[["sender",6],["context",3]]]]],"p":[[3,"AskActor"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);