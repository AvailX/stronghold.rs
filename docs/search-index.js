var searchIndex = JSON.parse('{\
"communication_macros":{"doc":"","i":[[24,"RequestPermissions","communication_macros","Implements the [<code>VariantPermission</code>] for struct/ unions …",null,null],[5,"build_plain","","",null,[[["ident",3],["dataenum",3]],["tokenstream",3]]],[5,"match_fields","","",null,[[["fields",4]],["tokenstream",3]]],[5,"impl_to_permissioned","","",null,[[["ident",3],["dataenum",3]],["tokenstream",3]]],[5,"impl_permission","","",null,[[["ident",3],["dataenum",3]],["tokenstream",3]]]],"p":[]},\
"engine":{"doc":"A system for securely managing secrets.","i":[],"p":[]},\
"iota_stronghold":{"doc":"","i":[[5,"home_dir","iota_stronghold","Get the preferred Stronghold home directory",null,[[],[["error",4],["pathbuf",3],["result",4]]]],[5,"snapshot_dir","","Get the preferred snapshot directory",null,[[],[["error",4],["pathbuf",3],["result",4]]]],[5,"naive_kdf","","",null,[[],[["error",4],["result",4]]]],[5,"recommended_kdf","","derive a key from password and salt using the currently …",null,[[],[["error",4],["result",4]]]],[6,"Key","","",null,null],[3,"RecordHint","","a record hint",null,null],[12,"0","","",0,null],[0,"actors","","",null,null],[0,"client","iota_stronghold::actors","",null,null],[4,"SLIP10DeriveInput","iota_stronghold::actors::client","<code>SLIP10DeriveInput</code> type used to specify a Seed location or …",null,null],[13,"Seed","","Note that BIP39 seeds are allowed to be used as SLIP10 …",1,null],[13,"Key","","",1,null],[4,"Procedure","","Procedure type used to call to the runtime via …",null,null],[13,"SLIP10Generate","","Generate a raw SLIP10 seed of the specified size (in …",2,null],[12,"output","iota_stronghold::actors::client::Procedure","",3,null],[12,"hint","","",3,null],[12,"size_bytes","","",3,null],[13,"SLIP10Derive","iota_stronghold::actors::client","Derive a SLIP10 child key from a seed or a parent key, …",2,null],[12,"chain","iota_stronghold::actors::client::Procedure","",4,null],[12,"input","","",4,null],[12,"output","","",4,null],[12,"hint","","",4,null],[13,"BIP39Recover","iota_stronghold::actors::client","Use a BIP39 mnemonic sentence (optionally protected by a …",2,null],[12,"mnemonic","iota_stronghold::actors::client::Procedure","",5,null],[12,"passphrase","","",5,null],[12,"output","","",5,null],[12,"hint","","",5,null],[13,"BIP39Generate","iota_stronghold::actors::client","Generate a BIP39 seed and its corresponding mnemonic …",2,null],[12,"passphrase","iota_stronghold::actors::client::Procedure","",6,null],[12,"output","","",6,null],[12,"hint","","",6,null],[13,"BIP39MnemonicSentence","iota_stronghold::actors::client","Read a BIP39 seed and its corresponding mnemonic sentence …",2,null],[12,"seed","iota_stronghold::actors::client::Procedure","",7,null],[13,"Ed25519PublicKey","iota_stronghold::actors::client","Derive an Ed25519 public key from the corresponding …",2,null],[12,"private_key","iota_stronghold::actors::client::Procedure","",8,null],[13,"Ed25519Sign","iota_stronghold::actors::client","Use the specified Ed25519 compatible key to sign the …",2,null],[12,"private_key","iota_stronghold::actors::client::Procedure","",9,null],[12,"msg","","",9,null],[4,"ProcResult","iota_stronghold::actors::client","A Procedure return result type.  Contains the different …",null,null],[13,"SLIP10Generate","","Return from generating a <code>SLIP10</code> seed.",10,null],[13,"SLIP10Derive","","Returns the public key derived from the <code>SLIP10Derive</code> call.",10,null],[13,"BIP39Recover","","<code>BIP39Recover</code> return value.",10,null],[13,"BIP39Generate","","<code>BIP39Generate</code> return value.",10,null],[13,"BIP39MnemonicSentence","","<code>BIP39MnemonicSentence</code> return value. Returns the mnemonic …",10,null],[13,"Ed25519PublicKey","","Return value for <code>Ed25519PublicKey</code>. Returns an Ed25519 …",10,null],[13,"Ed25519Sign","","Return value for <code>Ed25519Sign</code>. Returns an Ed25519 …",10,null],[13,"Error","","Generic Error return message.",10,null],[4,"SerdeProcResult","","",null,null],[13,"SLIP10Generate","","",11,null],[13,"SLIP10Derive","","",11,null],[13,"BIP39Recover","","",11,null],[13,"BIP39Generate","","",11,null],[13,"BIP39MnemonicSentence","","",11,null],[13,"Ed25519PublicKey","","",11,null],[13,"Ed25519Sign","","",11,null],[13,"Error","","",11,null],[4,"SHRequest","","",null,null],[13,"CheckVault","","",12,null],[13,"CheckRecord","","",12,null],[12,"location","iota_stronghold::actors::client::SHRequest","",13,null],[13,"WriteToStore","iota_stronghold::actors::client","",12,null],[12,"location","iota_stronghold::actors::client::SHRequest","",14,null],[12,"payload","","",14,null],[12,"lifetime","","",14,null],[13,"ReadFromStore","iota_stronghold::actors::client","",12,null],[12,"location","iota_stronghold::actors::client::SHRequest","",15,null],[13,"DeleteFromStore","iota_stronghold::actors::client","",12,null],[13,"CreateNewVault","","",12,null],[13,"WriteToVault","","",12,null],[12,"location","iota_stronghold::actors::client::SHRequest","",16,null],[12,"payload","","",16,null],[12,"hint","","",16,null],[13,"InitRecord","iota_stronghold::actors::client","",12,null],[12,"location","iota_stronghold::actors::client::SHRequest","",17,null],[13,"RevokeData","iota_stronghold::actors::client","",12,null],[12,"location","iota_stronghold::actors::client::SHRequest","",18,null],[13,"GarbageCollect","iota_stronghold::actors::client","",12,null],[13,"ListIds","","",12,null],[13,"ReadSnapshot","","",12,null],[12,"key","iota_stronghold::actors::client::SHRequest","",19,null],[12,"filename","","",19,null],[12,"path","","",19,null],[12,"cid","","",19,null],[12,"former_cid","","",19,null],[13,"WriteSnapshot","iota_stronghold::actors::client","",12,null],[12,"key","iota_stronghold::actors::client::SHRequest","",20,null],[12,"filename","","",20,null],[12,"path","","",20,null],[13,"FillSnapshot","iota_stronghold::actors::client","",12,null],[13,"ClearCache","","",12,null],[13,"ControlRequest","","",12,null],[4,"SHResults","","Messages that come from stronghold",null,null],[13,"ReturnWriteStore","","",21,null],[13,"ReturnReadStore","","",21,null],[13,"ReturnDeleteStore","","",21,null],[13,"ReturnCreateVault","","",21,null],[13,"ReturnWriteVault","","",21,null],[13,"ReturnInitRecord","","",21,null],[13,"ReturnReadVault","","",21,null],[13,"ReturnRevoke","","",21,null],[13,"ReturnGarbage","","",21,null],[13,"ReturnList","","",21,null],[13,"ReturnFillSnap","","",21,null],[13,"ReturnWriteSnap","","",21,null],[13,"ReturnReadSnap","","",21,null],[13,"ReturnClearCache","","",21,null],[13,"ReturnControlRequest","","",21,null],[13,"ReturnExistsVault","","",21,null],[13,"ReturnExistsRecord","","",21,null],[0,"internal","iota_stronghold::actors","",null,null],[3,"InternalActor","iota_stronghold::actors::internal","",null,null],[12,"client_id","","",22,null],[12,"bucket","","",22,null],[12,"keystore","","",22,null],[4,"InternalMsg","","Messages used for the KeyStore Actor.",null,null],[13,"CreateVault","","",23,null],[13,"WriteToVault","","",23,null],[13,"InitRecord","","",23,null],[13,"RevokeData","","",23,null],[13,"GarbageCollect","","",23,null],[13,"ListIds","","",23,null],[13,"ReadSnapshot","","",23,null],[13,"ReloadData","","",23,null],[13,"ClearCache","","",23,null],[13,"KillInternal","","",23,null],[13,"FillSnapshot","","",23,null],[12,"data","iota_stronghold::actors::internal::InternalMsg","",24,null],[12,"id","","",24,null],[13,"SLIP10Generate","iota_stronghold::actors::internal","",23,null],[12,"vault_id","iota_stronghold::actors::internal::InternalMsg","",25,null],[12,"record_id","","",25,null],[12,"hint","","",25,null],[12,"size_bytes","","",25,null],[13,"SLIP10DeriveFromSeed","iota_stronghold::actors::internal","",23,null],[12,"chain","iota_stronghold::actors::internal::InternalMsg","",26,null],[12,"seed_vault_id","","",26,null],[12,"seed_record_id","","",26,null],[12,"key_vault_id","","",26,null],[12,"key_record_id","","",26,null],[12,"hint","","",26,null],[13,"SLIP10DeriveFromKey","iota_stronghold::actors::internal","",23,null],[12,"chain","iota_stronghold::actors::internal::InternalMsg","",27,null],[12,"parent_vault_id","","",27,null],[12,"parent_record_id","","",27,null],[12,"child_vault_id","","",27,null],[12,"child_record_id","","",27,null],[12,"hint","","",27,null],[13,"BIP39Generate","iota_stronghold::actors::internal","",23,null],[12,"passphrase","iota_stronghold::actors::internal::InternalMsg","",28,null],[12,"vault_id","","",28,null],[12,"record_id","","",28,null],[12,"hint","","",28,null],[13,"BIP39Recover","iota_stronghold::actors::internal","",23,null],[12,"mnemonic","iota_stronghold::actors::internal::InternalMsg","",29,null],[12,"passphrase","","",29,null],[12,"vault_id","","",29,null],[12,"record_id","","",29,null],[12,"hint","","",29,null],[13,"Ed25519PublicKey","iota_stronghold::actors::internal","",23,null],[12,"vault_id","iota_stronghold::actors::internal::InternalMsg","",30,null],[12,"record_id","","",30,null],[13,"Ed25519Sign","iota_stronghold::actors::internal","",23,null],[12,"vault_id","iota_stronghold::actors::internal::InternalMsg","",31,null],[12,"record_id","","",31,null],[12,"msg","","",31,null],[4,"InternalResults","iota_stronghold::actors::internal","Messages used internally by the client.",null,null],[13,"ReturnCreateVault","","",32,null],[13,"ReturnWriteVault","","",32,null],[13,"ReturnInitRecord","","",32,null],[13,"ReturnReadVault","","",32,null],[13,"ReturnRevoke","","",32,null],[13,"ReturnGarbage","","",32,null],[13,"ReturnList","","",32,null],[13,"ReturnWriteSnap","","",32,null],[13,"ReturnControlRequest","","",32,null],[13,"RebuildCache","","",32,null],[13,"ReturnClearCache","","",32,null],[0,"snapshot","iota_stronghold::actors","",null,null],[4,"SMsg","iota_stronghold::actors::snapshot","Messages used for the Snapshot Actor.",null,null],[13,"WriteSnapshot","","",33,null],[12,"key","iota_stronghold::actors::snapshot::SMsg","",34,null],[12,"filename","","",34,null],[12,"path","","",34,null],[13,"FillSnapshot","iota_stronghold::actors::snapshot","",33,null],[12,"data","iota_stronghold::actors::snapshot::SMsg","",35,null],[12,"id","","",35,null],[13,"ReadFromSnapshot","iota_stronghold::actors::snapshot","",33,null],[12,"key","iota_stronghold::actors::snapshot::SMsg","",36,null],[12,"filename","","",36,null],[12,"path","","",36,null],[12,"id","","",36,null],[12,"fid","","",36,null],[0,"interface","iota_stronghold","",null,null],[3,"Stronghold","iota_stronghold::interface","",null,null],[12,"system","","",37,null],[12,"client_ids","","",37,null],[12,"actors","","",37,null],[12,"derive_data","","",37,null],[12,"current_target","","",37,null],[11,"init_stronghold_system","","Initializes a new instance of the system.  Sets up the …",37,[[["vec",3],["vec",3],["actorsystem",3],["strongholdflags",4]]]],[11,"spawn_stronghold_actor","","Spawns a new set of actors for the Stronghold system. …",37,[[["vec",3],["vec",3],["strongholdflags",4]]]],[11,"switch_actor_target","","Switches the actor target to another actor in the system …",37,[[["vec",3]]]],[11,"write_to_vault","","Writes data into the Stronghold. Uses the current target …",37,[[["vec",3],["vec",3],["vaultflags",4],["recordhint",3],["location",4]]]],[11,"write_to_store","","Writes data into an insecure cache.  This method, accepts …",37,[[["vec",3],["option",4],["duration",3],["location",4]]]],[11,"read_from_store","","A method that reads from an insecure cache.  This method, …",37,[[["location",4]]]],[11,"delete_from_store","","A method to delete data from an insecure cache. This …",37,[[["location",4]]]],[11,"delete_data","","Revokes the data from the specified location of type …",37,[[["location",4]]]],[11,"garbage_collect","","Garbage collects any revokes in a Vault based on the …",37,[[["vec",3]]]],[11,"list_hints_and_ids","","Returns a list of the available records and their …",37,[[["into",8],["vec",3]]]],[11,"runtime_exec","","Executes a runtime command given a <code>Procedure</code>.  Returns a …",37,[[["procedure",4]]]],[11,"read_snapshot","","Reads data from a given snapshot file.  Can only read the …",37,[[["vec",3],["option",4],["option",4],["string",3],["option",4],["pathbuf",3]]]],[11,"write_all_to_snapshot","","Writes the entire state of the <code>Stronghold</code> into a …",37,[[["option",4],["string",3],["option",4],["pathbuf",3]]]],[11,"kill_stronghold","","Used to kill a stronghold actor or clear the cache of the …",37,[[["vec",3]]]],[11,"check_config_flags","","Unimplemented until Policies are implemented.",37,[[]]],[0,"internals","iota_stronghold","",null,null],[0,"provider","iota_stronghold::internals","",null,null],[3,"Provider","iota_stronghold::internals::provider","",null,null],[18,"NONCE_LEN","","",38,null],[18,"TAG_LEN","","",38,null],[0,"state","iota_stronghold","",null,null],[0,"bucket","iota_stronghold::state","",null,null],[6,"Store","iota_stronghold::state::bucket","",null,null],[3,"Bucket","","A <code>Bucket</code> cache of the Data for stronghold. Contains a …",null,null],[12,"cache","","",39,null],[11,"new","","Creates a new <code>Bucket</code>.",39,[[]]],[11,"create_and_init_vault","","Creates and initializes a new Vault given a <code>Key<P></code>.  …",39,[[["boxprovider",8],["key",3],["recordid",3],["vaultid",3]],["recordid",3]]],[11,"read_data","","Reads data from a Record in the Vault given a <code>RecordId</code>.  …",39,[[["boxprovider",8],["key",3],["recordid",3],["vaultid",3]],["vec",3]]],[11,"record_exists_in_vault","","",39,[[["boxprovider",8],["key",3],["recordid",3],["vaultid",3]]]],[11,"init_record","","Initializes a new Record in the Vault based on the …",39,[[["boxprovider",8],["key",3],["recordid",3],["vaultid",3]],["recordid",3]]],[11,"write_payload","","Writes a payload of <code>Vec<u8></code> and a <code>RecordHint</code> into a …",39,[[["vec",3],["boxprovider",8],["key",3],["recordid",3],["vaultid",3],["recordhint",3]]]],[11,"revoke_data","","Marks a record for deletion based on a given <code>Key<P></code> and …",39,[[["boxprovider",8],["key",3],["recordid",3],["vaultid",3]]]],[11,"garbage_collect","","Garbage Collects any deletion marked Records in the given …",39,[[["boxprovider",8],["vaultid",3],["key",3]]]],[11,"list_ids","","Lists the <code>RecordId</code>s and <code>RecordHint</code>s for a given Vault.  …",39,[[["boxprovider",8],["vaultid",3],["key",3]],["vec",3]]],[11,"repopulate_data","","Repopulates the data in the Bucket given a Vec of state …",39,[[["vec",3],["hashmap",3],["vaultid",3]]]],[11,"get_data","","",39,[[],[["vec",3],["hashmap",3],["vaultid",3]]]],[11,"clear_cache","","",39,[[]]],[11,"take","","Exposes the <code>DBView</code> of the current vault and the cache …",39,[[["boxprovider",8],["vaultid",3],["key",3]]]],[11,"get_reads","","",39,[[["vaultid",3]],[["vec",3],["readresult",3]]]],[11,"insert_reads","","",39,[[["vec",3],["readresult",3],["vaultid",3]]]],[5,"write_to_read","","",null,[[["writerequest",3]],["readresult",3]]],[0,"client","iota_stronghold::state","",null,null],[6,"Store","iota_stronghold::state::client","",null,null],[4,"ReadWrite","","",null,null],[13,"Read","","",40,null],[13,"Write","","",40,null],[3,"Client","","A <code>Client</code> Cache Actor which routes external messages to …",null,null],[12,"client_id","","",41,null],[12,"vaults","","",41,null],[12,"heads","","",41,null],[12,"counters","","",41,null],[12,"store","","",41,null],[4,"ClientMsg","","",null,null],[13,"SHResults","","",42,null],[13,"SHRequest","","",42,null],[13,"InternalResults","","",42,null],[11,"new","","Creates a new Client given a <code>ClientID</code> and …",41,[[["clientid",3]]]],[11,"write_to_store","","Write unencrypted data to the store.  Returns <code>None</code> if the …",41,[[["vec",3],["duration",3],["option",4]],[["option",4],["vec",3]]]],[11,"read_from_store","","Attempts to read the data from the store.  Returns …",41,[[["vec",3]],[["option",4],["vec",3]]]],[11,"store_delete_item","","Deletes an item from the store by the given key.",41,[[["vec",3]]]],[11,"store_key_exists","","Checks to see if the key exists in the store.",41,[[["vec",3]]]],[11,"set_client_id","","",41,[[["clientid",3]]]],[11,"add_new_vault","","",41,[[["vaultid",3]]]],[11,"add_record_to_vault","","",41,[[["vaultid",3],["recordid",3]]]],[11,"increment_counter","","",41,[[["vaultid",3]]]],[11,"get_head","","Get the head of a vault.",41,[[["vec",3]],["recordid",3]]],[11,"clear_cache","","Empty the Client Cache.",41,[[],["option",4]]],[11,"rebuild_cache","","",41,[[["client",3]]]],[11,"resolve_location","","",41,[[["asref",8],["readwrite",4],["location",4]]]],[11,"derive_vault_id","","",41,[[["vec",3],["asref",8]],["vaultid",3]]],[11,"derive_record_id","","",41,[[["vec",3],["asref",8]],["recordid",3]]],[11,"get_client_str","","",41,[[],["string",3]]],[11,"record_exists_in_vault","","",41,[[["vaultid",3],["recordid",3]]]],[11,"vault_exist","","",41,[[["vaultid",3]]]],[11,"get_index_from_record_id","","",41,[[["vec",3],["asref",8],["recordid",3]]]],[11,"get_index","","",41,[[["vaultid",3]],["option",4]]],[11,"get_counter","","",41,[[["vaultid",3]]]],[0,"key_store","iota_stronghold::state","",null,null],[3,"KeyStore","iota_stronghold::state::key_store","",null,null],[12,"store","","",43,null],[11,"new","","Creates a new <code>KeyStore</code>.",43,[[]]],[11,"get_key","","Gets the key from the <code>KeyStore</code> and removes it.  Returns …",43,[[["vaultid",3]],[["option",4],["key",3]]]],[11,"vault_exists","","",43,[[["vaultid",3]]]],[11,"create_key","","Returns an existing key for the <code>id</code> or creates one.",43,[[["vaultid",3]],["key",3]]],[11,"insert_key","","Inserts a key into the <code>KeyStore</code> by <code>VaultId</code>.  If the …",43,[[["vaultid",3],["key",3]],["key",3]]],[11,"rebuild_keystore","","Rebuilds the <code>KeyStore</code> while throwing out any existing …",43,[[["vaultid",3],["hashmap",3],["key",3]]]],[11,"get_data","","",43,[[],[["key",3],["hashmap",3],["vaultid",3]]]],[11,"clear_keys","","",43,[[]]],[0,"snapshot","iota_stronghold::state","",null,null],[3,"Snapshot","iota_stronghold::state::snapshot","",null,null],[12,"state","","",44,null],[3,"SnapshotState","","",null,null],[12,"0","","",45,null],[11,"new","","Creates a new <code>Snapshot</code> from a buffer of <code>Vec<u8></code> state.",44,[[["snapshotstate",3]]]],[11,"get_state","","",44,[[["clientid",3]]]],[11,"has_data","","",44,[[["clientid",3]]]],[11,"read_from_snapshot","","Reads state from the specified named snapshot or the …",44,[[["option",4],["path",3],["option",4],["key",6]],["result",6]]],[11,"write_to_snapshot","","Writes state to the specified named snapshot or the …",44,[[["option",4],["path",3],["option",4],["key",6]],["result",6]]],[11,"new","","",45,[[["clientid",3]]]],[11,"add_data","","",45,[[["clientid",3]]]],[11,"serialize","","",45,[[],["vec",3]]],[11,"deserialize","","",45,[[["vec",3]]]],[0,"utils","iota_stronghold","",null,null],[0,"ids","iota_stronghold::utils","",null,null],[3,"ClientId","iota_stronghold::utils::ids","TODO: Implement Messages to interact with Stronghold …",null,null],[12,"0","","",46,null],[3,"VaultId","","",null,null],[12,"0","","",47,null],[3,"ID","","",null,null],[12,"0","","",48,null],[8,"LoadFromPath","","",null,null],[10,"load_from_path","","",49,[[],["result",6]]],[11,"random","","",48,[[],["result",6]]],[11,"load","","",48,[[],["result",6]]],[11,"random","","",47,[[],["result",6]]],[11,"load","","",47,[[],["result",6]]],[11,"random","","",46,[[],["result",6]]],[11,"load","","",46,[[],["result",6]]],[0,"types","iota_stronghold::utils","",null,null],[6,"StatusMessage","iota_stronghold::utils::types","A type alias for the empty <code>ResultMessage<()></code> type.",null,null],[4,"ResultMessage","","Return value used for Actor Messages.  Can specify an …",null,null],[13,"Ok","","",50,null],[13,"Error","","",50,null],[18,"OK","","",50,null],[4,"Location","","A <code>Location</code> type used to specify where in the <code>Stronghold</code> a …",null,null],[13,"Generic","","",51,null],[12,"vault_path","iota_stronghold::utils::types::Location","",52,null],[12,"record_path","","",52,null],[13,"Counter","iota_stronghold::utils::types","",51,null],[12,"vault_path","iota_stronghold::utils::types::Location","",53,null],[12,"counter","","",53,null],[11,"vault_path","iota_stronghold::utils::types","Gets the vault_path from the Location.",51,[[]]],[11,"generic","","Creates a generic location from types that implement …",51,[[["into",8],["vec",3]]]],[11,"counter","","Creates a counter location from a type that implements …",51,[[["vec",3],["option",4],["into",8],["into",8]]]],[11,"const_generic","","Used to generate a constant generic location.",51,[[["vec",3]]]],[11,"const_counter","","used to generate a constant counter location.",51,[[["vec",3],["option",4]]]],[4,"StrongholdFlags","","Policy options for modifying an entire Stronghold.  Must …",null,null],[13,"IsReadable","","",54,null],[4,"VaultFlags","","Policy options for for a specific vault.  Must be …",null,null],[5,"index_of_unchecked","iota_stronghold::utils","",null,[[]]],[4,"ProcResult","iota_stronghold","A Procedure return result type.  Contains the different …",null,null],[13,"SLIP10Generate","","Return from generating a <code>SLIP10</code> seed.",10,null],[13,"SLIP10Derive","","Returns the public key derived from the <code>SLIP10Derive</code> call.",10,null],[13,"BIP39Recover","","<code>BIP39Recover</code> return value.",10,null],[13,"BIP39Generate","","<code>BIP39Generate</code> return value.",10,null],[13,"BIP39MnemonicSentence","","<code>BIP39MnemonicSentence</code> return value. Returns the mnemonic …",10,null],[13,"Ed25519PublicKey","","Return value for <code>Ed25519PublicKey</code>. Returns an Ed25519 …",10,null],[13,"Ed25519Sign","","Return value for <code>Ed25519Sign</code>. Returns an Ed25519 …",10,null],[13,"Error","","Generic Error return message.",10,null],[4,"Procedure","","Procedure type used to call to the runtime via …",null,null],[13,"SLIP10Generate","","Generate a raw SLIP10 seed of the specified size (in …",2,null],[12,"output","iota_stronghold::Procedure","",3,null],[12,"hint","","",3,null],[12,"size_bytes","","",3,null],[13,"SLIP10Derive","iota_stronghold","Derive a SLIP10 child key from a seed or a parent key, …",2,null],[12,"chain","iota_stronghold::Procedure","",4,null],[12,"input","","",4,null],[12,"output","","",4,null],[12,"hint","","",4,null],[13,"BIP39Recover","iota_stronghold","Use a BIP39 mnemonic sentence (optionally protected by a …",2,null],[12,"mnemonic","iota_stronghold::Procedure","",5,null],[12,"passphrase","","",5,null],[12,"output","","",5,null],[12,"hint","","",5,null],[13,"BIP39Generate","iota_stronghold","Generate a BIP39 seed and its corresponding mnemonic …",2,null],[12,"passphrase","iota_stronghold::Procedure","",6,null],[12,"output","","",6,null],[12,"hint","","",6,null],[13,"BIP39MnemonicSentence","iota_stronghold","Read a BIP39 seed and its corresponding mnemonic sentence …",2,null],[12,"seed","iota_stronghold::Procedure","",7,null],[13,"Ed25519PublicKey","iota_stronghold","Derive an Ed25519 public key from the corresponding …",2,null],[12,"private_key","iota_stronghold::Procedure","",8,null],[13,"Ed25519Sign","iota_stronghold","Use the specified Ed25519 compatible key to sign the …",2,null],[12,"private_key","iota_stronghold::Procedure","",9,null],[12,"msg","","",9,null],[4,"SLIP10DeriveInput","iota_stronghold","<code>SLIP10DeriveInput</code> type used to specify a Seed location or …",null,null],[13,"Seed","","Note that BIP39 seeds are allowed to be used as SLIP10 …",1,null],[13,"Key","","",1,null],[3,"Stronghold","","",null,null],[12,"system","","",37,null],[12,"client_ids","","",37,null],[12,"actors","","",37,null],[12,"derive_data","","",37,null],[12,"current_target","","",37,null],[3,"Provider","","",null,null],[4,"Location","","A <code>Location</code> type used to specify where in the <code>Stronghold</code> a …",null,null],[13,"Generic","","",51,null],[12,"vault_path","iota_stronghold::Location","",52,null],[12,"record_path","","",52,null],[13,"Counter","iota_stronghold","",51,null],[12,"vault_path","iota_stronghold::Location","",53,null],[12,"counter","","",53,null],[4,"ResultMessage","iota_stronghold","Return value used for Actor Messages.  Can specify an …",null,null],[13,"Ok","","",50,null],[13,"Error","","",50,null],[6,"StatusMessage","","A type alias for the empty <code>ResultMessage<()></code> type.",null,null],[4,"StrongholdFlags","","Policy options for modifying an entire Stronghold.  Must …",null,null],[13,"IsReadable","","",54,null],[4,"VaultFlags","","Policy options for for a specific vault.  Must be …",null,null],[6,"Result","","",null,null],[4,"Error","","",null,null],[13,"IDError","","",55,null],[13,"VaultError","","",55,null],[13,"SnapshotError","","",55,null],[14,"line_error","","TODO: Should be replaced with proper errors.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"encode_hex","","",0,[[]]],[11,"encode_hex_upper","","",0,[[]]],[11,"base64","","",0,[[],["string",3]]],[11,"vzip","","",0,[[]]],[11,"from","iota_stronghold::actors::client","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","iota_stronghold::actors::internal","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","iota_stronghold::actors::snapshot","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","iota_stronghold::interface","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","iota_stronghold::internals::provider","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","iota_stronghold::state::bucket","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","iota_stronghold::state::client","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","iota_stronghold::state::key_store","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","iota_stronghold::state::snapshot","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","iota_stronghold::utils::ids","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"encode_hex","","",46,[[]]],[11,"encode_hex_upper","","",46,[[]]],[11,"base64","","",46,[[],["string",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"encode_hex","","",47,[[]]],[11,"encode_hex_upper","","",47,[[]]],[11,"base64","","",47,[[],["string",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"encode_hex","","",48,[[]]],[11,"encode_hex_upper","","",48,[[]]],[11,"base64","","",48,[[],["string",3]]],[11,"vzip","","",48,[[]]],[11,"from","iota_stronghold::utils::types","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from","iota_stronghold","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_string","","",55,[[],["string",3]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"partial_cmp","","",0,[[["recordhint",3]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["recordhint",3]]]],[11,"le","","",0,[[["recordhint",3]]]],[11,"gt","","",0,[[["recordhint",3]]]],[11,"ge","","",0,[[["recordhint",3]]]],[11,"as_ref","","",0,[[]]],[11,"cmp","","",0,[[["recordhint",3]],["ordering",4]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"deserialize","","",0,[[],[["result",4],["recordhint",3]]]],[11,"from","","",0,[[],["recordhint",3]]],[11,"hash","","",0,[[]]],[11,"clone","","",0,[[],["recordhint",3]]],[11,"eq","","",0,[[["recordhint",3]]]],[11,"ne","","",0,[[["recordhint",3]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"load_from_path","iota_stronghold::utils::ids","",48,[[],["result",6]]],[11,"load_from_path","","",47,[[],["result",6]]],[11,"load_from_path","","",46,[[],["result",6]]],[11,"as_ref","","",48,[[]]],[11,"as_ref","","",47,[[]]],[11,"as_ref","","",46,[[]]],[11,"as_ref","iota_stronghold::utils::types","",51,[[],["location",4]]],[11,"from","iota_stronghold::actors::client","",11,[[["procresult",4]]]],[11,"from","iota_stronghold::utils::types","",50,[[["result",4],["string",3]]]],[11,"from","iota_stronghold","",55,[[["error",4]]]],[11,"from","","",55,[[["error",4]]]],[11,"into","iota_stronghold::actors::client","",21,[[],["clientmsg",4]]],[11,"into","","",12,[[],["clientmsg",4]]],[11,"into","iota_stronghold::actors::internal","",32,[[],["clientmsg",4]]],[11,"into","iota_stronghold::utils::ids","",47,[[],["vec",3]]],[11,"into","","",46,[[],["vec",3]]],[11,"into","","",46,[[],["string",3]]],[11,"into","","",47,[[],["string",3]]],[11,"clone","iota_stronghold::actors::client","",1,[[],["slip10deriveinput",4]]],[11,"clone","","",2,[[],["procedure",4]]],[11,"clone","","",10,[[],["procresult",4]]],[11,"clone","","",11,[[],["serdeprocresult",4]]],[11,"clone","","",12,[[],["shrequest",4]]],[11,"clone","","",21,[[],["shresults",4]]],[11,"clone","iota_stronghold::actors::internal","",23,[[],["internalmsg",4]]],[11,"clone","","",32,[[],["internalresults",4]]],[11,"clone","iota_stronghold::actors::snapshot","",33,[[],["smsg",4]]],[11,"clone","iota_stronghold::internals::provider","",38,[[],["provider",3]]],[11,"clone","iota_stronghold::state::client","",41,[[],["client",3]]],[11,"clone","","",42,[[],["clientmsg",4]]],[11,"clone","iota_stronghold::state::snapshot","",44,[[],["snapshot",3]]],[11,"clone","","",45,[[],["snapshotstate",3]]],[11,"clone","iota_stronghold::utils::ids","",46,[[],["clientid",3]]],[11,"clone","","",47,[[],["vaultid",3]]],[11,"clone","","",48,[[],["id",3]]],[11,"clone","iota_stronghold::utils::types","",50,[[],["resultmessage",4]]],[11,"clone","","",51,[[],["location",4]]],[11,"clone","","",54,[[],["strongholdflags",4]]],[11,"clone","","",56,[[],["vaultflags",4]]],[11,"default","iota_stronghold::state::snapshot","",45,[[],["snapshotstate",3]]],[11,"default","iota_stronghold::utils::ids","",46,[[],["clientid",3]]],[11,"default","","",48,[[],["id",3]]],[11,"cmp","iota_stronghold::internals::provider","",38,[[["provider",3]],["ordering",4]]],[11,"cmp","iota_stronghold::utils::ids","",46,[[["clientid",3]],["ordering",4]]],[11,"cmp","","",47,[[["vaultid",3]],["ordering",4]]],[11,"cmp","","",48,[[["id",3]],["ordering",4]]],[11,"eq","iota_stronghold::internals::provider","",38,[[["provider",3]]]],[11,"eq","iota_stronghold::utils::ids","",46,[[["clientid",3]]]],[11,"ne","","",46,[[["clientid",3]]]],[11,"eq","","",47,[[["vaultid",3]]]],[11,"ne","","",47,[[["vaultid",3]]]],[11,"eq","","",48,[[["id",3]]]],[11,"ne","","",48,[[["id",3]]]],[11,"eq","iota_stronghold::utils::types","",50,[[["resultmessage",4]]]],[11,"ne","","",50,[[["resultmessage",4]]]],[11,"partial_cmp","iota_stronghold::internals::provider","",38,[[["provider",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","iota_stronghold::utils::ids","",46,[[["clientid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",46,[[["clientid",3]]]],[11,"le","","",46,[[["clientid",3]]]],[11,"gt","","",46,[[["clientid",3]]]],[11,"ge","","",46,[[["clientid",3]]]],[11,"partial_cmp","","",47,[[["vaultid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",47,[[["vaultid",3]]]],[11,"le","","",47,[[["vaultid",3]]]],[11,"gt","","",47,[[["vaultid",3]]]],[11,"ge","","",47,[[["vaultid",3]]]],[11,"partial_cmp","","",48,[[["id",3]],[["option",4],["ordering",4]]]],[11,"lt","","",48,[[["id",3]]]],[11,"le","","",48,[[["id",3]]]],[11,"gt","","",48,[[["id",3]]]],[11,"ge","","",48,[[["id",3]]]],[11,"fmt","iota_stronghold::actors::client","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::actors::internal","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::actors::snapshot","",33,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::state::client","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::state::snapshot","",45,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::utils::ids","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold::utils::types","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","iota_stronghold","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"hash","iota_stronghold::utils::ids","",46,[[]]],[11,"hash","","",47,[[]]],[11,"hash","","",48,[[]]],[11,"try_from","iota_stronghold::actors::client","",10,[[["serdeprocresult",4]],[["result",4],["tryfromsliceerror",3]]]],[11,"try_from","iota_stronghold::utils::ids","",48,[[],["result",4]]],[11,"try_from","","",48,[[["vec",3]],["result",4]]],[11,"try_from","","",46,[[["vec",3]],["result",4]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_from","","",47,[[["vec",3]],["result",4]]],[11,"try_from","","",47,[[],["result",4]]],[11,"source","iota_stronghold","",55,[[],[["error",8],["option",4]]]],[11,"deserialize","iota_stronghold::actors::client","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","iota_stronghold::state::client","",41,[[],["result",4]]],[11,"deserialize","iota_stronghold::state::snapshot","",45,[[],["result",4]]],[11,"deserialize","iota_stronghold::utils::ids","",46,[[],["result",4]]],[11,"deserialize","","",47,[[],["result",4]]],[11,"deserialize","","",48,[[],["result",4]]],[11,"deserialize","iota_stronghold::utils::types","",50,[[],["result",4]]],[11,"deserialize","","",51,[[],["result",4]]],[11,"serialize","iota_stronghold::actors::client","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","iota_stronghold::state::client","",41,[[],["result",4]]],[11,"serialize","iota_stronghold::state::snapshot","",45,[[],["result",4]]],[11,"serialize","iota_stronghold::utils::ids","",46,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"serialize","","",48,[[],["result",4]]],[11,"serialize","iota_stronghold::utils::types","",50,[[],["result",4]]],[11,"serialize","","",51,[[],["result",4]]],[11,"box_key_len","iota_stronghold::internals::provider","",38,[[]]],[11,"box_overhead","","",38,[[]]],[11,"box_seal","","",38,[[["key",3]],[["vec",3],["result",6]]]],[11,"box_open","","",38,[[["key",3]],[["vec",3],["result",6]]]],[11,"random_buf","","",38,[[],["result",6]]],[11,"create","iota_stronghold::state::snapshot","",44,[[]]],[11,"create_args","iota_stronghold::state::client","",41,[[["clientid",3]]]],[11,"create_args","iota_stronghold::actors::internal","",22,[[["clientid",3]]]],[11,"recv","iota_stronghold::state::client","",41,[[["context",3],["sender",6]]]],[11,"recv","iota_stronghold::actors::internal","",22,[[["context",3],["sender",6]]]],[11,"recv","iota_stronghold::state::snapshot","",44,[[["context",3],["sender",6]]]],[11,"receive","iota_stronghold::state::client","",41,[[["context",3],["sender",6],["shresults",4]]]],[11,"receive","","",41,[[["context",3],["shrequest",4],["sender",6]]]],[11,"receive","","",41,[[["internalresults",4],["context",3],["sender",6]]]],[11,"receive","iota_stronghold::actors::internal","",22,[[["context",3],["sender",6]]]],[11,"receive","iota_stronghold::state::snapshot","",44,[[["context",3],["sender",6]]]],[11,"receive","iota_stronghold::state::client","",41,[[["option",4],["clientmsg",4],["basicactorref",3],["context",3]]]],[11,"new","iota_stronghold","create a new random Id for hint",0,[[],[["error",4],["result",4],["recordhint",3]]]]],"p":[[3,"RecordHint"],[4,"SLIP10DeriveInput"],[4,"Procedure"],[13,"SLIP10Generate"],[13,"SLIP10Derive"],[13,"BIP39Recover"],[13,"BIP39Generate"],[13,"BIP39MnemonicSentence"],[13,"Ed25519PublicKey"],[13,"Ed25519Sign"],[4,"ProcResult"],[4,"SerdeProcResult"],[4,"SHRequest"],[13,"CheckRecord"],[13,"WriteToStore"],[13,"ReadFromStore"],[13,"WriteToVault"],[13,"InitRecord"],[13,"RevokeData"],[13,"ReadSnapshot"],[13,"WriteSnapshot"],[4,"SHResults"],[3,"InternalActor"],[4,"InternalMsg"],[13,"FillSnapshot"],[13,"SLIP10Generate"],[13,"SLIP10DeriveFromSeed"],[13,"SLIP10DeriveFromKey"],[13,"BIP39Generate"],[13,"BIP39Recover"],[13,"Ed25519PublicKey"],[13,"Ed25519Sign"],[4,"InternalResults"],[4,"SMsg"],[13,"WriteSnapshot"],[13,"FillSnapshot"],[13,"ReadFromSnapshot"],[3,"Stronghold"],[3,"Provider"],[3,"Bucket"],[4,"ReadWrite"],[3,"Client"],[4,"ClientMsg"],[3,"KeyStore"],[3,"Snapshot"],[3,"SnapshotState"],[3,"ClientId"],[3,"VaultId"],[3,"ID"],[8,"LoadFromPath"],[4,"ResultMessage"],[4,"Location"],[13,"Generic"],[13,"Counter"],[4,"StrongholdFlags"],[4,"Error"],[4,"VaultFlags"]]},\
"runtime":{"doc":"Stronghold Protected-access Memory Runtime.","i":[[0,"boxed","runtime","",null,null],[4,"Prot","runtime::boxed","",null,null],[13,"NoAccess","","",0,null],[13,"ReadOnly","","",0,null],[13,"ReadWrite","","",0,null],[6,"RefCount","","",null,null],[3,"Boxed","","A protected piece of memory.",null,null],[12,"ptr","","",1,null],[12,"len","","",1,null],[12,"prot","","",1,null],[12,"refs","","",1,null],[11,"new","","",1,[[]]],[11,"try_new","","",1,[[],["result",4]]],[11,"len","","",1,[[]]],[11,"is_empty","","",1,[[]]],[11,"size","","",1,[[]]],[11,"unlock","","",1,[[]]],[11,"unlock_mut","","",1,[[]]],[11,"lock","","",1,[[]]],[11,"as_ref","","",1,[[]]],[11,"as_mut","","",1,[[]]],[11,"as_slice","","",1,[[]]],[11,"as_mut_slice","","",1,[[]]],[11,"new_unlocked","","",1,[[]]],[11,"retain","","",1,[[["prot",4]]]],[11,"release","","",1,[[]]],[11,"is_locked","","",1,[[]]],[11,"random","","",1,[[]]],[11,"zero","","",1,[[]]],[5,"mprotect","","",null,[[["prot",4]]]],[5,"free","","",null,[[]]],[5,"lock_memory","","",null,[[]]],[0,"guarded","runtime","",null,null],[3,"Guarded","runtime::guarded","A guarded type for protecting fixed-length secrets …",null,null],[12,"boxed","","",2,null],[3,"Ref","","",null,null],[12,"boxed","","",3,null],[3,"RefMut","","",null,null],[12,"boxed","","",4,null],[11,"new","","",2,[[]]],[11,"try_new","","",2,[[],["result",4]]],[11,"size","","",2,[[]]],[11,"borrow","","",2,[[],["ref",3]]],[11,"borrow_mut","","",2,[[],["refmut",3]]],[11,"new","","",3,[[["boxed",3]]]],[11,"new","","",4,[[["boxed",3]]]],[11,"random","","",2,[[]]],[11,"zero","","",2,[[]]],[0,"guarded_vec","runtime","",null,null],[3,"GuardedVec","runtime::guarded_vec","A guarded type for protecting variable-length secrets …",null,null],[12,"boxed","","",5,null],[3,"Ref","","",null,null],[12,"boxed","","",6,null],[3,"RefMut","","",null,null],[12,"boxed","","",7,null],[11,"new","","",5,[[]]],[11,"try_new","","",5,[[],["result",4]]],[11,"len","","",5,[[]]],[11,"is_empty","","",5,[[]]],[11,"size","","",5,[[]]],[11,"borrow","","",5,[[],["ref",3]]],[11,"borrow_mut","","",5,[[],["refmut",3]]],[11,"random","","",5,[[]]],[11,"zero","","",5,[[]]],[11,"new","","",6,[[["boxed",3]]]],[11,"new","","",7,[[["boxed",3]]]],[3,"GuardedVecVisitor","","",null,null],[12,"marker","","",8,null],[11,"new","","",8,[[]]],[0,"types","runtime","",null,null],[0,"bytes","runtime::types","",null,null],[17,"GARBAGE_VALUE","runtime::types::bytes","",null,null],[8,"Bytes","","",null,null],[11,"uninitialized","","",9,[[]]],[11,"size","","",9,[[]]],[11,"as_u8_ptr","","",9,[[]]],[11,"as_mut_u8_ptr","","",9,[[]]],[8,"ContiguousBytes","","",null,null],[10,"size","","",10,[[]]],[10,"as_u8_ptr","","",10,[[]]],[10,"as_mut_u8_ptr","","",10,[[]]],[11,"as_bytes","","",10,[[]]],[11,"as_mut_bytes","","",10,[[]]],[0,"const_eq","runtime::types","",null,null],[8,"ConstEq","runtime::types::const_eq","",null,null],[11,"const_eq","","",11,[[]]],[0,"rand","runtime::types","",null,null],[8,"Randomized","runtime::types::rand","",null,null],[11,"randomize","","",12,[[]]],[0,"zero","runtime::types","",null,null],[8,"Zeroed","runtime::types::zero","",null,null],[11,"zero","","",13,[[]]],[11,"copy_and_zero","","",13,[[]]],[3,"Guarded","runtime","A guarded type for protecting fixed-length secrets …",null,null],[12,"boxed","","",2,null],[3,"GuardedVec","","A guarded type for protecting variable-length secrets …",null,null],[12,"boxed","","",5,null],[8,"Bytes","","",null,null],[11,"uninitialized","runtime::types::bytes","",9,[[]]],[11,"size","","",9,[[]]],[11,"as_u8_ptr","","",9,[[]]],[11,"as_mut_u8_ptr","","",9,[[]]],[11,"from","runtime::boxed","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","runtime::guarded","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","runtime::guarded_vec","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"fmt","","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"deref","runtime::guarded","",3,[[]]],[11,"deref","","",4,[[]]],[11,"deref","runtime::guarded_vec","",6,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","runtime::guarded","",4,[[]]],[11,"deref_mut","runtime::guarded_vec","",7,[[]]],[11,"from","runtime::boxed","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","runtime::guarded","",2,[[]]],[11,"from","runtime::guarded_vec","",5,[[]]],[11,"fmt","runtime::boxed","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","runtime::guarded","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","runtime::guarded_vec","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"eq","runtime::boxed","",0,[[["prot",4]]]],[11,"eq","","",1,[[]]],[11,"eq","runtime::guarded","",3,[[]]],[11,"eq","","",3,[[["refmut",3]]]],[11,"eq","","",2,[[]]],[11,"eq","","",4,[[]]],[11,"eq","","",4,[[["ref",3]]]],[11,"eq","runtime::guarded_vec","",5,[[]]],[11,"eq","","",6,[[]]],[11,"eq","","",6,[[["refmut",3]]]],[11,"eq","","",7,[[]]],[11,"eq","","",7,[[["ref",3]]]],[11,"drop","runtime::boxed","",1,[[]]],[11,"drop","runtime::guarded","",3,[[]]],[11,"drop","","",4,[[]]],[11,"drop","runtime::guarded_vec","",6,[[]]],[11,"drop","","",7,[[]]],[11,"clone","runtime::boxed","",0,[[],["prot",4]]],[11,"clone","","",1,[[]]],[11,"clone","runtime::guarded","",2,[[],["guarded",3]]],[11,"clone","","",3,[[]]],[11,"clone","runtime::guarded_vec","",5,[[],["guardedvec",3]]],[11,"clone","","",6,[[]]],[11,"expecting","","",8,[[["formatter",3]],["result",6]]],[11,"visit_seq","","",8,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]]],"p":[[4,"Prot"],[3,"Boxed"],[3,"Guarded"],[3,"Ref"],[3,"RefMut"],[3,"GuardedVec"],[3,"Ref"],[3,"RefMut"],[3,"GuardedVecVisitor"],[8,"Bytes"],[8,"ContiguousBytes"],[8,"ConstEq"],[8,"Randomized"],[8,"Zeroed"]]},\
"snapshot":{"doc":"This crate defines and implements the encrypted offline …","i":[[0,"compression","snapshot","",null,null],[0,"decoder","snapshot::compression","",null,null],[5,"decompress_into","snapshot::compression::decoder","",null,[[["vec",3]],["result",6]]],[5,"decompress","","",null,[[],[["result",6],["vec",3]]]],[3,"LZ4Decoder","","",null,null],[12,"input","","",0,null],[12,"output","","",0,null],[12,"token","","",0,null],[11,"take","","",0,[[],["result",6]]],[11,"take_internal","","",0,[[],["result",6]]],[11,"output","","",0,[[["vec",3]]]],[11,"duplicate","","",0,[[]]],[11,"read_int","","",0,[[],["result",6]]],[11,"read_u16","","",0,[[],["result",6]]],[11,"read_literal","","",0,[[],["result",6]]],[11,"read_duplicate","","",0,[[],["result",6]]],[11,"complete","","",0,[[],["result",6]]],[0,"encoder","snapshot::compression","",null,null],[17,"DICT_SIZE","snapshot::compression::encoder","",null,null],[5,"compress_into","","",null,[[["vec",3]]]],[5,"compress","","",null,[[],["vec",3]]],[3,"LZ4Encoder","","",null,null],[12,"input","","",1,null],[12,"output","","",1,null],[12,"cursor","","",1,null],[12,"dict","","",1,null],[11,"step_forward","","",1,[[]]],[11,"insert_cursor","","",1,[[]]],[11,"remaining","","",1,[[]]],[11,"get_cursor_hash","","",1,[[]]],[11,"get","","",1,[[]]],[11,"get_at_cursor","","",1,[[]]],[11,"find_duplicate","","",1,[[],[["option",4],["duplicate",3]]]],[11,"write_int","","",1,[[]]],[11,"pop_block","","",1,[[],["block",3]]],[11,"complete","","",1,[[]]],[3,"Block","snapshot::compression","",null,null],[12,"literal_length","","",2,null],[12,"duplicates","","",2,null],[3,"Duplicate","","",null,null],[12,"offset","","",3,null],[12,"padding","","",3,null],[0,"files","snapshot","",null,null],[5,"home_dir","snapshot::files","Get the preferred Stronghold home directory",null,[[],[["result",6],["pathbuf",3]]]],[5,"snapshot_dir","","Get the preferred snapshot directory",null,[[],[["result",6],["pathbuf",3]]]],[5,"verify_or_create","","",null,[[["path",3]],["result",6]]],[5,"get_path","","Construct the path to a snapshot file with the specifed …",null,[[["option",4]],[["result",6],["pathbuf",3]]]],[0,"kdf","snapshot","",null,null],[5,"naive_kdf","snapshot::kdf","",null,[[],["result",6]]],[5,"recommended_kdf","","derive a key from password and salt using the currently …",null,[[],["result",6]]],[0,"logic","snapshot","",null,null],[17,"MAGIC","snapshot::logic","Magic bytes (bytes 0-4 in a snapshot file)",null,null],[17,"VERSION","","Current version bytes (bytes 5-6 in a snapshot file)",null,null],[17,"KEY_SIZE","","",null,null],[6,"Key","","",null,null],[17,"NONCE_SIZE","","",null,null],[6,"Nonce","","",null,null],[5,"write","","Encrypt the opaque plaintext bytestring using the …",null,[[["key",6]],["result",6]]],[5,"read","","Read ciphertext from the input, decrypts it using the …",null,[[["key",6]],[["result",6],["vec",3]]]],[5,"write_to","","Atomically encrypt and <code>write</code> the specified plaintext to …",null,[[["path",3],["key",6]],["result",6]]],[5,"read_from","","<code>read</code> and decrypt the ciphertext from the specified path",null,[[["path",3],["key",6]],[["result",6],["vec",3]]]],[5,"check_min_file_len","","",null,[[["file",3]],["result",6]]],[5,"check_header","","",null,[[],["result",6]]],[5,"compress","snapshot","",null,[[],["vec",3]]],[5,"decompress","","",null,[[],[["result",6],["vec",3]]]],[17,"MAGIC","","Magic bytes (bytes 0-4 in a snapshot file)",null,null],[17,"VERSION","","Current version bytes (bytes 5-6 in a snapshot file)",null,null],[6,"Key","","",null,null],[6,"Nonce","","",null,null],[5,"write","","Encrypt the opaque plaintext bytestring using the …",null,[[["key",6]],["result",6]]],[5,"read","","Read ciphertext from the input, decrypts it using the …",null,[[["key",6]],[["result",6],["vec",3]]]],[5,"write_to","","Atomically encrypt and <code>write</code> the specified plaintext to …",null,[[["path",3],["key",6]],["result",6]]],[5,"read_from","","<code>read</code> and decrypt the ciphertext from the specified path",null,[[["path",3],["key",6]],[["result",6],["vec",3]]]],[4,"Error","","",null,null],[13,"IOError","","",4,null],[13,"SnapshotError","","",4,null],[13,"CryptoError","","",4,null],[13,"LZ4Error","","",4,null],[13,"TryIntoError","","",4,null],[6,"Result","","",null,null],[11,"from","snapshot::compression::decoder","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","snapshot::compression::encoder","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","snapshot::compression","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","snapshot","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",4,[[["error",3]]]],[11,"from","","",4,[[["tryfromsliceerror",3]]]],[11,"from","","",4,[[["error",4]]]],[11,"clone","snapshot::compression","",3,[[],["duplicate",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","snapshot","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"source","","",4,[[],[["option",4],["error",8]]]]],"p":[[3,"LZ4Decoder"],[3,"LZ4Encoder"],[3,"Block"],[3,"Duplicate"],[4,"Error"]]},\
"store":{"doc":"","i":[[0,"macros","store","",null,null],[0,"storage","","",null,null],[0,"cache","store::storage","",null,null],[3,"Cache","store::storage::cache","",null,null],[12,"table","","",0,null],[12,"scan_freq","","",0,null],[12,"created_at","","",0,null],[12,"last_scan_at","","",0,null],[11,"new","","creates a new empty <code>Cache</code>",0,[[]]],[11,"create_with_scanner","","creates an empty <code>Cache</code> with a periodic scanner which …",0,[[["duration",3]]]],[11,"get","","Gets the value associated with the specified key.",0,[[],["option",4]]],[11,"get_or_insert","","Gets the value associated with the specified key.  If the …",0,[[["duration",3],["option",4]]]],[11,"insert","","Insert a key-value pair into the cache. If key was not …",0,[[["duration",3],["option",4]],["option",4]]],[11,"remove","","Removes a key from the cache.  Returns the value from the …",0,[[],["option",4]]],[11,"contains_key","","",0,[[]]],[11,"get_last_scanned_at","","",0,[[],[["systemtime",3],["option",4]]]],[11,"get_scan_freq","","Get the cache\'s scan frequency.",0,[[],[["duration",3],["option",4]]]],[11,"clear","","Clear the stored cache and reset.",0,[[]]],[11,"try_remove_expired_items","","attempts to remove expired items based on the current …",0,[[["systemtime",3]]]],[3,"Value","store::storage","",null,null],[12,"val","","",1,null],[12,"expiration","","",1,null],[11,"new","","",1,[[["duration",3],["option",4]]]],[11,"has_expired","","",1,[[["systemtime",3]]]],[3,"Cache","store","",null,null],[12,"table","","",0,null],[12,"scan_freq","","",0,null],[12,"created_at","","",0,null],[12,"last_scan_at","","",0,null],[14,"cache","","A macro for defining functions whose return values will …",null,null],[11,"from","store::storage::cache","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","store::storage","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","store::storage::cache","",0,[[],["cache",3]]],[11,"clone","store::storage","",1,[[],["value",3]]],[11,"default","store::storage::cache","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","store::storage","",1,[[["formatter",3]],["result",6]]],[11,"serialize","store::storage::cache","",0,[[],["result",4]]],[11,"serialize","store::storage","",1,[[],["result",4]]],[11,"deserialize","store::storage::cache","",0,[[],["result",4]]],[11,"deserialize","store::storage","",1,[[],["result",4]]]],"p":[[3,"Cache"],[3,"Value"]]},\
"stronghold_communication":{"doc":"","i":[[0,"actor","stronghold_communication","",null,null],[0,"connections","stronghold_communication::actor","",null,null],[3,"ConnectionManager","stronghold_communication::actor::connections","",null,null],[12,"map","","",0,null],[11,"new","","",0,[[]]],[11,"current_connections","","",0,[[],["vec",3]]],[11,"insert","","",0,[[["connectedpoint",4],["keepalive",4],["peerid",3]]]],[11,"is_active_connection","","",0,[[["peerid",3]]]],[11,"is_keep_alive","","",0,[[["peerid",3]]]],[11,"set_keep_alive","","",0,[[["peerid",3],["keepalive",4]]]],[11,"remove_connection","","",0,[[["peerid",3]]]],[0,"firewall","stronghold_communication::actor","",null,null],[3,"PermissionValue","stronghold_communication::actor::firewall","The permission value for request variants. It is a  bit …",null,null],[12,"0","","",1,null],[11,"new","","Create a new permission value for an index, max allowed …",1,[[]]],[11,"value","","",1,[[]]],[3,"PermissionSum","","The sum of allowed permissions. This is using the same …",null,null],[12,"0","","",2,null],[11,"none","","No values are allowed.",2,[[]]],[11,"all","","All values are allowed.",2,[[]]],[11,"add_permission","","Adds a new value to the sum and therefore allows this …",2,[[["permissionvalue",3]]]],[11,"remove_permission","","Remove a certain value from the sum to remove permission.",2,[[["permissionvalue",3]]]],[11,"permits","","Check if the sum includes this value i.g. if a certain …",2,[[["permissionvalue",3]]]],[11,"value","","",2,[[]]],[8,"VariantPermission","","The permission value for the different variants of an …",null,null],[10,"permission","","",3,[[],["permissionvalue",3]]],[8,"ToPermissionVariants","","Convert an element to implement permissions.",null,null],[10,"to_permissioned","","",4,[[]]],[4,"RequestDirection","","The direction of a [<code>CommunicationRequest::RequestMsg</code>] …",null,null],[13,"In","","Incoming request from a remote peer to the local system.",5,null],[13,"Out","","Outgoing request from the local system to a remote peer.",5,null],[4,"FirewallPermission","","Permission that is set in the Firewall. In case of […",null,null],[13,"None","","",6,null],[13,"Restricted","","",6,null],[13,"All","","",6,null],[4,"FirewallRule","","Configure the firewall.",null,null],[13,"SetDefault","","",7,null],[12,"direction","stronghold_communication::actor::firewall::FirewallRule","",8,null],[12,"permission","","",8,null],[13,"SetRule","stronghold_communication::actor::firewall","",7,null],[12,"peer_id","stronghold_communication::actor::firewall::FirewallRule","",9,null],[12,"direction","","",9,null],[12,"permission","","",9,null],[13,"RemoveRule","stronghold_communication::actor::firewall","",7,null],[12,"peer_id","stronghold_communication::actor::firewall::FirewallRule","",10,null],[12,"direction","","",10,null],[3,"FirewallConfiguration","stronghold_communication::actor::firewall","",null,null],[12,"default_in","","",11,null],[12,"default_out","","",11,null],[12,"rules_in","","",11,null],[12,"rules_out","","",11,null],[11,"new","","",11,[[["firewallpermission",4]],["firewallconfiguration",3]]],[11,"set_default_in","","",11,[[["firewallpermission",4]]]],[11,"set_default_out","","",11,[[["firewallpermission",4]]]],[11,"set_rule","","",11,[[["firewallpermission",4],["requestdirection",4],["peerid",3]]]],[11,"remove_rule","","",11,[[["peerid",3],["requestdirection",4]]]],[11,"is_permitted","","",11,[[["peerid",3],["variantpermission",8],["topermissionvariants",8],["requestdirection",4]]]],[0,"swarm_task","stronghold_communication::actor","",null,null],[3,"SwarmTask","stronghold_communication::actor::swarm_task","",null,null],[12,"system","","",12,null],[12,"client","","",12,null],[12,"firewall","","",12,null],[12,"swarm","","",12,null],[12,"swarm_rx","","",12,null],[12,"listener","","",12,null],[12,"relay","","",12,null],[12,"connection_manager","","",12,null],[12,"_marker","","",12,null],[11,"new","","",12,[[["unboundedreceiver",3],["keypair",4],["behaviourconfig",3],["communicationactorconfig",3],["actorsystem",3]],[["result",4],["behaviourerror",4]]]],[11,"poll_swarm","","",12,[[]]],[11,"shutdown","","",12,[[]]],[11,"send_response","","",12,[[["communicationresults",4],["sender",6]]]],[11,"ask_client","","",12,[[],["option",4]]],[11,"start_listening","","",12,[[["multiaddr",3],["option",4]],[["multiaddr",3],["result",4]]]],[11,"connect_peer","","",12,[[["multiaddr",3],["peerid",3]],[["peerid",3],["connectpeererror",4],["result",4]]]],[11,"send_envelope_to_peer","","",12,[[["requestenvelope",3],["peerid",3]],[["result",4],["requestmessageerror",4]]]],[11,"send_request","","",12,[[["peerid",3]],[["result",4],["requestmessageerror",4]]]],[11,"set_relay","","",12,[[["relayconfig",4]],[["result",4],["connectpeererror",4]]]],[11,"configure_firewall","","",12,[[["firewallrule",4]]]],[11,"handle_actor_request","","",12,[[["communicationrequest",4],["sender",6]]]],[11,"handle_incoming_envelope","","",12,[[["requestenvelope",3],["requestid",3],["peerid",3]]]],[11,"handle_swarm_event","","",12,[[["swarmevent",4],["p2pevent",4]]]],[0,"types","stronghold_communication::actor","",null,null],[4,"RelayConfig","stronghold_communication::actor::types","Relay peer for outgoing request.",null,null],[13,"NoRelay","","No relay should be used, peers can only be dialed …",13,null],[13,"RelayAlways","","Always send requests to remote peers via the relay.",13,null],[12,"peer_id","stronghold_communication::actor::types::RelayConfig","",14,null],[12,"addr","","",14,null],[13,"RelayBackup","stronghold_communication::actor::types","Use relay peer if sending the request directly failed,",13,null],[12,"peer_id","stronghold_communication::actor::types::RelayConfig","",15,null],[12,"addr","","",15,null],[4,"KeepAlive","stronghold_communication::actor::types","Determines if the local system should actively keep the …",null,null],[13,"None","","No keep-alive.",16,null],[13,"Limited","","Keep alive for a limited duration.",16,null],[12,"end","stronghold_communication::actor::types::KeepAlive","End timestamp after whom the connection will not actively …",17,null],[13,"Unlimited","stronghold_communication::actor::types","Keep alive until one of the peers close the connection.",16,null],[4,"CommunicationRequest","","Requests for the [<code>CommunicationActor</code>].",null,null],[13,"RequestMsg","","Send a request to a remote peer. This requires that a …",18,null],[12,"peer_id","stronghold_communication::actor::types::CommunicationRequest","",19,null],[12,"request","","",19,null],[13,"SetClientRef","stronghold_communication::actor::types","Set the actor reference that incoming request are …",18,null],[13,"EstablishConnection","","Connect to a remote peer. If the peer id is know it will …",18,null],[12,"addr","stronghold_communication::actor::types::CommunicationRequest","",20,null],[12,"peer_id","","",20,null],[12,"keep_alive","","",20,null],[13,"CloseConnection","stronghold_communication::actor::types","Close the connection to a remote peer so that no more …",18,null],[13,"CheckConnection","","Check if a connection to that peer is currently active.",18,null],[13,"GetSwarmInfo","","Obtain information about the swarm.",18,null],[13,"BanPeer","","Ban a peer, which prevents any connection to that peer.",18,null],[13,"UnbanPeer","","Unban a peer to allow future communication.",18,null],[13,"StartListening","","Start listening to a port on the swarm. If no <code>Multiaddr</code> …",18,null],[13,"RemoveListener","","Stop listening to the swarm. Without a listener, the …",18,null],[13,"SetRelay","","Configured if a relay peer should be used for requests",18,null],[13,"ConfigureFirewall","","Add or remove a rule of the firewall. If a rule for a …",18,null],[13,"Shutdown","","Shutdown communication actor.",18,null],[4,"FirewallBlocked","","The firewall that rejected or dropped the request",null,null],[13,"Local","","The local firewall block between the request was …",21,null],[13,"Remote","","The remote peer did not response.",21,null],[4,"RequestMessageError","","",null,null],[13,"Outbound","","Possible failures occurring in the context of sending an …",22,null],[13,"Inbound","","Possible failures occurring in the context of receiving …",22,null],[13,"Rejected","","The request was rejected or dropped by the local or …",22,null],[3,"EstablishedConnection","","Information about the connection with a remote peer as …",null,null],[12,"start","","",23,null],[12,"keep_alive","","",23,null],[12,"connected_point","","",23,null],[11,"new","","",23,[[["connectedpoint",4],["keepalive",4]]]],[11,"is_keep_alive","","",23,[[]]],[11,"set_keep_alive","","",23,[[["keepalive",4]]]],[4,"CommunicationResults","","Returned results from the [<code>CommunicationActor</code>]",null,null],[13,"RequestMsgResult","","Response or Error for an [<code>RequestMsg</code>] to a remote peer",24,null],[13,"SetClientRefAck","","New client actor reference was set.",24,null],[13,"EstablishConnectionResult","","Result of trying to connect a peer.",24,null],[13,"CloseConnectionAck","","Closed connection to peer.",24,null],[13,"CheckConnectionResult","","Check if the connection exists.",24,null],[12,"peer_id","stronghold_communication::actor::types::CommunicationResults","",25,null],[12,"is_connected","","",25,null],[13,"SwarmInfo","stronghold_communication::actor::types","Information about the local swarm.",24,null],[12,"peer_id","stronghold_communication::actor::types::CommunicationResults","The local peer id.",26,null],[12,"listeners","","The listening addresses of the local system. Not all of …",26,null],[12,"connections","","Established connections.",26,null],[13,"BannedPeerAck","stronghold_communication::actor::types","",24,null],[13,"UnbannedPeerAck","","",24,null],[13,"StartListeningResult","","Result of starting a new listener on the swarm. If it was …",24,null],[13,"RemoveListenerResult","","Stopped listening to the swarm for incoming connections.",24,null],[13,"SetRelayResult","","Setting relay result. Error if the relay peer could not …",24,null],[13,"ConfigureFirewallAck","","Successfully set firewall rule.",24,null],[4,"ConnectPeerError","","Errors that can occur in the context of a pending …",null,null],[13,"Banned","","The peer is currently banned.",27,null],[13,"NoAddresses","","No addresses for the peer to dial",27,null],[13,"Transport","","An error occurred while negotiating the transport …",27,null],[13,"InvalidPeerId","","The peer identity obtained on the connection did not …",27,null],[13,"ConnectionLimit","","The connection was dropped because the connection limit …",27,null],[13,"IO","","An I/O error occurred on the connection.",27,null],[13,"Handler","","The connection handler produced an error.",27,null],[13,"Timeout","","Timout on connection attempt",27,null],[4,"RelayConfig","stronghold_communication::actor","Relay peer for outgoing request.",null,null],[13,"NoRelay","","No relay should be used, peers can only be dialed …",13,null],[13,"RelayAlways","","Always send requests to remote peers via the relay.",13,null],[12,"peer_id","stronghold_communication::actor::RelayConfig","",14,null],[12,"addr","","",14,null],[13,"RelayBackup","stronghold_communication::actor","Use relay peer if sending the request directly failed,",13,null],[12,"peer_id","stronghold_communication::actor::RelayConfig","",15,null],[12,"addr","","",15,null],[4,"KeepAlive","stronghold_communication::actor","Determines if the local system should actively keep the …",null,null],[13,"None","","No keep-alive.",16,null],[13,"Limited","","Keep alive for a limited duration.",16,null],[12,"end","stronghold_communication::actor::KeepAlive","End timestamp after whom the connection will not actively …",17,null],[13,"Unlimited","stronghold_communication::actor","Keep alive until one of the peers close the connection.",16,null],[4,"CommunicationRequest","","Requests for the [<code>CommunicationActor</code>].",null,null],[13,"RequestMsg","","Send a request to a remote peer. This requires that a …",18,null],[12,"peer_id","stronghold_communication::actor::CommunicationRequest","",19,null],[12,"request","","",19,null],[13,"SetClientRef","stronghold_communication::actor","Set the actor reference that incoming request are …",18,null],[13,"EstablishConnection","","Connect to a remote peer. If the peer id is know it will …",18,null],[12,"addr","stronghold_communication::actor::CommunicationRequest","",20,null],[12,"peer_id","","",20,null],[12,"keep_alive","","",20,null],[13,"CloseConnection","stronghold_communication::actor","Close the connection to a remote peer so that no more …",18,null],[13,"CheckConnection","","Check if a connection to that peer is currently active.",18,null],[13,"GetSwarmInfo","","Obtain information about the swarm.",18,null],[13,"BanPeer","","Ban a peer, which prevents any connection to that peer.",18,null],[13,"UnbanPeer","","Unban a peer to allow future communication.",18,null],[13,"StartListening","","Start listening to a port on the swarm. If no <code>Multiaddr</code> …",18,null],[13,"RemoveListener","","Stop listening to the swarm. Without a listener, the …",18,null],[13,"SetRelay","","Configured if a relay peer should be used for requests",18,null],[13,"ConfigureFirewall","","Add or remove a rule of the firewall. If a rule for a …",18,null],[13,"Shutdown","","Shutdown communication actor.",18,null],[4,"FirewallBlocked","","The firewall that rejected or dropped the request",null,null],[13,"Local","","The local firewall block between the request was …",21,null],[13,"Remote","","The remote peer did not response.",21,null],[4,"RequestMessageError","","",null,null],[13,"Outbound","","Possible failures occurring in the context of sending an …",22,null],[13,"Inbound","","Possible failures occurring in the context of receiving …",22,null],[13,"Rejected","","The request was rejected or dropped by the local or …",22,null],[3,"EstablishedConnection","","Information about the connection with a remote peer as …",null,null],[12,"start","","",23,null],[12,"keep_alive","","",23,null],[12,"connected_point","","",23,null],[4,"CommunicationResults","","Returned results from the [<code>CommunicationActor</code>]",null,null],[13,"RequestMsgResult","","Response or Error for an [<code>RequestMsg</code>] to a remote peer",24,null],[13,"SetClientRefAck","","New client actor reference was set.",24,null],[13,"EstablishConnectionResult","","Result of trying to connect a peer.",24,null],[13,"CloseConnectionAck","","Closed connection to peer.",24,null],[13,"CheckConnectionResult","","Check if the connection exists.",24,null],[12,"peer_id","stronghold_communication::actor::CommunicationResults","",25,null],[12,"is_connected","","",25,null],[13,"SwarmInfo","stronghold_communication::actor","Information about the local swarm.",24,null],[12,"peer_id","stronghold_communication::actor::CommunicationResults","The local peer id.",26,null],[12,"listeners","","The listening addresses of the local system. Not all of …",26,null],[12,"connections","","Established connections.",26,null],[13,"BannedPeerAck","stronghold_communication::actor","",24,null],[13,"UnbannedPeerAck","","",24,null],[13,"StartListeningResult","","Result of starting a new listener on the swarm. If it was …",24,null],[13,"RemoveListenerResult","","Stopped listening to the swarm for incoming connections.",24,null],[13,"SetRelayResult","","Setting relay result. Error if the relay peer could not …",24,null],[13,"ConfigureFirewallAck","","Successfully set firewall rule.",24,null],[4,"ConnectPeerError","","Errors that can occur in the context of a pending …",null,null],[13,"Banned","","The peer is currently banned.",27,null],[13,"NoAddresses","","No addresses for the peer to dial",27,null],[13,"Transport","","An error occurred while negotiating the transport …",27,null],[13,"InvalidPeerId","","The peer identity obtained on the connection did not …",27,null],[13,"ConnectionLimit","","The connection was dropped because the connection limit …",27,null],[13,"IO","","An I/O error occurred on the connection.",27,null],[13,"Handler","","The connection handler produced an error.",27,null],[13,"Timeout","","Timout on connection attempt",27,null],[3,"CommunicationActorConfig","","The actor configuration",null,null],[12,"client","","Target client for incoming request",28,null],[12,"firewall_default_in","","Default restriction for incoming requests.",28,null],[12,"firewall_default_out","","Default restriction for outgoing requests.",28,null],[3,"CommunicationActor","","Actor for the communication to a remote peer over the …",null,null],[12,"swarm_tx","","",29,null],[12,"swarm_task_config","","",29,null],[12,"poll_swarm_handle","","",29,null],[12,"_marker","","",29,null],[11,"send_swarm_task","","",29,[[["communicationrequest",4],["sender",6]],[["senderror",3],["result",4]]]],[0,"behaviour","stronghold_communication","",null,null],[0,"protocol","stronghold_communication::behaviour","",null,null],[8,"MessageEvent","stronghold_communication::behaviour::protocol","Trait for the generic Request and Response types",null,null],[3,"MessageProtocol","","Custom protocol that extends libp2ps …",null,null],[3,"MessageCodec","","Describes how messages are read from and written to the …",null,null],[12,"p","","",30,null],[12,"q","","",30,null],[0,"types","stronghold_communication::behaviour","",null,null],[3,"RequestEnvelope","stronghold_communication::behaviour::types","Wrapped request message to allow using a relay peer that …",null,null],[12,"source","","",31,null],[12,"message","","",31,null],[12,"target","","",31,null],[4,"P2PMdnsEvent","","Event that can be produced by the <code>Mdns</code> behaviour.",null,null],[13,"Discovered","","Discovered nodes through mDNS.",32,null],[13,"Expired","","Each discovered record has a time-to-live. When this TTL …",32,null],[3,"P2PIdentifyInfo","","Information of a peer sent in <code>Identify</code> protocol responses.",null,null],[12,"public_key","","The public key underlying the peer\'s <code>PeerId</code>.",33,null],[12,"protocol_version","","Version of the protocol family used by the peer, e.g. …",33,null],[12,"agent_version","","Name and version of the peer, similar to the <code>User-Agent</code> …",33,null],[12,"listen_addrs","","The addresses that the peer is listening on.",33,null],[12,"protocols","","The list of protocols supported by the peer, e.g. …",33,null],[4,"P2PProtocolsHandlerUpgrErr","","Error that can happen on an outbound substream opening …",null,null],[13,"Timeout","","The opening attempt timed out before the negotiation was …",34,null],[13,"Timer","","There was an error in the timer used.",34,null],[13,"Upgrade","","Error while upgrading the substream to the protocol we …",34,null],[4,"P2PIdentifyEvent","","Event emitted  by the <code>Identify</code> behaviour.",null,null],[13,"Received","","Identifying information has been received from a peer.",35,null],[12,"peer_id","stronghold_communication::behaviour::types::P2PIdentifyEvent","",36,null],[12,"info","","",36,null],[12,"observed_addr","","The address observed by the peer for the local node.",36,null],[13,"Sent","stronghold_communication::behaviour::types","Identifying information of the local node has been sent …",35,null],[12,"peer_id","stronghold_communication::behaviour::types::P2PIdentifyEvent","",37,null],[13,"Error","stronghold_communication::behaviour::types","Error while attempting to identify the remote.",35,null],[12,"peer_id","stronghold_communication::behaviour::types::P2PIdentifyEvent","",38,null],[12,"error","","",38,null],[4,"P2POutboundFailure","stronghold_communication::behaviour::types","Possible failures occurring in the context of sending an …",null,null],[13,"DialFailure","","The request could not be sent because a dialing attempt …",39,null],[13,"Timeout","","The request timed out before a response was received.",39,null],[13,"ConnectionClosed","","The connection closed before a response was received.",39,null],[13,"UnsupportedProtocols","","The remote supports none of the requested protocols.",39,null],[4,"P2PInboundFailure","","Possible failures occurring in the context of receiving an…",null,null],[13,"Timeout","","The inbound request timed out, either while reading the …",40,null],[13,"UnsupportedProtocols","","The local peer supports none of the requested protocols.",40,null],[13,"ResponseOmission","","The local peer failed to respond to an inbound request …",40,null],[13,"ConnectionClosed","","The connection closed before a response could be send.",40,null],[4,"P2PReqResEvent","","Event emitted  by the <code>RequestResponse</code> behaviour.",null,null],[13,"Req","","Request Message",41,null],[12,"peer_id","stronghold_communication::behaviour::types::P2PReqResEvent","",42,null],[12,"request_id","","",42,null],[12,"request","","",42,null],[13,"Res","stronghold_communication::behaviour::types","Response Message to a received <code>Req</code>.",41,null],[12,"peer_id","stronghold_communication::behaviour::types::P2PReqResEvent","",43,null],[12,"request_id","","",43,null],[12,"response","","",43,null],[13,"InboundFailure","stronghold_communication::behaviour::types","",41,null],[12,"peer_id","stronghold_communication::behaviour::types::P2PReqResEvent","",44,null],[12,"request_id","","",44,null],[12,"error","","",44,null],[13,"OutboundFailure","stronghold_communication::behaviour::types","",41,null],[12,"peer_id","stronghold_communication::behaviour::types::P2PReqResEvent","",45,null],[12,"request_id","","",45,null],[12,"error","","",45,null],[13,"ResSent","stronghold_communication::behaviour::types","A response to an inbound request has been sent.",41,null],[12,"peer_id","stronghold_communication::behaviour::types::P2PReqResEvent","",46,null],[12,"request_id","","",46,null],[4,"P2PEvent","stronghold_communication::behaviour::types","Event that was emitted by one of the protocols of the …",null,null],[13,"Mdns","","Events from the libp2p mDNS protocol",47,null],[13,"Identify","","Events from the libp2p identify protocol",47,null],[13,"RequestResponse","","Events from the custom request-response protocol",47,null],[8,"MessageEvent","stronghold_communication::behaviour","Trait for the generic Request and Response types",null,null],[3,"RequestEnvelope","","Wrapped request message to allow using a relay peer that …",null,null],[12,"source","","",31,null],[12,"message","","",31,null],[12,"target","","",31,null],[4,"P2PMdnsEvent","","Event that can be produced by the <code>Mdns</code> behaviour.",null,null],[13,"Discovered","","Discovered nodes through mDNS.",32,null],[13,"Expired","","Each discovered record has a time-to-live. When this TTL …",32,null],[3,"P2PIdentifyInfo","","Information of a peer sent in <code>Identify</code> protocol responses.",null,null],[12,"public_key","","The public key underlying the peer\'s <code>PeerId</code>.",33,null],[12,"protocol_version","","Version of the protocol family used by the peer, e.g. …",33,null],[12,"agent_version","","Name and version of the peer, similar to the <code>User-Agent</code> …",33,null],[12,"listen_addrs","","The addresses that the peer is listening on.",33,null],[12,"protocols","","The list of protocols supported by the peer, e.g. …",33,null],[4,"P2PProtocolsHandlerUpgrErr","","Error that can happen on an outbound substream opening …",null,null],[13,"Timeout","","The opening attempt timed out before the negotiation was …",34,null],[13,"Timer","","There was an error in the timer used.",34,null],[13,"Upgrade","","Error while upgrading the substream to the protocol we …",34,null],[4,"P2PIdentifyEvent","","Event emitted  by the <code>Identify</code> behaviour.",null,null],[13,"Received","","Identifying information has been received from a peer.",35,null],[12,"peer_id","stronghold_communication::behaviour::P2PIdentifyEvent","",36,null],[12,"info","","",36,null],[12,"observed_addr","","The address observed by the peer for the local node.",36,null],[13,"Sent","stronghold_communication::behaviour","Identifying information of the local node has been sent …",35,null],[12,"peer_id","stronghold_communication::behaviour::P2PIdentifyEvent","",37,null],[13,"Error","stronghold_communication::behaviour","Error while attempting to identify the remote.",35,null],[12,"peer_id","stronghold_communication::behaviour::P2PIdentifyEvent","",38,null],[12,"error","","",38,null],[4,"P2POutboundFailure","stronghold_communication::behaviour","Possible failures occurring in the context of sending an …",null,null],[13,"DialFailure","","The request could not be sent because a dialing attempt …",39,null],[13,"Timeout","","The request timed out before a response was received.",39,null],[13,"ConnectionClosed","","The connection closed before a response was received.",39,null],[13,"UnsupportedProtocols","","The remote supports none of the requested protocols.",39,null],[4,"P2PInboundFailure","","Possible failures occurring in the context of receiving an…",null,null],[13,"Timeout","","The inbound request timed out, either while reading the …",40,null],[13,"UnsupportedProtocols","","The local peer supports none of the requested protocols.",40,null],[13,"ResponseOmission","","The local peer failed to respond to an inbound request …",40,null],[13,"ConnectionClosed","","The connection closed before a response could be send.",40,null],[4,"P2PReqResEvent","","Event emitted  by the <code>RequestResponse</code> behaviour.",null,null],[13,"Req","","Request Message",41,null],[12,"peer_id","stronghold_communication::behaviour::P2PReqResEvent","",42,null],[12,"request_id","","",42,null],[12,"request","","",42,null],[13,"Res","stronghold_communication::behaviour","Response Message to a received <code>Req</code>.",41,null],[12,"peer_id","stronghold_communication::behaviour::P2PReqResEvent","",43,null],[12,"request_id","","",43,null],[12,"response","","",43,null],[13,"InboundFailure","stronghold_communication::behaviour","",41,null],[12,"peer_id","stronghold_communication::behaviour::P2PReqResEvent","",44,null],[12,"request_id","","",44,null],[12,"error","","",44,null],[13,"OutboundFailure","stronghold_communication::behaviour","",41,null],[12,"peer_id","stronghold_communication::behaviour::P2PReqResEvent","",45,null],[12,"request_id","","",45,null],[12,"error","","",45,null],[13,"ResSent","stronghold_communication::behaviour","A response to an inbound request has been sent.",41,null],[12,"peer_id","stronghold_communication::behaviour::P2PReqResEvent","",46,null],[12,"request_id","","",46,null],[4,"P2PEvent","stronghold_communication::behaviour","Event that was emitted by one of the protocols of the …",null,null],[13,"Mdns","","Events from the libp2p mDNS protocol",47,null],[13,"Identify","","Events from the libp2p identify protocol",47,null],[13,"RequestResponse","","Events from the custom request-response protocol",47,null],[4,"BehaviourError","","Error upon creating a new [<code>P2PNetworkBehaviour</code>]",null,null],[13,"TransportError","","Error on the transport layer",48,null],[13,"NoiseAuthenticError","","Error on upgrading the transport with noise authentication",48,null],[13,"MdnsError","","Error creating new mDNS behaviour",48,null],[3,"BehaviourConfig","","Configuration for initiating the [<code>P2PNetworkBehaviour</code>].",null,null],[12,"timeout","","Timeout for outgoing requests until a […",49,null],[12,"keep_alive","","Duration to keep an idle connection alive when no Request …",49,null],[11,"new","","",49,[[["duration",3],["option",4]]]],[3,"P2PNetworkBehaviour","","The [<code>P2PNetworkBehaviour</code>] determines the behaviour of the …",null,null],[12,"mdns","","",50,null],[12,"identify","","",50,null],[12,"msg_proto","","",50,null],[12,"peers","","",50,null],[12,"events","","",50,null],[12,"response_channels","","",50,null],[11,"init_swarm","","Creates a new [<code>P2PNetworkBehaviour</code>] and returns the swarm …",50,[[["keypair",4],["behaviourconfig",3]],[["swarm",6],["result",4],["behaviourerror",4]]]],[11,"poll","","",50,[[["context",3]],[["poll",4],["networkbehaviouraction",4]]]],[11,"add_peer_addr","","",50,[[["multiaddr",3],["peerid",3]]]],[11,"remove_peer_addr","","",50,[[["peerid",3],["multiaddr",3]]]],[11,"remove_peer","","",50,[[["peerid",3]],[["vec",3],["option",4]]]],[11,"get_peer_addr","","",50,[[["peerid",3]],[["vec",3],["option",4]]]],[11,"get_all_peers","","",50,[[],[["peerid",3],["vec",3]]]],[11,"get_active_mdns_peers","","Get the peers discovered by mdns",50,[[],[["peerid",3],["vec",3]]]],[11,"send_request","","",50,[[["peerid",3]],["requestid",3]]],[11,"send_response","","",50,[[["requestid",3]],["result",4]]],[0,"libp2p","stronghold_communication","",null,null],[3,"ConnectionLimit","stronghold_communication::libp2p","Information about a connection limit.",null,null],[12,"limit","","The maximum number of connections.",51,null],[12,"current","","The current number of connections.",51,null],[4,"Keypair","","Identity keypair of a node.",null,null],[13,"Ed25519","","An Ed25519 keypair.",52,null],[13,"Rsa","","An RSA keypair.",52,null],[13,"Secp256k1","","A Secp256k1 keypair.",52,null],[4,"ConnectedPoint","","The endpoint roles associated with a peer-to-peer …",null,null],[13,"Dialer","","We dialed the node.",53,null],[12,"address","stronghold_communication::libp2p::ConnectedPoint","Multiaddress that was successfully dialed.",54,null],[13,"Listener","stronghold_communication::libp2p","We received the node.",53,null],[12,"local_addr","stronghold_communication::libp2p::ConnectedPoint","Local connection address.",55,null],[12,"send_back_addr","","Stack of protocols used to send back data to the remote.",55,null],[3,"Multiaddr","stronghold_communication::libp2p","Representation of a Multiaddr.",null,null],[12,"bytes","","",56,null],[3,"PeerId","","Identifier of a peer of the network.",null,null],[12,"multihash","","",57,null],[6,"Swarm","","Contains the state of the network, plus the way it should …",null,null],[4,"SwarmEvent","","Event generated by the <code>Swarm</code>.",null,null],[13,"Behaviour","","Event generated by the <code>NetworkBehaviour</code>.",58,null],[13,"ConnectionEstablished","","A connection to the given peer has been opened.",58,null],[12,"peer_id","stronghold_communication::libp2p::SwarmEvent","Identity of the peer that we have connected to.",59,null],[12,"endpoint","","Endpoint of the connection that has been opened.",59,null],[12,"num_established","","Number of established connections to this peer, including …",59,null],[13,"ConnectionClosed","stronghold_communication::libp2p","A connection with the given peer has been closed, …",58,null],[12,"peer_id","stronghold_communication::libp2p::SwarmEvent","Identity of the peer that we have connected to.",60,null],[12,"endpoint","","Endpoint of the connection that has been closed.",60,null],[12,"num_established","","Number of other remaining connections to this same peer.",60,null],[12,"cause","","Reason for the disconnection, if it was not a successful …",60,null],[13,"IncomingConnection","stronghold_communication::libp2p","A new connection arrived on a listener and is in the …",58,null],[12,"local_addr","stronghold_communication::libp2p::SwarmEvent","Local connection address. This address has been earlier …",61,null],[12,"send_back_addr","","Address used to send back data to the remote.",61,null],[13,"IncomingConnectionError","stronghold_communication::libp2p","An error happened on a connection during its initial …",58,null],[12,"local_addr","stronghold_communication::libp2p::SwarmEvent","Local connection address. This address has been earlier …",62,null],[12,"send_back_addr","","Address used to send back data to the remote.",62,null],[12,"error","","The error that happened.",62,null],[13,"BannedPeer","stronghold_communication::libp2p","We connected to a peer, but we immediately closed the …",58,null],[12,"peer_id","stronghold_communication::libp2p::SwarmEvent","Identity of the banned peer.",63,null],[12,"endpoint","","Endpoint of the connection that has been closed.",63,null],[13,"UnreachableAddr","stronghold_communication::libp2p","Tried to dial an address but it ended up being …",58,null],[12,"peer_id","stronghold_communication::libp2p::SwarmEvent","<code>PeerId</code> that we were trying to reach.",64,null],[12,"address","","Address that we failed to reach.",64,null],[12,"error","","Error that has been encountered.",64,null],[12,"attempts_remaining","","Number of remaining connection attempts that are being …",64,null],[13,"UnknownPeerUnreachableAddr","stronghold_communication::libp2p","Tried to dial an address but it ended up being …",58,null],[12,"address","stronghold_communication::libp2p::SwarmEvent","Address that we failed to reach.",65,null],[12,"error","","Error that has been encountered.",65,null],[13,"NewListenAddr","stronghold_communication::libp2p","One of our listeners has reported a new local listening …",58,null],[13,"ExpiredListenAddr","","One of our listeners has reported the expiration of a …",58,null],[13,"ListenerClosed","","One of the listeners gracefully closed.",58,null],[12,"addresses","stronghold_communication::libp2p::SwarmEvent","The addresses that the listener was listening on. These …",66,null],[12,"reason","","Reason for the closure. Contains <code>Ok(())</code> if the stream …",66,null],[13,"ListenerError","stronghold_communication::libp2p","One of the listeners reported a non-fatal error.",58,null],[12,"error","stronghold_communication::libp2p::SwarmEvent","The listener error.",67,null],[13,"Dialing","stronghold_communication::libp2p","A new dialing attempt has been initiated.",58,null],[11,"from","stronghold_communication::actor::connections","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","stronghold_communication::actor::firewall","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","stronghold_communication::actor::swarm_task","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","stronghold_communication::actor::types","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","stronghold_communication::actor","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","stronghold_communication::behaviour::protocol","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","stronghold_communication::behaviour::types","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","stronghold_communication::behaviour","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_string","","",48,[[],["string",3]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","stronghold_communication::libp2p","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"to_string","","",51,[[],["string",3]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"get_hash","","",53,[[]]],[11,"equivalent","","",53,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"to_string","","",56,[[],["string",3]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"protocol_name","","",56,[[]]],[11,"vzip","","",56,[[]]],[11,"get_hash","","",56,[[]]],[11,"equivalent","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"to_string","","",57,[[],["string",3]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"get_hash","","",57,[[]]],[11,"equivalent","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"fmt","","Convert a Multiaddr to a string",56,[[["formatter",3]],[["result",4],["error",3]]]],[11,"partial_cmp","","",56,[[["multiaddr",3]],[["ordering",4],["option",4]]]],[11,"lt","","",56,[[["multiaddr",3]]]],[11,"le","","",56,[[["multiaddr",3]]]],[11,"gt","","",56,[[["multiaddr",3]]]],[11,"ge","","",56,[[["multiaddr",3]]]],[11,"from_str","","",56,[[],[["multiaddr",3],["error",4],["result",4]]]],[11,"from","","",56,[[["ipv4addr",3]],["multiaddr",3]]],[11,"from","","",56,[[["protocol",4]],["multiaddr",3]]],[11,"from","","",56,[[["ipv6addr",3]],["multiaddr",3]]],[11,"from","","",56,[[["ipaddr",4]],["multiaddr",3]]],[11,"deserialize","","",56,[[],[["result",4],["multiaddr",3]]]],[11,"as_ref","","",56,[[]]],[11,"hash","","",56,[[]]],[11,"clone","","",56,[[],["multiaddr",3]]],[11,"from_iter","","",56,[[],["multiaddr",3]]],[11,"cmp","","",56,[[["multiaddr",3]],["ordering",4]]],[11,"eq","","",56,[[["multiaddr",3]]]],[11,"ne","","",56,[[["multiaddr",3]]]],[11,"fmt","","",56,[[["formatter",3]],[["result",4],["error",3]]]],[11,"try_from","","",56,[[["string",3]],[["multiaddr",3],["error",4],["result",4]]]],[11,"try_from","","",56,[[],[["multiaddr",3],["error",4],["result",4]]]],[11,"try_from","","",56,[[["global",3],["vec",3]],[["multiaddr",3],["error",4],["result",4]]]],[11,"serialize","","",56,[[],["result",4]]],[11,"from_str","","",57,[[],[["result",4],["peerid",3]]]],[11,"as_ref","","",57,[[],["multihash",3]]],[11,"cmp","","",57,[[["peerid",3]],["ordering",4]]],[11,"fmt","","",57,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",53,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",51,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",57,[[]]],[11,"hash","","",53,[[]]],[11,"partial_cmp","","",57,[[["peerid",3]],[["ordering",4],["option",4]]]],[11,"lt","","",57,[[["peerid",3]]]],[11,"le","","",57,[[["peerid",3]]]],[11,"gt","","",57,[[["peerid",3]]]],[11,"ge","","",57,[[["peerid",3]]]],[11,"fmt","","",51,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",57,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",57,[[["publickey",4]],["peerid",3]]],[11,"clone","","",51,[[],["connectionlimit",3]]],[11,"clone","","",53,[[],["connectedpoint",4]]],[11,"clone","","",52,[[],["keypair",4]]],[11,"clone","","",57,[[],["peerid",3]]],[11,"eq","","",57,[[["peerid",3]]]],[11,"ne","","",57,[[["peerid",3]]]],[11,"eq","","",53,[[["connectedpoint",4]]]],[11,"ne","","",53,[[["connectedpoint",4]]]],[11,"try_from","","",57,[[["uint",3],["multihash",3]],[["peerid",3],["result",4]]]],[11,"try_from","","",57,[[["global",3],["vec",3]],[["peerid",3],["result",4]]]],[11,"fmt","","",58,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","stronghold_communication::actor::firewall","",2,[[]]],[11,"from","stronghold_communication::actor::types","",27,[[["pendingconnectionerror",4]]]],[11,"from","","",27,[[["dialerror",4]]]],[11,"from","","",27,[[["connectionerror",4]]]],[11,"from","stronghold_communication::behaviour::types","",47,[[["mdnsevent",4]],["p2pevent",4]]],[11,"from","","",47,[[["identifyevent",4]],["p2pevent",4]]],[11,"from","","",47,[[["requestresponseevent",4]],["p2pevent",4]]],[11,"clone","stronghold_communication::actor::firewall","",1,[[],["permissionvalue",3]]],[11,"clone","","",2,[[],["permissionsum",3]]],[11,"clone","","",5,[[],["requestdirection",4]]],[11,"clone","","",6,[[],["firewallpermission",4]]],[11,"clone","","",7,[[],["firewallrule",4]]],[11,"clone","","",11,[[],["firewallconfiguration",3]]],[11,"clone","stronghold_communication::actor::types","",13,[[],["relayconfig",4]]],[11,"clone","","",16,[[],["keepalive",4]]],[11,"clone","","",18,[[],["communicationrequest",4]]],[11,"clone","","",21,[[],["firewallblocked",4]]],[11,"clone","","",22,[[],["requestmessageerror",4]]],[11,"clone","","",23,[[],["establishedconnection",3]]],[11,"clone","","",24,[[],["communicationresults",4]]],[11,"clone","","",27,[[],["connectpeererror",4]]],[11,"clone","stronghold_communication::actor","",28,[[],["communicationactorconfig",3]]],[11,"clone","stronghold_communication::behaviour::protocol","",68,[[],["messageprotocol",3]]],[11,"clone","","",30,[[],["messagecodec",3]]],[11,"clone","stronghold_communication::behaviour::types","",31,[[],["requestenvelope",3]]],[11,"clone","","",32,[[],["p2pmdnsevent",4]]],[11,"clone","","",33,[[],["p2pidentifyinfo",3]]],[11,"clone","","",34,[[],["p2pprotocolshandlerupgrerr",4]]],[11,"clone","","",35,[[],["p2pidentifyevent",4]]],[11,"clone","","",39,[[],["p2poutboundfailure",4]]],[11,"clone","","",40,[[],["p2pinboundfailure",4]]],[11,"clone","","",41,[[],["p2preqresevent",4]]],[11,"clone","","",47,[[],["p2pevent",4]]],[11,"clone","stronghold_communication::behaviour","",49,[[],["behaviourconfig",3]]],[11,"default","stronghold_communication::actor::firewall","",11,[[]]],[11,"default","stronghold_communication::behaviour::protocol","",30,[[]]],[11,"default","stronghold_communication::behaviour","",49,[[]]],[11,"eq","stronghold_communication::actor::firewall","",1,[[["permissionvalue",3]]]],[11,"ne","","",1,[[["permissionvalue",3]]]],[11,"eq","","",1,[[]]],[11,"eq","","",2,[[["permissionsum",3]]]],[11,"ne","","",2,[[["permissionsum",3]]]],[11,"eq","","",2,[[]]],[11,"eq","stronghold_communication::behaviour::types","",32,[[["p2pmdnsevent",4]]]],[11,"ne","","",32,[[["p2pmdnsevent",4]]]],[11,"eq","","",33,[[["p2pidentifyinfo",3]]]],[11,"ne","","",33,[[["p2pidentifyinfo",3]]]],[11,"eq","","",34,[[["p2pprotocolshandlerupgrerr",4]]]],[11,"eq","","",35,[[["p2pidentifyevent",4]]]],[11,"ne","","",35,[[["p2pidentifyevent",4]]]],[11,"eq","","",39,[[["p2poutboundfailure",4]]]],[11,"eq","","",40,[[["p2pinboundfailure",4]]]],[11,"eq","","",41,[[["p2preqresevent",4]]]],[11,"ne","","",41,[[["p2preqresevent",4]]]],[11,"eq","","",47,[[["p2pevent",4]]]],[11,"ne","","",47,[[["p2pevent",4]]]],[11,"fmt","stronghold_communication::actor::firewall","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","stronghold_communication::actor::types","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","stronghold_communication::actor","",28,[[["formatter",3]],["result",6]]],[11,"fmt","stronghold_communication::behaviour::protocol","",68,[[["formatter",3]],["result",6]]],[11,"fmt","stronghold_communication::behaviour::types","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","stronghold_communication::behaviour","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"deserialize","stronghold_communication::behaviour::types","",31,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"protocol_name","stronghold_communication::behaviour::protocol","",68,[[]]],[11,"new_handler","stronghold_communication::behaviour","",50,[[]]],[11,"addresses_of_peer","","",50,[[["peerid",3]],[["vec",3],["multiaddr",3]]]],[11,"inject_connected","","",50,[[["peerid",3]]]],[11,"inject_disconnected","","",50,[[["peerid",3]]]],[11,"inject_connection_established","","",50,[[["peerid",3],["connectionid",3],["connectedpoint",4]]]],[11,"inject_address_change","","",50,[[["peerid",3],["connectionid",3],["connectedpoint",4]]]],[11,"inject_connection_closed","","",50,[[["peerid",3],["connectionid",3],["connectedpoint",4]]]],[11,"inject_addr_reach_failure","","",50,[[["error",8],["peerid",3],["multiaddr",3],["option",4]]]],[11,"inject_dial_failure","","",50,[[["peerid",3]]]],[11,"inject_new_listen_addr","","",50,[[["multiaddr",3]]]],[11,"inject_expired_listen_addr","","",50,[[["multiaddr",3]]]],[11,"inject_new_external_addr","","",50,[[["multiaddr",3]]]],[11,"inject_listener_error","","",50,[[["error",8],["listenerid",3]]]],[11,"inject_listener_closed","","",50,[[["error",3],["listenerid",3],["result",4]]]],[11,"inject_event","","",50,[[["peerid",3],["connectionid",3]]]],[11,"poll","","",50,[[["context",3]],[["poll",4],["networkbehaviouraction",4]]]],[11,"inject_event","","",50,[[["mdnsevent",4]]]],[11,"inject_event","","",50,[[["requestresponseevent",4]]]],[11,"inject_event","","",50,[[["identifyevent",4]]]],[11,"read_request","stronghold_communication::behaviour::protocol","",30,[[["messageprotocol",3]],[["pin",3],["box",3]]]],[11,"read_response","","",30,[[["messageprotocol",3]],[["pin",3],["box",3]]]],[11,"write_request","","",30,[[["messageprotocol",3]],[["pin",3],["box",3]]]],[11,"write_response","","",30,[[["messageprotocol",3]],[["pin",3],["box",3]]]],[11,"create_args","stronghold_communication::actor","",29,[[]]],[11,"post_start","","",29,[[["context",3]]]],[11,"post_stop","","",29,[[]]],[11,"recv","","",29,[[["sender",6],["context",3]]]],[11,"generate_ed25519","stronghold_communication::libp2p","Generate a new Ed25519 keypair.",52,[[],["keypair",4]]],[11,"generate_secp256k1","","Generate a new Secp256k1 keypair.",52,[[],["keypair",4]]],[11,"rsa_from_pkcs8","","Decode an keypair from a DER-encoded secret key in PKCS#8 …",52,[[],[["decodingerror",3],["result",4],["keypair",4]]]],[11,"secp256k1_from_der","","Decode a keypair from a DER-encoded Secp256k1 secret key …",52,[[],[["decodingerror",3],["result",4],["keypair",4]]]],[11,"sign","","Sign a message using the private key of this keypair, …",52,[[],[["signingerror",3],["result",4],["vec",3]]]],[11,"public","","Get the public key of this keypair.",52,[[],["publickey",4]]],[11,"to_endpoint","","Turns the <code>ConnectedPoint</code> into the corresponding <code>Endpoint</code>.",53,[[],["endpoint",4]]],[11,"is_dialer","","Returns true if we are <code>Dialer</code>.",53,[[]]],[11,"is_listener","","Returns true if we are <code>Listener</code>.",53,[[]]],[11,"get_remote_address","","Returns the address of the remote stored in this struct.",53,[[],["multiaddr",3]]],[11,"set_remote_address","","Modifies the address of the remote stored in this struct.",53,[[["multiaddr",3]]]],[11,"empty","","Create a new, empty multiaddress.",56,[[],["multiaddr",3]]],[11,"with_capacity","","Create a new, empty multiaddress with the given capacity.",56,[[],["multiaddr",3]]],[11,"len","","Return the length in bytes of this multiaddress.",56,[[]]],[11,"is_empty","","Returns true if the length of this multiaddress is 0.",56,[[]]],[11,"to_vec","","Return a copy of this [<code>Multiaddr</code>]\'s byte representation.",56,[[],[["global",3],["vec",3]]]],[11,"push","","Adds an already-parsed address component to the end of …",56,[[["protocol",4]]]],[11,"pop","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …",56,[[],[["protocol",4],["option",4]]]],[11,"with","","Like [<code>Multiaddr::push</code>] but consumes <code>self</code>.",56,[[["protocol",4]],["multiaddr",3]]],[11,"iter","","Returns the components of this multiaddress.",56,[[],["iter",3]]],[11,"replace","","Replace a [<code>Protocol</code>] at some position in this <code>Multiaddr</code>.",56,[[],[["option",4],["multiaddr",3]]]],[11,"from_public_key","","Builds a <code>PeerId</code> from a public key.",57,[[["publickey",4]],["peerid",3]]],[11,"from_bytes","","Parses a <code>PeerId</code> from bytes.",57,[[],[["result",4],["peerid",3],["error",4]]]],[11,"from_multihash","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.",57,[[["uint",3],["multihash",3]],[["multihash",3],["peerid",3],["result",4]]]],[11,"random","","Generates a random peer ID from a cryptographically …",57,[[],["peerid",3]]],[11,"to_bytes","","Returns a raw bytes representation of this <code>PeerId</code>.",57,[[],[["global",3],["vec",3]]]],[11,"to_base58","","Returns a base-58 encoded string of this <code>PeerId</code>.",57,[[],["string",3]]],[11,"is_public_key","","Checks whether the public key passed as parameter matches …",57,[[["publickey",4]],["option",4]]]],"p":[[3,"ConnectionManager"],[3,"PermissionValue"],[3,"PermissionSum"],[8,"VariantPermission"],[8,"ToPermissionVariants"],[4,"RequestDirection"],[4,"FirewallPermission"],[4,"FirewallRule"],[13,"SetDefault"],[13,"SetRule"],[13,"RemoveRule"],[3,"FirewallConfiguration"],[3,"SwarmTask"],[4,"RelayConfig"],[13,"RelayAlways"],[13,"RelayBackup"],[4,"KeepAlive"],[13,"Limited"],[4,"CommunicationRequest"],[13,"RequestMsg"],[13,"EstablishConnection"],[4,"FirewallBlocked"],[4,"RequestMessageError"],[3,"EstablishedConnection"],[4,"CommunicationResults"],[13,"CheckConnectionResult"],[13,"SwarmInfo"],[4,"ConnectPeerError"],[3,"CommunicationActorConfig"],[3,"CommunicationActor"],[3,"MessageCodec"],[3,"RequestEnvelope"],[4,"P2PMdnsEvent"],[3,"P2PIdentifyInfo"],[4,"P2PProtocolsHandlerUpgrErr"],[4,"P2PIdentifyEvent"],[13,"Received"],[13,"Sent"],[13,"Error"],[4,"P2POutboundFailure"],[4,"P2PInboundFailure"],[4,"P2PReqResEvent"],[13,"Req"],[13,"Res"],[13,"InboundFailure"],[13,"OutboundFailure"],[13,"ResSent"],[4,"P2PEvent"],[4,"BehaviourError"],[3,"BehaviourConfig"],[3,"P2PNetworkBehaviour"],[3,"ConnectionLimit"],[4,"Keypair"],[4,"ConnectedPoint"],[13,"Dialer"],[13,"Listener"],[3,"Multiaddr"],[3,"PeerId"],[4,"SwarmEvent"],[13,"ConnectionEstablished"],[13,"ConnectionClosed"],[13,"IncomingConnection"],[13,"IncomingConnectionError"],[13,"BannedPeer"],[13,"UnreachableAddr"],[13,"UnknownPeerUnreachableAddr"],[13,"ListenerClosed"],[13,"ListenerError"],[3,"MessageProtocol"]]},\
"stronghold_utils":{"doc":"","i":[[0,"ask","stronghold_utils","",null,null],[5,"ask","stronghold_utils::ask","",null,[[],["remotehandle",3]]],[3,"AskActor","","",null,null],[12,"tx","","",0,null],[11,"boxed","","",0,[[["mutex",3],["arc",3]],["boxactor",6]]],[0,"test_utils","stronghold_utils","",null,null],[0,"fresh","stronghold_utils::test_utils","",null,null],[5,"bytestring","stronghold_utils::test_utils::fresh","",null,[[],["vec",3]]],[5,"non_empty_bytestring","","",null,[[],["vec",3]]],[5,"string","","",null,[[],["string",3]]],[5,"coinflip","","",null,[[]]],[5,"usize","","",null,[[]]],[5,"corrupt","stronghold_utils::test_utils","",null,[[]]],[5,"seek_to_beginning","","",null,[[["file",3]]]],[5,"corrupt_file","","",null,[[["file",3]]]],[5,"corrupt_file_at","","",null,[[["path",3]]]],[5,"ask","stronghold_utils","",null,[[],["remotehandle",3]]],[11,"from","stronghold_utils::ask","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"recv","","",0,[[["sender",6],["context",3]]]]],"p":[[3,"AskActor"]]},\
"vault":{"doc":"","i":[[0,"base64","vault","",null,null],[3,"Base64","vault::base64","",null,null],[18,"PADDING","","base64 padding character",0,null],[11,"encode_data","","encode <code>data</code> using a base64 uri-safe character set.",0,[[],["string",3]]],[11,"decode_data","","decode data from base64 based off of the URI safe …",0,[[],[["result",6],["vec",3]]]],[11,"encode_byte","","encode a single byte",0,[[]]],[11,"decode_byte","","decode a single byte",0,[[],["result",6]]],[8,"Base64Encodable","","a trait to make types base64 encodable",null,null],[10,"base64","","",1,[[],["string",3]]],[8,"Base64Decodable","","a trait to make types base64 decodable",null,null],[10,"from_base64","","",2,[[],["result",6]]],[0,"crypto_box","vault","",null,null],[8,"BoxProvider","vault::crypto_box","A provider interface between the vault and a crypto box. …",null,null],[10,"box_key_len","","function for the key length of the crypto box",3,[[]]],[10,"box_overhead","","gets the crypto box\'s overhead",3,[[]]],[10,"box_seal","","seals some data into the crypto box using the <code>key</code> and the …",3,[[["key",3]],[["result",6],["vec",3]]]],[10,"box_open","","opens a crypto box to get data using the <code>key</code> and the <code>ad</code>.",3,[[["key",3]],[["result",6],["vec",3]]]],[10,"random_buf","","fills a buffer <code>buf</code> with secure random bytes.",3,[[],["result",6]]],[11,"random_vec","","creates a vector with secure random bytes based off of an …",3,[[],[["result",6],["vec",3]]]],[3,"Key","","A key to the crypto box.  Key is stored on the heap which …",null,null],[12,"key","","the guarded raw bytes that make up the key",4,null],[12,"_box_provider","","",4,null],[11,"random","","generate a random key using secure random bytes",4,[[],["result",6]]],[11,"load","","attempts to load a key from inputted data",4,[[["vec",3]],["result",6]]],[11,"bytes","","get the key\'s bytes",4,[[],["vec",3]]],[8,"Encrypt","","trait for encryptable data",null,null],[11,"encrypt","","encrypts a raw data and creates a type T from the …",5,[[["key",3],["asref",8]],["result",6]]],[8,"Decrypt","","Trait for decryptable data",null,null],[11,"decrypt","","decrypts raw data and creates a new type T from the …",6,[[["key",3],["asref",8]],["result",6]]],[0,"types","vault","",null,null],[0,"transactions","vault::types","",null,null],[4,"TransactionType","vault::types::transactions","generic transaction type enum",null,null],[13,"Data","","",7,null],[13,"Revocation","","",7,null],[13,"Init","","",7,null],[11,"val","","convert transaction type into its associated number value.",7,[[],["val",3]]],[3,"Transaction","","a generic transaction (untyped)",null,null],[12,"0","","",8,null],[3,"UntypedTransaction","","untyped transaction view",null,null],[12,"type_id","","transaction type",9,null],[12,"id","","unique identifer for this transaction",9,null],[12,"chain","","chain identifer",9,null],[12,"ctr","","counter value",9,null],[11,"type","","",9,[[],[["transactiontype",4],["result",6]]]],[3,"DataTransaction","","a data transaction",null,null],[12,"type_id","","transaction type",10,null],[12,"id","","unique id for this transaction",10,null],[12,"chain","","chain identifer",10,null],[12,"ctr","","counter value",10,null],[12,"blob","","the blob identifier for the data referred to by this …",10,null],[12,"record_hint","","a record hint",10,null],[8,"TypedTransaction","","a typed transaction",null,null],[10,"type_id","","",11,[[],["val",3]]],[3,"RevocationTransaction","","a revocation transaction",null,null],[12,"type_id","","transaction type",12,null],[12,"id","","unique identifer for this transaction",12,null],[12,"chain","","chain identifer",12,null],[12,"ctr","","counter",12,null],[3,"InitTransaction","","transaction that initializes a new chain",null,null],[12,"type_id","","transaction type",13,null],[12,"id","","unique identifer for this transaction",13,null],[12,"chain","","chain identifer",13,null],[12,"ctr","","counter value",13,null],[11,"new","","create a new data transaction.",10,[[["chainid",3],["val",3],["transactionid",3],["blobid",3],["recordhint",3]],["transaction",3]]],[11,"new","","create a new revocation transaction.",12,[[["chainid",3],["transactionid",3],["val",3]],["transaction",3]]],[11,"untyped","","",8,[[],["untypedtransaction",3]]],[11,"typed","","",8,[[],["option",4]]],[11,"new","","create a new init transaction.",13,[[["chainid",3],["transactionid",3],["val",3]],["transaction",3]]],[17,"TRANSACTION_MAX_BYTES","","",null,null],[3,"SealedTransaction","","a sealed transaction",null,null],[12,"0","","",14,null],[3,"SealedBlob","","a sealed blob",null,null],[12,"0","","",15,null],[0,"utils","vault::types","",null,null],[3,"RecordHint","vault::types::utils","a record hint",null,null],[12,"0","","",16,null],[11,"new","","create a new random Id for hint",16,[[],["result",6]]],[3,"Val","","a big endian encoded number",null,null],[12,"0","","",17,null],[11,"u64","","",17,[[]]],[3,"ChainId","","A chain identifier",null,null],[12,"0","","",18,null],[11,"random","","",18,[[],["result",6]]],[11,"load","","",18,[[],["result",6]]],[3,"TransactionId","","A transaction identifier",null,null],[12,"0","","",19,null],[11,"random","","",19,[[],["result",6]]],[11,"load","","",19,[[],["result",6]]],[3,"BlobId","","A blob identifier",null,null],[12,"0","","",20,null],[11,"random","","",20,[[],["result",6]]],[8,"AsView","vault::types","a view over raw data.",null,null],[11,"view","","creates a view over <code>self</code>.",21,[[]]],[8,"AsViewMut","","a mutable view over raw data.",null,null],[11,"view_mut","","creates a mutable view over <code>self</code>.",22,[[]]],[0,"vault","vault","",null,null],[0,"chain","vault::vault","",null,null],[3,"Chain","vault::vault::chain","",null,null],[12,"garbage","","",23,null],[12,"subchain","","",23,null],[12,"init","","",23,null],[12,"data","","",23,null],[12,"highest_ctr","","",23,null],[11,"data","","",23,[[],[["transactionid",3],["option",4]]]],[11,"init","","",23,[[],[["transactionid",3],["option",4]]]],[11,"highest_ctr","","",23,[[],[["option",4],["val",3]]]],[11,"garbage","","",23,[[],["vec",3]]],[11,"subchain","","",23,[[],["vec",3]]],[11,"len","","",23,[[]]],[11,"balance","","",23,[[]]],[11,"prune","","",23,[[],[["chain",3],["result",6]]]],[0,"protocol","vault::vault","",null,null],[4,"Kind","vault::vault::protocol","",null,null],[13,"Transaction","","",24,null],[13,"Blob","","",24,null],[3,"ReadRequest","","a read call",null,null],[12,"kind","","",25,null],[12,"id","","",25,null],[11,"transaction","","create a read request for a transaction",25,[[["transactionid",3]]]],[11,"blob","","create a read request for a transaction",25,[[["blobid",3]]]],[11,"id","","id of a record",25,[[]]],[11,"kind","","kind of data",25,[[],["kind",4]]],[11,"result","","",25,[[["vec",3]],["readresult",3]]],[3,"ReadResult","","a read result",null,null],[12,"kind","","",26,null],[12,"id","","",26,null],[12,"data","","",26,null],[11,"new","","",26,[[["kind",4]]]],[11,"id","","id of read result",26,[[]]],[11,"kind","","kind of data",26,[[],["kind",4]]],[11,"data","","data from record",26,[[],["vec",3]]],[3,"WriteRequest","","a write call",null,null],[12,"kind","","",27,null],[12,"id","","",27,null],[12,"data","","",27,null],[11,"transaction","","create a write request for a transaction",27,[[["transactionid",3],["sealedtransaction",3]]]],[11,"blob","","creates a new request to write a blob",27,[[["blobid",3],["sealedblob",3]]]],[11,"id","","id of entity",27,[[]]],[11,"kind","","kind of data",27,[[],["kind",4]]],[11,"data","","data of record",27,[[],["vec",3]]],[3,"DeleteRequest","","a delete call",null,null],[12,"kind","","",28,null],[12,"id","","",28,null],[11,"transaction","","create delete request by transaction id",28,[[["transactionid",3]]]],[11,"id","","get id of delete request",28,[[]]],[11,"kind","","kind of data",28,[[],["kind",4]]],[3,"RecordId","vault::vault","A record identifier",null,null],[12,"0","","",29,null],[11,"random","","",29,[[],["result",6]]],[11,"load","","load record_id from data",29,[[],["result",6]]],[3,"DBView","","A view over the records in a vault",null,null],[12,"key","","",30,null],[12,"txs","","",30,null],[12,"chains","","",30,null],[12,"blobs","","",30,null],[12,"cache","","",30,null],[11,"load","","Opens a vault using a key. Accepts the <code>ReadResult</code>:s of …",30,[[["key",3]],["result",6]]],[11,"records","","Creates an iterator over all valid record identifiers and …",30,[[]]],[11,"all","","Creates an iterator over all valid records ids.",30,[[]]],[11,"absolute_balance","","Check the balance of valid records compared to total …",30,[[]]],[11,"chain_ctrs","","Get highest counter from the vault for known records",30,[[],[["recordid",3],["hashmap",3]]]],[11,"not_older_than","","Check the age of the records. Fills the <code>record_ctrs</code> with …",30,[[["hashmap",3]],["result",6]]],[11,"reader","","Converts the <code>DBView</code> into a <code>DBReader</code>.",30,[[],["dbreader",3]]],[11,"writer","","Converts the <code>DBView</code> into a <code>DBWriter</code> for a specific record.",30,[[["recordid",3]],["dbwriter",3]]],[11,"gc","","Garbage collect the records.",30,[[],[["vec",3],["deleterequest",3]]]],[3,"DBReader","","A reader for the <code>DBView</code>",null,null],[12,"view","","",31,null],[4,"PreparedRead","","",null,null],[13,"CacheHit","","",32,null],[13,"CacheMiss","","",32,null],[13,"RecordIsEmpty","","",32,null],[13,"NoSuchRecord","","",32,null],[11,"prepare_read","","Prepare a record for reading. Create a <code>ReadRequest</code> to …",31,[[["recordid",3]],[["result",6],["preparedread",4]]]],[11,"read","","Open a record given a <code>ReadResult</code>.  Returns a vector of …",31,[[["readresult",3]],[["result",6],["vec",3]]]],[11,"is_active_blob","","",31,[[["blobid",3]]]],[11,"exists","","",31,[[["recordid",3]]]],[3,"DBWriter","","A writer for the <code>DBView</code>",null,null],[12,"view","","",33,null],[12,"chain","","",33,null],[12,"next_ctr","","",33,null],[11,"next_ctr","","",33,[[],["val",3]]],[11,"truncate","","Create a new empty record or truncate an existing one",33,[[],[["writerequest",3],["result",6]]]],[11,"relative_balance","","Check the balance of the amount of valid records compared …",33,[[]]],[11,"write","","Write the <code>data</code> to the record, replaces existing data and …",33,[[["recordhint",3]],[["result",6],["vec",3]]]],[11,"revoke","","Revoke a record.",33,[[],[["writerequest",3],["result",6]]]],[11,"into_view","","",33,[[],["dbview",3]]],[8,"Base64Decodable","vault","a trait to make types base64 decodable",null,null],[10,"from_base64","","",2,[[],["result",6]]],[8,"Base64Encodable","","a trait to make types base64 encodable",null,null],[10,"base64","","",1,[[],["string",3]]],[8,"BoxProvider","","A provider interface between the vault and a crypto box. …",null,null],[10,"box_key_len","","function for the key length of the crypto box",3,[[]]],[10,"box_overhead","","gets the crypto box\'s overhead",3,[[]]],[10,"box_seal","","seals some data into the crypto box using the <code>key</code> and the …",3,[[["key",3]],[["result",6],["vec",3]]]],[10,"box_open","","opens a crypto box to get data using the <code>key</code> and the <code>ad</code>.",3,[[["key",3]],[["result",6],["vec",3]]]],[10,"random_buf","","fills a buffer <code>buf</code> with secure random bytes.",3,[[],["result",6]]],[11,"random_vec","vault::crypto_box","creates a vector with secure random bytes based off of an …",3,[[],[["result",6],["vec",3]]]],[8,"Decrypt","vault","Trait for decryptable data",null,null],[11,"decrypt","vault::crypto_box","decrypts raw data and creates a new type T from the …",6,[[["key",3],["asref",8]],["result",6]]],[8,"Encrypt","vault","trait for encryptable data",null,null],[11,"encrypt","vault::crypto_box","encrypts a raw data and creates a type T from the …",5,[[["key",3],["asref",8]],["result",6]]],[3,"Key","vault","A key to the crypto box.  Key is stored on the heap which …",null,null],[12,"key","","the guarded raw bytes that make up the key",4,null],[12,"_box_provider","","",4,null],[3,"ChainId","","A chain identifier",null,null],[12,"0","","",18,null],[3,"RecordHint","","a record hint",null,null],[12,"0","","",16,null],[3,"DBReader","","A reader for the <code>DBView</code>",null,null],[12,"view","","",31,null],[3,"DBView","","A view over the records in a vault",null,null],[12,"key","","",30,null],[12,"txs","","",30,null],[12,"chains","","",30,null],[12,"blobs","","",30,null],[12,"cache","","",30,null],[3,"DBWriter","","A writer for the <code>DBView</code>",null,null],[12,"view","","",33,null],[12,"chain","","",33,null],[12,"next_ctr","","",33,null],[3,"DeleteRequest","","a delete call",null,null],[12,"kind","","",28,null],[12,"id","","",28,null],[4,"Kind","","",null,null],[13,"Transaction","","",24,null],[13,"Blob","","",24,null],[4,"PreparedRead","","",null,null],[13,"CacheHit","","",32,null],[13,"CacheMiss","","",32,null],[13,"RecordIsEmpty","","",32,null],[13,"NoSuchRecord","","",32,null],[3,"ReadRequest","","a read call",null,null],[12,"kind","","",25,null],[12,"id","","",25,null],[3,"ReadResult","","a read result",null,null],[12,"kind","","",26,null],[12,"id","","",26,null],[12,"data","","",26,null],[3,"RecordId","","A record identifier",null,null],[12,"0","","",29,null],[3,"WriteRequest","","a write call",null,null],[12,"kind","","",27,null],[12,"id","","",27,null],[12,"data","","",27,null],[4,"Error","","Errors for the Vault Crate",null,null],[13,"DatabaseError","","",34,null],[13,"VersionError","","",34,null],[13,"ChainError","","",34,null],[13,"Base64Error","","",34,null],[13,"Base64ErrorDetailed","","",34,null],[13,"InterfaceError","","",34,null],[13,"OtherError","","",34,null],[13,"CryptoError","","",34,null],[13,"ValueError","","",34,null],[13,"ProtocolError","","",34,null],[6,"Result","","",null,null],[11,"from","vault::base64","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","vault::crypto_box","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","vault::types::transactions","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","vault::types::utils","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","vault::vault::chain","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","vault::vault::protocol","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","vault::vault","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","vault","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"type_id","vault::types::transactions","",10,[[],["val",3]]],[11,"type_id","","",12,[[],["val",3]]],[11,"type_id","","",13,[[],["val",3]]],[11,"as_mut","","",8,[[]]],[11,"as_mut","","",14,[[]]],[11,"as_mut","","",15,[[]]],[11,"as_ref","","",8,[[]]],[11,"as_ref","","",14,[[]]],[11,"as_ref","","",15,[[]]],[11,"as_ref","vault::types::utils","",16,[[]]],[11,"as_ref","","",18,[[]]],[11,"as_ref","","",19,[[]]],[11,"as_ref","","",20,[[]]],[11,"as_ref","vault::vault::protocol","",26,[[]]],[11,"from","vault::types::transactions","",14,[[["vec",3]]]],[11,"from","","",14,[[]]],[11,"from","","",15,[[["vec",3]]]],[11,"from","","",15,[[]]],[11,"from","vault::types::utils","",16,[[]]],[11,"from","","",17,[[]]],[11,"clone","vault::crypto_box","",4,[[]]],[11,"clone","vault::types::transactions","",7,[[],["transactiontype",4]]],[11,"clone","","",8,[[],["transaction",3]]],[11,"clone","vault::types::utils","",16,[[],["recordhint",3]]],[11,"clone","","",17,[[],["val",3]]],[11,"clone","","",18,[[],["chainid",3]]],[11,"clone","","",19,[[],["transactionid",3]]],[11,"clone","","",20,[[],["blobid",3]]],[11,"clone","vault::vault::protocol","",24,[[],["kind",4]]],[11,"clone","","",25,[[],["readrequest",3]]],[11,"clone","","",26,[[],["readresult",3]]],[11,"clone","","",27,[[],["writerequest",3]]],[11,"clone","","",28,[[],["deleterequest",3]]],[11,"clone","vault::vault","",29,[[],["recordid",3]]],[11,"default","vault::types::transactions","",8,[[]]],[11,"cmp","vault::crypto_box","",4,[[],["ordering",4]]],[11,"cmp","vault::types::transactions","",7,[[["transactiontype",4]],["ordering",4]]],[11,"cmp","vault::types::utils","",16,[[["recordhint",3]],["ordering",4]]],[11,"cmp","","",17,[[],["ordering",4]]],[11,"cmp","","",18,[[["chainid",3]],["ordering",4]]],[11,"cmp","","",19,[[["transactionid",3]],["ordering",4]]],[11,"cmp","","",20,[[["blobid",3]],["ordering",4]]],[11,"cmp","vault::vault","",29,[[["recordid",3]],["ordering",4]]],[11,"eq","vault::crypto_box","",4,[[]]],[11,"eq","vault::types::transactions","",7,[[["transactiontype",4]]]],[11,"eq","","",8,[[["transaction",3]]]],[11,"ne","","",8,[[["transaction",3]]]],[11,"eq","vault::types::utils","",16,[[["recordhint",3]]]],[11,"ne","","",16,[[["recordhint",3]]]],[11,"eq","","",17,[[["val",3]]]],[11,"ne","","",17,[[["val",3]]]],[11,"eq","","",18,[[["chainid",3]]]],[11,"ne","","",18,[[["chainid",3]]]],[11,"eq","","",19,[[["transactionid",3]]]],[11,"ne","","",19,[[["transactionid",3]]]],[11,"eq","","",20,[[["blobid",3]]]],[11,"ne","","",20,[[["blobid",3]]]],[11,"eq","vault::vault::protocol","",24,[[["kind",4]]]],[11,"eq","","",25,[[["readrequest",3]]]],[11,"ne","","",25,[[["readrequest",3]]]],[11,"eq","vault::vault","",29,[[["recordid",3]]]],[11,"ne","","",29,[[["recordid",3]]]],[11,"eq","","",32,[[["preparedread",4]]]],[11,"ne","","",32,[[["preparedread",4]]]],[11,"partial_cmp","vault::crypto_box","",4,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","vault::types::transactions","",7,[[["transactiontype",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","vault::types::utils","",16,[[["recordhint",3]],[["option",4],["ordering",4]]]],[11,"lt","","",16,[[["recordhint",3]]]],[11,"le","","",16,[[["recordhint",3]]]],[11,"gt","","",16,[[["recordhint",3]]]],[11,"ge","","",16,[[["recordhint",3]]]],[11,"partial_cmp","","",17,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",18,[[["chainid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["chainid",3]]]],[11,"le","","",18,[[["chainid",3]]]],[11,"gt","","",18,[[["chainid",3]]]],[11,"ge","","",18,[[["chainid",3]]]],[11,"partial_cmp","","",19,[[["transactionid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",19,[[["transactionid",3]]]],[11,"le","","",19,[[["transactionid",3]]]],[11,"gt","","",19,[[["transactionid",3]]]],[11,"ge","","",19,[[["transactionid",3]]]],[11,"partial_cmp","","",20,[[["blobid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",20,[[["blobid",3]]]],[11,"le","","",20,[[["blobid",3]]]],[11,"gt","","",20,[[["blobid",3]]]],[11,"ge","","",20,[[["blobid",3]]]],[11,"partial_cmp","vault::vault","",29,[[["recordid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",29,[[["recordid",3]]]],[11,"le","","",29,[[["recordid",3]]]],[11,"gt","","",29,[[["recordid",3]]]],[11,"ge","","",29,[[["recordid",3]]]],[11,"fmt","vault::crypto_box","",4,[[["formatter",3]],["result",6]]],[11,"fmt","vault::types::transactions","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","vault::types::utils","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","vault::vault::protocol","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","vault::vault","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","vault","",34,[[["formatter",3]],["result",6]]],[11,"fmt","vault::vault","",29,[[["formatter",3]],["result",6]]],[11,"fmt","vault","",34,[[["formatter",3]],["result",6]]],[11,"add","vault::types::utils","",17,[[]]],[11,"add_assign","","",17,[[]]],[11,"hash","vault::crypto_box","",4,[[]]],[11,"hash","vault::types::transactions","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","vault::types::utils","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","vault::vault::protocol","",24,[[]]],[11,"hash","vault::vault","",29,[[]]],[11,"try_from","vault::types::transactions","",7,[[["val",3]],["result",4]]],[11,"try_from","","",8,[[["vec",3]],["result",4]]],[11,"try_from","vault::types::utils","",18,[[],["result",4]]],[11,"try_from","","",18,[[["vec",3]],["result",4]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_from","vault::vault","",29,[[["vec",3]],["result",4]]],[11,"try_from","","",29,[[],["result",4]]],[11,"deserialize","vault::crypto_box","",4,[[],["result",4]]],[11,"deserialize","vault::types::transactions","",8,[[],["result",4]]],[11,"deserialize","vault::types::utils","",16,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","vault::vault::protocol","",24,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","vault::vault","",29,[[],["result",4]]],[11,"serialize","vault::crypto_box","",4,[[],["result",4]]],[11,"serialize","vault::types::transactions","",8,[[],["result",4]]],[11,"serialize","vault::types::utils","",16,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","vault::vault::protocol","",24,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","vault::vault","",29,[[],["result",4]]]],"p":[[3,"Base64"],[8,"Base64Encodable"],[8,"Base64Decodable"],[8,"BoxProvider"],[3,"Key"],[8,"Encrypt"],[8,"Decrypt"],[4,"TransactionType"],[3,"Transaction"],[3,"UntypedTransaction"],[3,"DataTransaction"],[8,"TypedTransaction"],[3,"RevocationTransaction"],[3,"InitTransaction"],[3,"SealedTransaction"],[3,"SealedBlob"],[3,"RecordHint"],[3,"Val"],[3,"ChainId"],[3,"TransactionId"],[3,"BlobId"],[8,"AsView"],[8,"AsViewMut"],[3,"Chain"],[4,"Kind"],[3,"ReadRequest"],[3,"ReadResult"],[3,"WriteRequest"],[3,"DeleteRequest"],[3,"RecordId"],[3,"DBView"],[3,"DBReader"],[4,"PreparedRead"],[3,"DBWriter"],[4,"Error"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);